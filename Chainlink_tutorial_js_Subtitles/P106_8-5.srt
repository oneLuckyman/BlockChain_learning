12842
12:59:11,110 --> 12:59:36,520
Now we want to create our fun function. 
现在我们要创建我们的 "fund" 函数

12843
12:59:36,520 --> 12:59:39,460
And then later on, we're going to create our withdrawal function. 
稍后我们还要创建我们的 "withdraw" 函数

12844
12:59:39,460 --> 12:59:44,140
And this is where front end JavaScript code. And no Gs are a little bit different. 
这里的是前端 JavaScript 代码，它和 Node.js 有一些小的不同

12845
12:59:44,140 --> 12:59:48,070
In no JS, we've been using this require keyword to import dependencies 
在 Node.js 中，我们一直用的是 `require` 关键字来导入依赖库

12846
12:59:48,100 --> 12:59:52,570
in front end JavaScript,  you can't use require, and it won't exactly work. 
而在前端 JavaScript 中，就不能使用 `require` 了，它是完全不工作的

12847
12:59:52,570 --> 12:59:56,230
Now later on, we're going to use the Import keyword, 
现在，我们要使用 `import` 关键字

12848
12:59:56,230 --> 12:59:59,500
which is really the better way to do this. 
它其实是处理这些操作更好的方式

12849
12:59:59,500 --> 13:00:02,680
And this is where our first differences going to be
这就是我们所遇到的第一处不同

12850
13:00:02,830 --> 13:00:06,340
using the Import keyword for front end is much better than the require keyword, 
在前端中使用 `import` 关键字要比使用 `require` 关键字好一些

12851
13:00:06,340 --> 13:00:09,160
especially since the require keyword doesn't actually work. 
尤其是 `require` 关键字其实并不能使用

12852
13:00:09,160 --> 13:00:12,430
And for those you who might struggle with this disconnect in this change. 
你们中的有些对此感到困惑人可能会对这种变化产生一些撕裂感

12853
13:00:12,430 --> 13:00:15,340
Once again, in the GitHub repo associated with this, 
所以再次强调，在与课程关联的 GitHub 仓库中

12854
13:00:15,340 --> 13:00:18,760
we do have a Node js edition of this, 
我们还提供了 Node.js 版本的代码

12855
13:00:18,760 --> 13:00:22,510
where you can use the require keyword, 
你可以在这里使用 `require` 关键字

12856
13:00:22,510 --> 13:00:24,700
you just have to go through the readme and download some packages and run some scripts 
你只需要阅读一下 "README"，并下载一些包，然后运行一些脚本

12857
13:00:24,700 --> 13:00:28,000
that basically transform your code that uses require into code that works with imports. 
这些脚本基本上就是将使用 `require` 的代码给转换为使用 `import`

12858
13:00:28,000 --> 13:00:32,380
But we're going to teach you the way to work with your front end code here using imports. 
但我们的教学方式是直接在前端代码中使用 `import`

12859
13:00:32,380 --> 13:00:35,260
Now you'll see when we get to next Jas 
之后你会看到，当我们进入到 Next.js 时

12860
13:00:35,260 --> 13:00:38,740
that we will still download code from node modules 
我们仍然会从 "node_modules" 中下载代码 

12861
13:00:38,740 --> 13:00:43,510
and using a yarn lock and a package json etc. 
并且仍然会使用 "yarn.lock" 和 "package.json" 等文件

12862
13:00:43,540 --> 13:00:47,650
So summary in future seconds, we are still going to do yarn add. 
所以归根结底，我们在未来仍然会继续使用 `yarn add`

12863
13:00:47,650 --> 13:00:51,400
But outside of a framework 
但在这个框架之外，

12864
13:00:51,400 --> 13:00:55,090
when we're using this raw JavaScript, this raw HTML setup, like what we're working with here, 
当我们使用原始的 JavaScript 和原始的 HTML 设置时，比如我们现在这样

12865
13:00:55,090 --> 13:00:57,520
we're not going to be doing yarn, add node modules 
我们就不能使用 `yarn add node_modules` 了

12866
13:00:57,520 --> 13:01:00,430
will add node modules for framework like next react. 
未来我们还是会在诸如 "Next React" 等框架中继续使用 "node_modules" 

12867
13:01:00,430 --> 13:01:03,220
But for raw JavaScript, we'll be using a different syntax, 
但在原始的 JavaScript 中，我们会使用不同的语法

12868
13:01:03,220 --> 13:01:05,710
which I'll show you soon. 
我马上就会展示这一点

12869
13:01:05,710 --> 13:01:08,470
So let's go ahead and start building our fund function here. 
让我们继续，开始在这里构建我们的 "fund" 函数吧

12870
13:01:08,470 --> 13:01:11,590
To make our fun functions, what would we normally do? 
为了构建我们的 "fund" 函数，我们通常是怎么做的呢？

12871
13:01:11,860 --> 13:01:14,950
Well, we'd create an async function called fund. 
我们要创建一个 `async function` 名为 `fund()`

12872
13:01:14,950 --> 13:01:18,610
And in this function, we probably would want to take some ether mount as a parameter, 
在这个函数中，我们大概想让它接收一些 "ethAmount" 作为参数

12873
13:01:18,610 --> 13:01:21,670
because we're going to want to fund it with some amount of Aetherium. 
因为我们要用一定数额的以太币来进行资助

12874
13:01:21,670 --> 13:01:26,740
When we call this function, we might want to run console dot log 
当我们调用这个函数时，我们可能想要运行 `console.log(``)`

12875
13:01:26,740 --> 13:01:31,720
will do a little string interpolation here. 
我们要在这里做一个字符串插值

12876
13:01:32,470 --> 13:01:36,460
Funding with eth amount, dot dot dot, 
`Funding with ${ethAmount}...`

12877
13:01:36,460 --> 13:01:40,630
these semicolons are going to drive me absolutely insane. 
这些分号绝对会让我疯掉

12878
13:01:40,750 --> 13:01:43,630
So I'm going to add a our dot prettier dot our rc file into this, 
所以我要在这里添加一个 ".prettierrc" 文件

12879
13:01:43,660 --> 13:01:46,630
and I'm going to go ahead and add prettier in here. Otherwise, I'm going to lose my mind. 
我要在这里添加 "prettier"，否则我会失去理智的

12880
13:01:46,630 --> 13:01:50,620
So we're gonna do yarn add dash dash Dev, prettier, 
所以我们来执行 `yarn add --dev prettier`

12881
13:01:50,620 --> 13:01:53,740
just so we can format our JavaScript with prettier 
这样我们就能使用 "prettier" 来格式化我们的 JavaScript 了

12882
13:01:53,740 --> 13:01:55,930
come back to index.js. I'm gonna hit command S, 
回到 "index.js"，按下 "Command S"

12883
13:01:55,930 --> 13:02:00,100
and it looks like it does indeed, auto format with prettier now yay, no matter semicolons, 
看起来它确实使用 "prettier" 进行自动格式化了，耶，没有分号了

12884
13:02:00,100 --> 13:02:04,060
we can call this fun function the same way we call connect. 
我们可以像调用 "connect()" 函数一样调用这个 "fund()" 函数

12885
13:02:04,060 --> 13:02:08,980
So in in our index dot HTML, maybe we'll create a new button. 
所以在我们的 "index.html" 中，我们需要创建一个新的按钮

12886
13:02:08,980 --> 13:02:17,470
Button. We'll give it an ID of fund will say on click equals fund. 
`<button` 我们给它一个 `id="fund"` 还有 `onclick="fund()">` 

12887
13:02:18,100 --> 13:02:20,800
And we'll say fund. And this will be our button here, 
接着是 `Fund` 最后是 `</button>`

12888
13:02:20,800 --> 13:02:24,340
we save it, we're looking at our front end. 
我们保存一下，然后再看看我们的前端

12889
13:02:24,340 --> 13:02:27,430
Now the fund button that if we call, we say funding with undefined 
现在就有了一个 "Fund" 按钮，如果我们调用它就会收到 "Funding with undefined"

12890
13:02:27,430 --> 13:02:31,150
because we're not passing it an amount here. 
因为我们这里并没有给它任何金额

12891
13:02:31,150 --> 13:02:33,550
So back in our index console dot log funding with 
所以回到我们 "index" 的 `console.log(`Funding with`)`

12892
13:02:33,550 --> 13:02:37,540
and we'll just want to make sure that we can actually call that Funmi function. 
我们只需要确保我们能够实际调用那个 "FundMe()" 函数即可

12893
13:02:37,660 --> 13:02:40,630
So we'll copy this line again and we'll say type of window dot Aetherium does not equal undefined. 
所以我们再次复制这一行 `typeof window.ethereum !== "undefined"`

12894
13:02:40,630 --> 13:02:43,930
We'll go ahead and try to fund here 
并在这里继续编写 "fund" 函数

12895
13:02:43,930 --> 13:02:47,560
to send a transaction. What are the things that we absolutely 100% Always need? 
要发送一笔交易，有什么东西是我们百分之百肯定需要的？

12896
13:02:47,560 --> 13:02:51,610
Well, we need a provider slash connection to the blockchain. 
我们需要一个 "provider" 或者说连接到区块链上 ("/ connection to the blockchain")

12897
13:02:51,910 --> 13:02:57,340
And we need a signer slash wallet, slash someone with some gas to actually send it 
我们还需要一个 "signer / wallet" 或者说一个具有 gas 的人("/ some with some gas") 以实际发送交易

12898
13:02:57,340 --> 13:03:01,390
and then And we're probably going to need the contract that we are interacting with. 
接着我们很可能还需要一个“能够与之交互的合约”("contract that we are interacting with")

12899
13:03:01,390 --> 13:03:04,180
And to get that contract, we're going to need ABI and address. 
为了获取这个合约，我们需要 "ABI" 还有地址 ("address")

12900
13:03:04,180 --> 13:03:08,800
And with these all together, we can send any transaction. 
有了这些，我们就可以发送任何交易了

12901
13:03:08,800 --> 13:03:11,530
So to get our provider, we're going to actually go ahead and work with ethers again. 
为了获取我们的 "provider"，我们要再次用到 ethers

12902
13:03:11,530 --> 13:03:14,860
Now, we're going to do it a little bit differently, though, 
现在，我们将以略微有点不同的方式来进行操作

12903
13:03:14,860 --> 13:03:17,680
before, the way we worked with ethers is we said const ethers equals require ethers, right. 
之前我们使用 ethers 的方法是 `const {ethers} = require("ethers")` 对吧？

12904
13:03:17,680 --> 13:03:23,380
And this is how we pulled ethers. 
这就是我们获取 ethers 的方式

12905
13:03:23,980 --> 13:03:27,160
And now like I just said to you, though, 
现在，就像我刚才跟你说的那样

12906
13:03:27,160 --> 13:03:30,190
require doesn't work in the front end. 
`require` 在前端中并不适用

12907
13:03:30,190 --> 13:03:33,610
And we actually don't want to install ethers with a node modules package. 
而且我们并不想通过 "node_modules" 包来安装 ethers 

12908
13:03:33,610 --> 13:03:37,510
So what we can actually do instead 
所以我们可以采用另一种方法

12909
13:03:37,510 --> 13:03:41,860
is let's go to the ethers documentation. 
让我们前往 ethers 的文档

12910
13:03:41,860 --> 13:03:46,030
If you go to the Getting Started section, scroll down, 
如果你点开这个 "Getting Started" 部分，往下拉

12911
13:03:46,030 --> 13:03:50,950
they have a section about importing using Node js, which uses require or imports. 
他们在这里有一个 "Importing" 部分，Node.js 下，可以使用 `require` 或 `import`

12912
13:03:51,070 --> 13:03:55,270
And then they also have some documentation for working with the web browser. 
接下来，他们还有一个在 “Web 浏览器”("Web Browser")下的使用文档

12913
13:03:55,270 --> 13:03:59,110
So instead of us doing a node module, what we'll do 
所以我们不再使用 "node_modules" 

12914
13:03:59,140 --> 13:04:02,500
is we'll copy the ethers library to our own directories and serve it ourselves. 
而是把 ethers 库复制到我们的目录中，自行使用服务

12915
13:04:02,500 --> 13:04:06,250
So what we do is we can come in here, we can copy this massive file, 
我们可以到这里来，复制这个巨大的文件

12916
13:04:06,250 --> 13:04:10,300
which is ethers, but in front end addition, 
这个文件就是 ethers，只不过是前端版本

12917
13:04:10,330 --> 13:04:14,410
and come back to our file. And we'll make a new file in here.
回到我们的文件这里，然后创建一个新的文件

12918
13:04:14,410 --> 13:04:14,860
Called ethers. We'll do 5.6 point esm.min.js. 
命名为 "ethers-5.6.esm.min.js"

12919
13:04:16,540 --> 13:04:24,940
And we'll paste that massive thing in here. 
接着我们把这一大堆内容粘贴到这里来

12920
13:04:24,940 --> 13:04:28,150
Now, since I have prettier
现在，由于我拥有 "prettier" 扩展

12921
13:04:28,150 --> 13:04:31,180
when I save it, it's going to auto format. 
所以当我保存时，它就会自动进行格式化

12922
13:04:31,210 --> 13:04:37,030
And it's just this huge file, which has everything ethers, 
这是一个巨--大的文件，其中包含了 ethers 的所有内容

12923
13:04:37,030 --> 13:04:41,680
but front end defied if you will. 
但却是前端化的

12924
13:04:41,680 --> 13:04:46,210
Now what we can do is we can import this into our index.js. 
现在我们就可以将其导入到我们的 "index.js" 里了

12925
13:04:46,210 --> 13:04:51,400
So instead of using require in here, we'll say import ethers from 
所以我们就不在这里使用 `require` 了，而是 `import {ethers} from "./"`

12926
13:04:51,400 --> 13:05:00,760
and then we'll just refer to that file that we just got ethers dash 5.6 point esm.min.js. 
然后指向我们刚刚获取的那个文件 `"ethers-5.6.esm.min.js"`

12927
13:05:00,760 --> 13:05:04,960
Now, we only need to do this weird copy pasting of the file import thing in this HTML JavaScript lesson. 
现在，我们只会在这个 HTML JavaScript 课程中，使用这种奇怪的复制粘贴文件再导入的方式

12928
13:05:05,050 --> 13:05:09,430
In future lessons with Node js, we are going to do yarn, add ethers, 
在未来使用 Node.js 的课程中，我们还是会使用 `yarn add ethers`

12929
13:05:09,460 --> 13:05:12,580
kinda like we've normally seen. 
就和我们平常看到的一样

12930
13:05:12,580 --> 13:05:15,790
The frameworks like React and next Jas that we're going to use 
之后我们要使用的 "React" 和 "Next.js" 框架

12931
13:05:15,790 --> 13:05:19,900
are going to automatically convert those yarn added packages to their front end to five versions. 
会把它们用 yarn 添加的包自动转换为适用前端的版本

12932
13:05:19,930 --> 13:05:23,650
But for this section, this is how we're going to actually import the ethers package. 
但在本节中，这就是我们导入 ethers 包的方式

12933
13:05:23,650 --> 13:05:25,990
Now the other thing we'll have to do 
现在我们还得处理另外一件事

12934
13:05:25,990 --> 13:05:29,830
is on our front end, we'll have to change this from type text slash JavaScript to type module 
在我们的前端中，我们要把这个 `type="text/javascript"` 修改为 `type="module"`

12935
13:05:29,830 --> 13:05:34,180
changes. The type module allows us to import modules into our code, 
修改为 `type="module"` 可以允许我们在代码中导入模块

12936
13:05:34,180 --> 13:05:39,340
which we're going to be importing this, and we're going to import another module as well. 
我们要导入这个，以及另外一个模块

12937
13:05:39,340 --> 13:05:42,040
Awesome. 
非常好

12938
13:05:42,040 --> 13:05:45,310
And now though, if we go back to our front end,
现在如果回到我们的前端

12939
13:05:45,310 --> 13:05:49,900
do a little refresh with the connect button, 
刷新一下，然后点击 "Connect"

12940
13:05:50,410 --> 13:05:53,830
we get Connect is not defined at HTML button.on. Click, 
我们会被提示 “connect 未在 HTMLButtonElement.onclick 中被定义”
("connect is not defined at HTMLButtonElement.onclick")

12941
13:05:53,830 --> 13:05:57,430
so instead of calling our Connect button from the front end here, 
所以我们不再继续在前端中调用 "Connect" 按钮了

12942
13:05:57,430 --> 13:06:00,580
we're going to remove these on clicks from our index dot HTML, 
而是把这些 "onclick" 从 "index.html" 中都删掉

12943
13:06:00,580 --> 13:06:05,980
and go into our index.js and add those connect buttons in here. 
然后来到我们的 "index.js"，并把 "Connect" 按钮添加到这里

12944
13:06:05,980 --> 13:06:10,660
So we'll say const. Connect button equals document, dot get element by ID, Connect button. 
`const connectButton = document.getElementById("connectButton")`

12945
13:06:10,660 --> 13:06:17,980
And then we'll say const. One button equals Doc, you meant dot get element by ID. One button, 
然后是 `const fundButton = document.getElementById("fundButton")

12946
13:06:18,880 --> 13:06:27,280
the idea of the connect button is Connect button. 
"Connect" 按钮的 "id" 就是 "connectButton"

12947
13:06:27,880 --> 13:06:35,350
The idea the fun button is fun button. 
"Fund" 按钮的 "id" 就是 "fundButton"

12948
13:06:35,350 --> 13:06:37,810
And then we'll say connect button.on Click equals connect. 
现在我们要写 `connectButton.onclick = connect`

12949
13:06:37,810 --> 13:06:43,750
And one button.on Click equals fond. 
以及 `fundButton.onclick = fund`

12950
13:06:43,750 --> 13:06:53,380
We go back to our front end, do a little refresh. We'll hit connect now. 
回到我们的前端，刷新一下，点击 "Connect"

12951
13:06:53,380 --> 13:06:56,530
And it's actually working, 
它已经正常运行了

12952
13:06:56,530 --> 13:06:59,620
we'll go to our Metamask will disconnect, refresh, hit Connect, 
打开我们的 MetaMask，断开连接，刷新，点击 "Connect"

12953
13:06:59,620 --> 13:07:05,050
and boom, it's popping up again. 
嘭，它再次弹出来了

12954
13:07:05,050 --> 13:07:08,320
This is just due to that type being module, 
这一切都是由于这里改成了 `type="module"`

12955
13:07:08,350 --> 13:07:12,460
if it was text slash JavaScript, that on click button adding in here, 
如果这里还是 "text/javascript"，"onclick" 按钮就要添加在这里

12956
13:07:12,460 --> 13:07:15,070
but since we're doing module, 
但是由于我们使用了模块("module")

12957
13:07:15,070 --> 13:07:17,890
we're going to add those on clicks right in our JavaScript. 
我们就可以把这些 "onclick" 添加到我们的 JavaScript 里了

12958
13:07:17,890 --> 13:07:20,920
But now that we've got ethers in here, 
但现在我们已经在这里有 ethers 了

12959
13:07:20,920 --> 13:07:25,540
what we can do is we can even do like a little console dot log, just paste ethers in here, 
所以我们甚至可以在这里写 `console.log(ethers)`

12960
13:07:25,540 --> 13:07:28,330
or actually better yet. 
或者更好的方式是

12961
13:07:28,330 --> 13:07:31,660
We'll add it right above the Connect button. 
把它添加到 "connect" 按钮的上面

12962
13:07:31,660 --> 13:07:35,650
Go back to our front end, we'll do a refresh 
回到我们的前端，刷新一下

12963
13:07:35,650 --> 13:07:38,950
and we see the entire ethers object right in our front end which is perfect, 
我们可以看到，整个 ethers 对象现在就在我们的前端里，简直完美

12964
13:07:38,950 --> 13:07:43,000
which is exactly what we want here. 
这正是我们想要看到的

12965
13:07:43,000 --> 13:07:47,260
And since we've got these two variables here, we might as well update this 
因为我们这里有这两个变量了，所以我们不妨更新一下这里

12966
13:07:47,260 --> 13:07:50,740
to just say connect button dot innerHTML equals connected 
直接就说 `connectButton.innerHTML = "Connected"`

12967
13:07:50,740 --> 13:07:53,110
and here as well. Connects button dot innerHTML equals please install meta mask 
这里也是 `connectButton.innerHTML = "Please install MetaMask"`

12968
13:07:53,110 --> 13:07:56,620
because now connect button is going to be the same as running this document dot get element by ID right here. 
因为现在 `connectButton` 就相当于运行这里的 `document.getElementById`