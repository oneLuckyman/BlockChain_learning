10884
10:55:42,410 --> 10:55:48,560
Now let's go ahead and deploy this to With the Rinkeby test net, 
现在让我们把它部署到 Rinkeby 测试网上

10885
10:55:48,590 --> 10:55:51,470
and what do we need to deploy this to the Rinkeby test net? 
那么部署到 Rinkeby 测试网上需要做哪些事呢？

10886
10:55:51,470 --> 10:55:53,900
Well, let's jump into our hard hat config first. 
让我们先转到 "hardhat.config"

10887
10:55:53,900 --> 10:55:57,140
And let's clean this up, we don't really need this accounts task, 
并且清除掉这些内容，我们并不需要这个 "accounts" task

10888
10:55:57,140 --> 10:56:00,410
so I'm just going to delete it, 
所以我们要把它删掉

10889
10:56:00,410 --> 10:56:03,710
I don't really need this comment. So I'm going to delete this too. 
我也不需要这个注释了，所以也要删掉

10890
10:56:03,710 --> 10:56:06,470
And let's jump into the network section, 
现在让我们进入 "network" 部分

10891
10:56:06,470 --> 10:56:09,560
we're not going to be working with ropsten. So we're gonna go ahead and dump that. 
我们不会使用 "ropsten"，所以我们扔掉它

10892
10:56:09,560 --> 10:56:13,370
We are however, going to be working with rink B, the URL is going to be that same Rinkeby RPC URL. 
但我们要使用 "Rinkeby"，"url" 还是一样的 `RINKEBY_RPC_URL`

10893
10:56:13,370 --> 10:56:18,410
So we're going to define that up here, like we did before. 
我们在这里定义它，就和之前的做法一样

10894
10:56:18,410 --> 10:56:21,950
And if you want to copy paste from your last project, feel free to do so 
你可以选择从上一个项目中直接复制粘贴过来

10895
10:56:21,950 --> 10:56:25,280
you can also follow along with me or fastforward me 
也可以选择跟着我或者快进

10896
10:56:25,280 --> 10:56:38,540
the counts is going to be the same. 
`accounts` 是相同的

10897
10:56:38,540 --> 10:56:41,360
I'm going to go ahead and just copy paste the gas reporter with what we had from before. 
我这里直接复制粘贴了之前使用过的 `gasReporter`

10898
10:56:41,360 --> 10:56:44,960
So we're going to add this 
所以我们要添加一句 

10899
10:56:44,960 --> 10:56:49,340
constant corn market cap API key equals process dot EMV dot corn market cap API key. 
`const COINMARKETCAP_API_KEY = process.env.COINMARKETCAP_API_KEY`

10900
10:56:49,340 --> 10:56:53,600
Do the same thing with the ether scan API key Licious add everything in here. Now. 
`ETHERSCAN_API_KEY` 也是一样的，添加到这里来

10901
10:56:53,600 --> 10:57:00,920
We have our ether scan section in here already, 
我们已经准备好了 `etherscan` 部分

10902
10:57:00,920 --> 10:57:04,160
we're gonna have our gas reporter be false, 
我们让 `gasReporter` 保持为 `false`

10903
10:57:04,160 --> 10:57:06,800
because I don't really feel like using it right now.
因为我现在用不到它

10904
10:57:07,070 --> 10:57:09,920
And then finally, we're going to add one more thing in here.
最后，我们还要再添加一个东西

10905
10:57:10,130 --> 10:57:12,830
Remember how in our last project, 
还记得我们在上一个项目中

10906
10:57:12,830 --> 10:57:16,100
before we actually verified we waited some block confirmations. 
在实际验证之前，我们等待了一些区块的确认

10907
10:57:16,100 --> 10:57:19,130
That way ether scan could make sure to catch up. 
这样 `etherscan` 就可以保证能跟上进度

10908
10:57:19,130 --> 10:57:22,910
Well, we can do the exact same thing in here 
这里，我们可以执行一些相同的操作

10909
10:57:22,910 --> 10:57:26,300
in our hard hat dot config, 
在我们的 "hardhat.config" 中

10910
10:57:26,570 --> 10:57:33,320
we can add a section for each test net for how many blocks we want to wait, 
我们可以为每个测试网添加一部分，告诉它我们想等待多少区块

10911
10:57:33,320 --> 10:57:36,920
I'm going to add block confirmations of six. 
我将添加为 `blockConfirmations: 6`

10912
10:57:37,130 --> 10:57:46,340
Now back on our deploy Funmi. 
现在，回到我们的 "deploy-fund-me" 

10913
10:57:47,180 --> 10:57:53,480
In a new section, I can add wait confirmations of network dot config. That block on for motions, or one 
在新的部分中，我可以添加 `waitConfirmations: network.config.blockConfirmations || 1`

10914
10:57:53,480 --> 10:57:57,110
is or one means if no block confirmations is given in our Hardhead dot config 
这个 `|| 1` 表示，如果在 "hardhat.config" 中没有指定 `blockConfirmations` 

10915
10:57:57,290 --> 10:57:59,960
will just wait for one block. 
我们就只等待一个区块

10916
10:57:59,960 --> 10:58:03,410
And again, the reason we want to wait for approximately six block confirmations 
再回顾一下，我们之所以要等待大约 6 个区块确认

10917
10:58:03,410 --> 10:58:07,490
is we want to give ether scan a chance to index our transaction. 
是因为我们想给 "etherscan" 一个索引我们交易的机会

10918
10:58:07,490 --> 10:58:11,240
And I added a chain ID 42 when it should be for my mistake. 
我把这里的 `chainId` 应该是 4 而不是 42，我的错

10919
10:58:11,420 --> 10:58:14,660
And of course, we're going to need our dot env file, where we add all of our stuff from the last session, 
当然，我们还需要 ".env" 文件，其中添加了上次会话的所有内容

10920
10:58:14,660 --> 10:58:18,650
the RIP ERP CRL private key ether scan API and then coin market cap API. 
有 "RINKEBY_RPC_URL" "PRIVATE_KEY" "ETHERSCAN_API(_KEY)" 以及 "COINMARKETCAP_API(_KEY)"

10921
10:58:18,650 --> 10:58:23,000
All right moment of truth. Let's try this out. 
好了，关键时刻到了，让我们来试一试

10922
10:58:23,000 --> 10:58:30,020
If we run yarn Hardhead deploy dash dash network Rinkeby. 
如果我们运行 `yarn hardhat deploy --network rinkeby`

10923
10:58:30,050 --> 10:58:34,040
It should not deploy any marks because we have this if statement in our mock deployment. 
它应该不会部署任何 "mocks"，因为我们在 "mock" 的部署中有这个 `if` 语句

10924
10:58:34,040 --> 10:58:39,050
But it should deploy our Funmi contract using the correct price feed address. 
但它应该会部署我们的 `FundMe` 合约并使用正确的喂价地址

10925
10:58:39,050 --> 10:58:43,250
And then it'll go ahead and verify it. 
接着它会对其进行验证

10926
10:58:43,250 --> 10:58:47,300
Since we're waiting for six block confirmations, 
由于我们等待了 6 个区块的确认

10927
10:58:47,300 --> 10:58:51,500
we can even be super secure by adding dash dash tags and just running the funding tag.  
所以我们甚至可以通过添加 `--tags` 来确保安全，只需要运行 `fundme` 标签

10928
10:58:51,500 --> 10:58:55,790
But we're just going to do yarn hearted deploy network Rigby. 
但这里我们只运行 `yarn hardhat deploy --network rinkeby`

10929
10:58:55,820 --> 10:58:59,930
And let's see what happens. 
让我们看看会发生什么

10930
10:58:59,930 --> 10:59:03,950
All right, and we're deploying funding. And we can see the transaction that we have for fun me, 
好的，我们正在部署 "FundMe"，并且可以看到我们拥有一个关于 "FundMe" 的交易

10931
10:59:03,950 --> 10:59:08,630
this is that logging feature, we have log is true for deploying Funmi. 
这就是日志功能，因为 `deploy("FundMe")` 这里的 `log` 为 `true`

10932
10:59:08,630 --> 10:59:12,860
So it gives us the transaction once it has a transaction, 
所以一旦有了交易它就会提供给我们这个交易

10933
10:59:12,860 --> 10:59:16,160
and it will give us the address once we have the address. 
一旦有了地址它也会将地址提供给我们

10934
10:59:16,160 --> 10:59:20,120
So we're going to wait six block confirmations for this transaction to finish going through. 
现在我们要等待 6 个区块确认以完成这笔交易

10935
10:59:20,120 --> 10:59:23,240
Now we see we've deployed this contract address with X amount of gas. 
现在我们已经看到了部署好的合约地址，它使用了这么多的 gas

10936
10:59:23,240 --> 10:59:27,230
And now we're running the verification process. 
现在我们正在运行验证过程

10937
10:59:27,260 --> 10:59:30,410
While the verification process is running, 
在验证过程正在运行的时候

10938
10:59:30,410 --> 10:59:35,630
we can pull up Rinkeby ether scan, 
我们可以打开 "rinkeby etherscan"

10939
10:59:35,630 --> 10:59:39,560
paste our address in here and see that we have indeed created this contract. 
把我们的地址粘贴到这里，可以看到我们确实已经创建了这个合约

10940
10:59:39,560 --> 10:59:42,620
And now it looks like we've successfully verified the contract on ether scan. 
看起来我们已经成功在 "etherscan" 上验证了我们的合约

10941
10:59:42,620 --> 10:59:46,760
So if we hit refresh, we can indeed see that the contract has been verified. Awesome. 
如果我们点击刷新，就可以看到合约确实已经被验证了，非常好

10942
10:59:46,790 --> 10:59:50,030
All right. So this is fantastic. 
太好了，非常棒

10943
10:59:50,030 --> 10:59:53,570
Our deploy script is looking great, 
我们的部署脚本看起来非常棒

10944
10:59:53,570 --> 10:59:57,110
we're able to deploy to a local chain, we're able to deploy to a test that 
现在我们能够部署到本地链，还可以部署到测试网络

10945
10:59:57,110 --> 11:00:00,050
and if we wanted to, we could deploy to any network that we wanted 
如果我们想的话，我们可以部署到任何我们想要的网络上

10946
11:00:00,050 --> 11:00:03,860
simply by updating our hard hat config, 
只需要更新我们的 "hardhat.config"

10947
11:00:03,890 --> 11:00:07,700
and then updating our helper config. 
然后更新我们的 "helper(-hardhat)-config"

10948
11:00:07,730 --> 11:00:13,610
This is fantastic. Great work so far. 
目前为止，干得漂亮