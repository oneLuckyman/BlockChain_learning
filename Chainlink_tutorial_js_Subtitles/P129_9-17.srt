14995
15:10:43,520 --> 15:10:50,780
Cool. We have that address here. Else if we're not on a local network, 
酷~ 我们这里已经有地址了 `else` 如果我们没有在本地网络上的话

14996
15:10:50,780 --> 15:10:54,290
the VRF v2 coordinator address is simply going to be derived from our network config. 
`vrfCoordinatorV2Address` 就是很简单的源于我们的 "networkConfig"

14997
15:10:54,290 --> 15:10:58,010
So let's import the network config as well from our helper Hardhead config 
所以让我们把 `networkConfig` 也从 "helper-hardhat-config" 中导入进来

14998
15:10:58,010 --> 15:11:01,640
and we'll say else VRF coordinator v2 address equals network config of our chain ID. 
并且执行 `else {vrfCoordinatorV2Address = networkConfig[chainId]}`

14999
15:11:01,640 --> 15:11:06,530
Let's which actually sorry, we do need the chain ID 
不好意思，我们还没有创建 "chainId" 

15000
15:11:07,160 --> 15:11:11,390
cons chain ID equals network dot config dot chain ID, 
`const chainId = network.config.chainId`

15001
15:11:11,390 --> 15:11:16,310
chain ID of VR coordinator V to 
我们需要的是 "vrfCoordinatorV2" 的 "chainId"

15002
15:11:16,850 --> 15:11:23,390
chain ID. You're a coordinator v2. 
`[chainId]["vrfCoordinatorV2"]`

15003
15:11:23,420 --> 15:11:27,200
Alright, perfect. We've got the setup to work with our VRF coordinator v2 address. 
非常完美，我们已经配置好了涉及 `vrfCoordinatorV2Address` 的部分

15004
15:11:27,200 --> 15:11:29,990
What else do we need from our raffle?
我们还需要为我们的 "Raffle" 做点什么呢？

15005
15:11:30,110 --> 15:11:33,020
Well, we need an entrance fee, 
嗯，我们还需要一个 "entranceFee" 

15006
15:11:33,020 --> 15:11:35,690
we probably want to change the entrance fee depending on what chain we're on, 
我们希望根据我们所在链的不同而改变 "entranceFee"

15007
15:11:35,690 --> 15:11:38,270
we're on a more expensive chain, we might want to make this higher than others.
如果我们位于一条比较贵的链上，那我们可能就希望这个数值比较大

15008
15:11:38,540 --> 15:11:41,990
So let's go ahead back to our helper Hardhead config and make an entrance fee based off of the blockchain, 
所以让我们回到 "helper-hardhat-config" 并创建一个基于区块链的 "entranceFee"

15009
15:11:42,020 --> 15:11:47,210
so for NP, maybe we want to make it 0.01 eath. 
对于 Rinkeby 我们可能想设置为 0.01 以太

15010
15:11:47,210 --> 15:11:52,040
So we could say ethers dot utils, parse ether of 0.01. 
所以我们执行 `ethers.utils.parseEther("0.01")`

15011
15:11:52,400 --> 15:11:58,640
And once again, thank you VS code for automatically dropping that in for me. 
再一次，感谢 VS Code 帮我自动添加了这些

15012
15:11:58,640 --> 15:12:01,070
And we're also going to want an entrance fee for our heart app, 
我们同样需要给我们的 hardhat 也提供一个 "entranceFee"

15013
15:12:01,070 --> 15:12:03,800
we can also set a default in here, but let's just be a little more explicit. 
我们也可以将其设置为默认，不过我们还是让它更明确一些吧

15014
15:12:03,800 --> 15:12:07,190
So we'll say 31337. The name of this is Art app, 
所以我们写下 `31337: {name: "hardhat"}`

15015
15:12:07,190 --> 15:12:12,350
we don't need to give it a veneer of coordinator v2 address 
我们并不需要为其提供 "vrfCoordinatorV2Address"

15016
15:12:12,350 --> 15:12:14,720
because we're going to deploy a mock. 
因为我们要为其部署一个 "mock"

15017
15:12:14,720 --> 15:12:17,540
But we do want an entrance fee.
但我们希望给它一个 "entranceFee"

15018
15:12:17,600 --> 15:12:20,360
And let's just give it the exact same entrance fee here. 
让我们给他一个完全相同的 "entranceFee" 吧

15019
15:12:20,360 --> 15:12:24,890
So we'll say ethers dot utils dot parse ether 0.01 E. 
也就是 `ethers.utils.parseEther("0.01")`

15020
15:12:24,890 --> 15:12:30,350
Alright, great. So on our deploy here, we can just say const entrance fee equals network config. Chain ID of entrance fee. 
好的，现在在我们的部署脚本这里，我们可以执行 `const entranceFee = networkConfig[chainId][entranceFee]`

15021
15:12:31,220 --> 15:12:39,140
Let's start populating our arcs here. 
让我们开始填充这里的 "args"

15022
15:12:39,140 --> 15:12:42,290
So the first one is going to be your Fe two coordinator address. Next one is going to be our entrance fee. 
第一个是你的 `vrfCoordinatorV2Address`，下一个是我们的 `entranceFee`

15023
15:12:42,290 --> 15:12:44,930
Got it? Got it. Now we need our gas lane. 
懂了吧？应该都懂了，现在来处理我们的 "gasLane" 

15024
15:12:44,930 --> 15:12:49,820
On Rigby and other networks, there are different gas lanes that we can choose from, 
在 Rinkeby 或是其它网络上，它们都有不同的 "gasLane" 供我们选择

15025
15:12:49,820 --> 15:12:52,100
let's grab the only gas Lane from Rinckey, the 30, gray key hash, 
让我们获取 Rinkeby 上唯一的 "gasLane"，"30 gwei Key Hash"

15026
15:12:52,100 --> 15:12:55,970
let's drop this, of course into our network config as gasoline, pop it in here, 
获取它，并将其放入我们的 "networkConfig"，就放在这里 `gasLane` 

15027
15:12:56,060 --> 15:13:00,050
we're hard hat, our mock actually doesn't care what gas line we're working on, 
至于 hardhat，我们的 "mock" 实际上并不在乎我们用的是什么 "gasLane" 

15028
15:13:00,110 --> 15:13:03,230
because we're going to be mocking the gasoline anyways. 
因为无论是什么 gasLane 最终都是它模拟的

15029
15:13:03,230 --> 15:13:05,600
So we can just say gas lane, we can just go ahead and use the same one 
所以我们可以直接写 `gasLane` 并使用和上面相同的一个

15030
15:13:05,600 --> 15:13:07,850
or really anything here, it doesn't really matter. 
或者是任何一个，这并不重要

15031
15:13:07,850 --> 15:13:10,910
Now here we'll say const, gasoline equals network config. Chain ID, gasoline, 
现在我们可以写 `const gasLane = networkConfig[chainId]["gasLane"]`

15032
15:13:10,940 --> 15:13:13,610
and we'll grab the gas lane. And we'll stick it into our argument array, 
获取 "gasLane" 并把它粘贴进我们的 "args" 数组

15033
15:13:13,610 --> 15:13:16,880
we've got this one, we've got this one, we've got this one. 
我们搞定了这个，而且搞定了这个，还搞定了这个

15034
15:13:18,260 --> 15:13:23,810
Now it's time for the subscription ID. 
现在轮到 "subscriptionId" 了

15035
15:13:23,810 --> 15:13:26,540
Now if you haven't run through docstoc chain link for the chain link VRF, 
如果你还没有通过 "docs.chain.link" 运行过 "Chainlink VRF"

15036
15:13:26,540 --> 15:13:28,970
I highly recommend you do so so that you can understand what this subscription ID is 
那我强烈推荐你去试一下，这样你才能理解 "subscriptionID" 是什么

15037
15:13:28,970 --> 15:13:32,150
we know that we can actually make a subscription ID using that front end using that website VRF dot chain dot link, 
我们知道，我们可以使用前端网址 "vrf.chain.link" 来创建一个 "subscriptionId"

15038
15:13:32,150 --> 15:13:35,510
which is great and all but what if we're on all local chains, 
这很好，但如果我们是在本地链上呢？

15039
15:13:35,510 --> 15:13:38,630
we can get a subscription ID no problem in here. 
我们可以毫无障碍的从这里获取到 "subscriptionId"

15040
15:13:38,630 --> 15:13:41,570
But it's a little bit harder on a local network. 
但在本地网络上这就有点难了

15041
15:13:41,570 --> 15:13:45,440
Now I'm actually going to teach you how to create and fund subscription it is completely programmatically. 
现在我会教你如何完全程序化地创建和资助一个订阅

15042
15:13:45,440 --> 15:13:48,800
So you don't even need to use the UI if you don't want to. 
这样的话，如果你不想，甚至可以不使用 UI 

15043
15:13:48,800 --> 15:13:52,100
However, for the purpose of this course, we're still going to use the user interface, 
然而，为了达到这门课的目的，我们仍然会使用用户界面

15044
15:13:52,100 --> 15:13:55,160
we're still going to use that website for us to get our own subscription IDs. 
仍然会使用网站来获取我们的 "subscriptionId"

15045
15:13:55,160 --> 15:13:57,770
But you could 100% automate the process of creating a subscription ID and funding a subscription ID. 
但你完全可以自动化创建和资助 "subscriptionId" 的过程

15046
15:13:57,770 --> 15:14:00,920
Because when you create and fund subscription IDs, 
因为当你创建和资助 "subscriptionId" 时

15047
15:14:00,920 --> 15:14:03,170
you're just calling create subscription and fund subscription on that smart contract. 
你只是调用智能合约上的创建订阅和资助订阅罢了

15048
15:14:03,170 --> 15:14:05,060
So on our development chain, we have our V RF coordinator v2 Mock, 
在开发链上，我们有这个 "vrfCoordinatorV2Mock"

15049
15:14:05,060 --> 15:14:08,360
and what we're going to do and on our development chain, we're going to create that subscription. 
接下来我们要做的是，在开发链上创建订阅

15050
15:14:08,360 --> 15:14:11,780
So we're gonna say const, transaction, response equals await VRF coordinator v2 Mock dot create sub scription. 
我们要这么写 `const transactionResponse = await vrfCoordinatorV2Mock.createSubscription()`

15051
15:14:11,780 --> 15:14:14,870
And then we'll run const transaction receipt equals weight trends action response, dot Wait, 
然后运行 `const transactionReceipt = await transactionResponse.wait()` 

15052
15:14:14,870 --> 15:14:17,690
wait one block confirmation. 
等待一个区块确认

15053
15:14:17,690 --> 15:14:20,540
And inside this transaction receipt, there's actually an event that's emitted 
在这个 "transactionReceipt" 的内部，实际上有一个事件

15054
15:14:20,540 --> 15:14:23,690
with our subscription that we can get 
它会被我们获取的订阅触发

15055
15:14:23,690 --> 15:14:26,450
this is another place where emitting events is incredibly helpful. 
这是另一处证明事件触发很有用的地方

15056
15:14:26,450 --> 15:14:29,090
So in fact, if we open back up a Vera v2 coordinator mark, and we look for create subscription, 
事实上，如果我们回去打开 "VRFCoordinatorV2Mock" 检索 "createSubscription"

15057
15:14:29,090 --> 15:14:33,650
we see we emit subscription created with the subscription ID, 
就会看到 "emit SubscriptionCreated()" 参数就是 "subscriptionId"

15058
15:14:33,680 --> 15:14:42,290
we can actually get this event emitted from our transaction receipt. 
我们可以从 "transactionReceipt" 中获取到这个被触发的 "event"

15059
15:14:42,290 --> 15:14:48,560
Now to assign it, let's go ahead and create a sub subscription ID up here. 
现在来分配一下，在这里创建一个 `subscriptionId`

15060
15:14:48,590 --> 15:14:54,080
And then we'll say subscription ID equals transaction receipt that events of zero dot args dot sub ID. 
然后下面是 `subscriptionId = transactionReceipt.events[0].args.subId`

15061
15:14:54,110 --> 15:14:57,770
And again, be sure to watch that events video 
再提醒一下，如果你想深入了解 "event" 是如何在 Hardhat 中生效的

15062
15:14:57,770 --> 15:15:00,860
if you want to learn more about how to work with events in hardware. 
那么一定要去看一下那个关于 "event" 的视频

15063
15:15:00,860 --> 15:15:04,670
Now that we have a subscription, we need to fund the subscription 
现在我们有了一个订阅，我们还需要资助这个订阅

15064
15:15:04,700 --> 15:15:08,270
on a real network, you'd need the link token to actually fund the subscription. 
在真实网络上，你还需要有 Link 代币才能真正资助这个订阅

15065
15:15:08,270 --> 15:15:13,250
The current iteration of the mock allows you to fund a subscription without the link token. 
当前的 "mock" 版本允许你在没有 Link 代币的情况下资助订阅

15066
15:15:13,310 --> 15:15:17,060
So what we can do is we can just run a wait your F corps inator Mark, 
所以我们要做的就是运行 `await vrfCoordinatorMock`

15067
15:15:17,090 --> 15:15:20,510
if coordinator B to Mach dot fund subscription, and we'll give it the subscription ID 
应该是 `vrfCoordinatorV2Mock.fundSubscription(subscriptionId)`

15068
15:15:20,510 --> 15:15:24,530
and we'll need to do some fundamental 
并提供相应的资助金额

15069
15:15:24,560 --> 15:15:30,590
this, we can just create some variable, 
我们可以创建一些变量

15070
15:15:31,190 --> 15:15:37,040
we'll say const VRF, subscription fund amount equals ethers dot utils, dot parse ether, of, we'll say 30 
`const VRF_SUB_FUND_AMOUNT = ethers.utils.parseEther("30")`

15071
15:15:37,040 --> 15:15:39,830
VRF subscription, fundament. We'll just paste that down here. 
"VRF_SUB_FUND_AMOUNT" 直接粘贴到下面这里

15072
15:15:39,830 --> 15:15:42,500
We could do this as well for a real test net or live networks. 
我们可以对实际的测试网络或真实网络做同样的操作

15073
15:15:42,500 --> 15:15:45,800
But just so that we become familiar with the user interface, we're not going to do a test net programmatically. 
但为了让我们熟悉用户界面，我们就不在测试网上进行程序化操作了

15074
15:15:45,800 --> 15:15:48,590
And for a test net, we're just going to use exactly what we've been doing so far. 
对测试网来说，我们要使用和之前完全相同的做法

15075
15:15:48,590 --> 15:15:51,350
Or we can put a subscription ID and our helper config. 
或者我们可以把 "subscriptionId" 放进我们的 "helper-config" 中

15076
15:15:51,350 --> 15:15:54,890
So we'll say subscription ID, we'll put something in here right now, 
所以我们写 `subscriptionId` 并在这里放上一些内容

15077
15:15:54,920 --> 15:16:01,700
we'll just leave it as zero. But later on, when we actually create a subscription, we'll update our subscription ID. 
目前我们设置为 0，但等我们创建完订阅之后，就会把它更新为我们的 "subscriptionId"

15078
15:16:02,120 --> 15:16:07,280
And so we'll say subscription ID equals network config. Change ID of subscription ID. 
接着我们写 `subscriptionId = networkConfig[chainId]["subscriptionId"]`

15079
15:16:07,280 --> 15:16:09,950
Perfect. 
完美!

15080
15:16:09,950 --> 15:16:15,680
Now we can add this to our arguments array. 
现在我们可以把它添加进我们的 "args" 数组

15081
15:16:15,710 --> 15:16:22,100
What else do we need
我们还需要些什么？

15082
15:16:22,130 --> 15:16:26,480
subscription ID, we need a callback gas limit 
"subscriptionId" 下面是 "callbackGasLimit"

15083
15:16:26,480 --> 15:16:29,840
or callback, gas limit is going to vary network to network. 
"callbackGasLimit" 会随着网络的变化而变化

15084
15:16:29,840 --> 15:16:32,510
So once again, we're gonna go into our helper configure callback gas limit. 
所以再一次回到我们的 "helper-config" 写下 `callbackGasLimit`

15085
15:16:32,510 --> 15:16:35,630
And for us, we'll set a pretty high limit of 500,000 gas. 
我们要设置一个比较大的限制，500,000 gas 

15086
15:16:35,630 --> 15:16:37,880
So we'll say call a gas limit of 5.123 500,000. Gas. 
所以我们说 `callbackGasLimit: "500000"` 也就是 500,000 gas 

15087
15:16:37,880 --> 15:16:40,430
And for hard hat, we'll do the same thing. 
对 hardhat 来说，我们要做的事情相同

15088
15:16:40,430 --> 15:16:44,870
So we can say const, callback, gas limit equals network config, chain ID, callback, gas limit, 
现在我们就可以写 `const callbackGasLimit = networkConfig[chainId]["callbackGasLimit"]`

15089
15:16:44,870 --> 15:16:47,240
grab this, put it into our argument array. 
获取它，并且放到我们的 "args" 数组中

15090
15:16:47,240 --> 15:16:50,060
What else do we need? All we need now is the interval. 
我们还需要些什么？现在轮到 "interval" 了

15091
15:16:50,060 --> 15:16:55,040
So we can change this network to network as well. 
我们同样可以让它随着网络的变化而变化

15092
15:16:55,610 --> 15:17:04,670
Rigby will say, interval will ever just be 30 seconds for both hard hat and for Rigby. 
对 Rinkeby 来说 `interval`，然后直接把 Rinkeby 和 hardhat 都设置为 `30` 秒

15093
15:17:04,670 --> 15:17:09,230
So we'll do the same thing here. 
接下来要做的事情还是一样

15094
15:17:09,230 --> 15:17:12,500
Say const. Interval equals network config. Chain ID, interval, 
`const intercal = networkConfig[chainId]["interval"]`

15095
15:17:12,500 --> 15:17:15,380
and we'll grab this, pop it in the end of our array. 
然后我们获取它，并把它放进我们数组的末尾处

15096
15:17:15,380 --> 15:17:18,710
All right, awesome. 
干得好，非常好

15097
15:17:18,740 --> 15:17:23,480
Now we have an argument array and drop it right in here 
现在我们有了参数数组，并且把它放进了这里

15098
15:17:23,480 --> 15:17:29,450
and perfect. Everything in our constructor for our raffle contract. 
完美，这就是我们 "Raffle" 合约的构造函数所需要的一切

15099
15:17:29,450 --> 15:17:32,570
Great. This is looking fantastic. 
很好，看起来好极了

15100
15:17:32,870 --> 15:17:38,480
We've got wait confirmations we got logging arguments Deployer. 
我们有了 "waitConfirmations" 还有 "log, args, deployer"

15101
15:17:39,860 --> 15:17:44,120
Okay, well, what next? 
好的，下一个是什么？

15102
15:17:44,510 --> 15:17:47,870
Well, let's go ahead and add that verification piece. 
嗯，让我们继续，添加验证环节

15103
15:17:47,870 --> 15:17:51,500
So once again, create a new folder utils, new file verify.js. 
再次新建文件夹 `utils`，新建文件 `verify.js`

15104
15:17:51,770 --> 15:17:56,060
We can either copy paste this from our last project, 
我们可以直接从上一个项目中复制粘贴

15105
15:17:56,060 --> 15:17:59,120
or we can grab this from the GitHub repo associated with this course, 
或是从课程关联的 GitHub 仓库中获取

15106
15:17:59,150 --> 15:18:07,910
once we have our verify script in here, 
一旦有了验证脚本之后

15107
15:18:07,910 --> 15:18:12,110
we're going to import it by saying const. Verify equals require dot dot slash helper Hardhead config. 
我们就把它导入进来 `const { verify } = require("../helper-hardhat-config")`

15108
15:18:12,140 --> 15:18:15,230
And then we can add that same bit of code down here to verify our contract, 
然后我们可以在下面添加相同的代码来验证我们的合约

15109
15:18:15,230 --> 15:18:18,200
we'll say if we're not on a development chain. 
我们写 `if()` 如果我们不在开发链上

15110
15:18:18,200 --> 15:18:21,440
And we have process studying v dot ether scan API key, 
并且我们还拥有 `process.env.ETHERSCAN_API_KEY` 的话

15111
15:18:21,440 --> 15:18:25,430
then we're going to log verifying dot dot 
就执行 `log("Verifying...")`

15112
15:18:25,460 --> 15:18:29,330
and then await verify raffle dot address and the arcs. 
然后是 `await verify(raffle.address, args)`

15113
15:18:29,630 --> 15:18:34,310
Now we'll just do a log of a whole bunch of hyphens say that this script is done 
再执行 `log()` 里面是一堆连字符，表明这个脚本已经完成了

15114
15:18:34,790 --> 15:18:38,060
module dot exports dot tags equals say this will be all and raffle. 
`module.exports.tags = ["all", "raffle"]`

15115
15:18:38,060 --> 15:18:41,180
All right, so let's test this out. 
好的，让我们来测试一下它

15116
15:18:41,180 --> 15:18:43,940
We'll do hardhat deploy, or yarn, hard hat deploy
我们执行 `hh deploy` 或是 `yarn hardhat deploy`

15117
15:18:43,940 --> 15:18:51,230
and see if this script works correctly. 
看一下这个脚本是否能正确运行

15118
15:18:51,230 --> 15:18:57,140
Looks like we ran into an error network config not defined. 
看起来我们运行出了一个错误 "netwrokConfig is not defined"
（“netwrokConfig 未被定义”） 

15119
15:18:57,140 --> 15:19:00,950
So let's spell this right. Network config. 
让我们把它拼对 `networkConfig`

15120
15:19:00,980 --> 15:19:11,810
There we go. And that looks much better. Let's try this again. 
好的，这样看起来好多了，再试一次

15121
15:19:11,810 --> 15:19:16,400
It looks like our deploy scripts are working well. 
看起来我们的部署脚本运行良好

15122
15:19:16,430 --> 15:19:22,490
local networks protected, deploying mocks
"Local network detected! Deploying mocks..."
（检测到本地网络！正在部署 mocks）

15123
15:19:22,490 --> 15:19:26,090
deployed VRF coordinator v2 Mock 
'deploying "VRFCoordinatorV2Mock"'
（正在部署 "VRFCoordinatorV2Mock"）

15124
15:19:26,150 --> 15:19:31,070
mocks deployed 
"Mocks Deployed"
（Mocks 部署完成）

15125
15:19:31,100 --> 15:19:36,200
and then we went ahead and deployed our raffle. 
接着我们继续部署完了我们的 "Raffle"

15126
15:19:36,200 --> 15:19:41,450
Awesome, this is massive. 
太棒了，简直是巨大的进展