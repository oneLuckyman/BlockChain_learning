8927
08:51:13,960 --> 08:51:19,720
Alright, great. So we've deployed to rink be using hard hat. This is fantastic. 
很好，我们已经用 Hardhat 把合约部署到了 Rinkeby 上，真是太棒了

8928
08:51:19,750 --> 08:51:22,540
Now something that we notice, once again is oof, 
现在我们会注意到，又一次，哦

8929
08:51:22,540 --> 08:51:26,740
our contract isn't verified? 
我们的合约没有被验证

8930
08:51:26,740 --> 08:51:29,890
Do we have to go back through and do this verify and publish and all that stuff again? 
我们需要回去重新验证，发布以及执行其他相关操作么？

8931
08:51:29,890 --> 08:51:33,490
Luckily for us, we actually don't need to do that. 
幸运的是，我们不需要做这些

8932
08:51:33,490 --> 08:51:36,790
So what can we do? 
那我们要做的是什么？

8933
08:51:36,790 --> 08:51:40,030
Well, back in our deploy script, we can add some code to automatically verify right after we deploy. 
回到部署脚本，我们可以添加一些代码以使合约在部署后可以立即自动验证

8934
08:51:40,030 --> 08:51:43,510
So let's go ahead and do that. 
让我们来试着做一下

8935
08:51:43,510 --> 08:51:47,050
Right below our main function, we're gonna create a new function called verify,
在我们的 main 函数下面，我们将创建一个新函数，名为 "verify"

8936
08:51:47,200 --> 08:51:52,810
we're gonna say async function, verify. 
我们要输入 "async function verify"

8937
08:51:52,810 --> 08:51:55,390
And we're gonna have this function get past some arguments, 
并且我们要让这个函数接收一些参数

8938
08:51:55,390 --> 08:52:00,580
we're gonna have to get past a contract, address, and some arguments or the contract. 
我们要提供 "contractAddress" 以及合约所需要的一些参数

8939
08:52:00,580 --> 08:52:02,740
Since our simple storage doesn't have a constructor, 
因为我们的 "SimpleStorage" 没有构造函数

8940
08:52:02,740 --> 08:52:05,860
the arguments for simple storage are just gonna be blank. 
所以提供给 "SimpleStorage" 的参数为空

8941
08:52:05,860 --> 08:52:09,070
But in the future, when we have contracts that do have constructors, 
但是在将来，当我们拥有具有构造函数的合约时

8942
08:52:09,070 --> 08:52:12,670
the arguments are going to be populated. 
这个参数就不再是空的了

8943
08:52:12,670 --> 08:52:15,100
And when we get there, you'll see what I mean, 
到那时你就明白我的意思了

8944
08:52:15,100 --> 08:52:17,740
we need at least the contract address, and we're going to add some code in here 
我们至少要提供 "contractAddress"，并且还要在这里添加一些代码，

8945
08:52:18,040 --> 08:52:20,770
to automatically verify our contracts after they've been deployed. 
才可以在部署完成后自动验证我们的合约

8946
08:52:20,770 --> 08:52:25,840
This auto verification process works on block explorers like ether scan, 
这个自动验证过程适用于像 etherscan 这样的区块链浏览器

8947
08:52:25,870 --> 08:52:28,720
it might not work on block explorers like eath, pler, or other block explorers. 
但可能无法在 "ethplorer" 或其它区块链浏览器上工作

8948
08:52:28,750 --> 08:52:31,480
But if you want to verify on these other block explorers, 
如果你想要在其它区块链浏览器上进行验证

8949
08:52:31,480 --> 08:52:33,790
I'm sure they have an API to allow you to do that as well. 
我相信它们也会有自己相应的 API 供你使用

8950
08:52:33,790 --> 08:52:37,150
Now, ether scan in most other block explorers have a section on their website  
现如今 etherscan 和其它大多数区块链浏览器在它们的网站上都有一个

8951
08:52:37,150 --> 08:52:41,680
called API documentation, or something to do with API's. 
名为 API 文档("API Documentation") 或是其它与 API 有关的部分

8952
08:52:41,710 --> 08:52:45,610
These are ways for us to programmatically interact with ether scan, and do stuff with them. 
它们是我们通过编程与 etherscan 进行交互和操作的方式

8953
08:52:45,640 --> 08:52:48,790
One of the main things that we can do 
其中一件我们要做的主要的事情就是

8954
08:52:48,790 --> 08:52:51,550
is we can actually verify our contracts through this API. 
通过这些 API 验证我们的合约

8955
08:52:51,550 --> 08:52:56,800
Ether scan even has a tutorial in here 
etherscan 甚至还提供了一个教程

8956
08:52:56,830 --> 08:52:59,500
called verifying contracts programmatically. 
就叫做“程序化验证合约”("Verifying Contracts Programmatically")

8957
08:52:59,500 --> 08:53:01,780
And the link to this will be in the GitHub repo, 
这个网页的链接会放到 GitHub 仓库里

8958
08:53:01,780 --> 08:53:04,720
they have an API endpoint that we can make some requests to 
他们有一个 API 端点可以让我们向其发送请求

8959
08:53:04,720 --> 08:53:08,860
to go ahead and verify our contracts. 
以验证我们的合约

8960
08:53:08,860 --> 08:53:11,980
Now, we could absolutely make the raw API calls and follow the tutorial here. 
现在我们完全可以按着教程进行原始的 API 调用 

8961
08:53:11,980 --> 08:53:14,980
But there's actually an easier way than even going through this tutorial here. 
但实际上有一种甚至是比这个教程更简单的方式

8962
08:53:14,980 --> 08:53:17,800
Hardhead is an extensible framework, 
Hardhat 是一个可扩展框架

8963
08:53:17,800 --> 08:53:21,430
meaning you can add something called plugins to it.
这意味着你可以向其中添加一些被称为插件的东西

8964
08:53:21,670 --> 08:53:24,670
There's even an advanced section in the documentation called Building plugins. 
文档中会有一个被称为“构建插件”("Building plugins")的高级部分

8965
08:53:24,670 --> 08:53:27,910
If we scroll down to the bottom, 
如果我们往下拉到底部

8966
08:53:27,910 --> 08:53:31,030
we can see some popular plugins that the nomic labs team or the Hardhead team has created. 
可以看到一些颇受欢迎的插件，它们是 nomiclabs 或 Hardhat 团队创建的

8967
08:53:31,030 --> 08:53:34,240
And also a number of community plugins as well. 
同时还有一些社区插件

8968
08:53:34,240 --> 08:53:36,760
One of the most used Hardhead plugins is going to be this hard hat ether scan plugin 
其中一个使用最广泛的 Hardhat 插件是这个 "hardhat-etherscan"

8969
08:53:36,760 --> 08:53:40,420
that makes this verification process much, much easier. 
它能使验证过程变得非常非常简单

8970
08:53:40,420 --> 08:53:44,350
Install it, you can just run 
要想安装它，你只需要运行 

8971
08:53:44,350 --> 08:53:48,130
npm install bash, just save dev at nomic labs harden ether scan,
"npm install --save-dev @nomiclabs/hardhat-etherscan"

8972
08:53:48,400 --> 08:53:51,250
and then add it to our hard hat dot config. 
然后把它添加到我们的 "hardhat.config.js" 里就行了

8973
08:53:51,250 --> 08:53:54,670
Since we're using yarn, we're just going to go ahead and use yarn. 
由于我们使用的是 yarn 所以我们将使用 yarn 来完成这件事

8974
08:53:54,670 --> 08:54:00,970
So back in our code, we'll do yarn, add dash dash Dev, at nomic, labs, slash hard hat slash hyphen, ether scan. 
回到我们的代码，运行 "yarn add --dev @nomiclabs/hardhat-etherscan"

8975
08:54:02,350 --> 08:54:08,620
Now that we have this plugin, 
现在我们有了这个插件

8976
08:54:08,620 --> 08:54:12,460
we can go to our hard hat dot config, scroll to the top and add this plugin 
就可以到 "hardhat.config" 里，拉到顶部添加这个插件了

8977
08:54:12,460 --> 08:54:22,270
do require at nomic labs slash hard hat, ether scan. 
输入 "require(@nomiclabs/hardhat-etherscan)"

8978
08:54:22,270 --> 08:54:26,560
Now that we have this plugin, 
现在我们就拥有这个插件了

8979
08:54:26,560 --> 08:54:29,890
the hard hat documentation has some more information about the usage, 
Hardhat 文档中有更多“使用”("Usage")信息

8980
08:54:29,890 --> 08:54:33,460
how to actually use this plugin, and how to run different commands with it. 
包括如何使用这些插件以及如何运行各种不同的命令

8981
08:54:33,460 --> 08:54:36,490
In order for us to use this verification, 
为了能使用这个东西进行验证

8982
08:54:36,490 --> 08:54:40,660
we actually need an API key from ether scan. 
我们还需要从 etherscan 获取一个 "API key"

8983
08:54:40,780 --> 08:54:44,320
This is basically a password for allowing us to use the ether scan API. 
基本上它就是一个允许我们使用 etherscan API 的密码

8984
08:54:44,320 --> 08:54:47,500
So we're going to come to ether scan. 
所以我们要来到 etherscan

8985
08:54:47,500 --> 08:54:50,050
And we're going to go ahead and sign in. 
接着继续选择“登录”(Sign In)

8986
08:54:51,820 --> 08:54:54,280
And actually we're going to click to sign up and create an account. 
实际上，我们要做的是“点击以注册”("Click to sign up")并创建一个账号

8987
08:54:54,280 --> 08:54:57,190
And we'll go ahead and create an account. 
接着点击“创建一个账号”("Create an Account")

8988
08:54:57,490 --> 08:55:00,190
We'll go ahead and verify our registration by clicking the verification link. And we'll click the Login. 
接着点击验证链接以验证我们的注册，然后点击“登录”("Click to Login")

8989
08:55:00,190 --> 08:55:03,760
Now that we're logged in. On the left hand side, we can scroll down to API keys. 
现在我们就已经登录好了，把左侧往下拉，拉到 "API Keys"

8990
08:55:03,760 --> 08:55:09,370
And we can go ahead and create a new API key. 
我们就可以来创建一个新的 "API key" 了，

8991
08:55:09,400 --> 08:55:12,400
We call this H H hyphen sec, which stands for hardhat Free Code Camp. 
我们把它叫做 "HH-FCC" 表示 "Hardhat Free Code Camp"

8992
08:55:12,400 --> 08:55:16,120
Great, this new API key will copy this and we'll go back to our code and we'll add this somewhere 
复制这个新创建的 "API key"，并回到我们的代码中添加到某个地方

8993
08:55:16,120 --> 08:55:18,970
since the API keys basically considered a password. 
由于这个 "API key" 基本上就可以认为是一个密码

8994
08:55:18,970 --> 08:55:21,700
Where do you think we should add this? That's right in our dot env. 
所以你认为我们应该添加到哪里去呢？没错，就是我们的 ".env"

8995
08:55:21,700 --> 08:55:25,990
So in our dot env, we're going to add a new entry called ether scan API key. 
来到我们的 ".env" 添加一个新的条目名为 "ETHERSCAN_API_KEY"

8996
08:55:25,990 --> 08:55:31,480
And we're going to add that API key that we just got. 
并把我们刚刚获得 "API key" 添加到这里

8997
08:55:31,480 --> 08:55:34,870
Now that we have our API key, 
现在我们就拥有了 "API key"

8998
08:55:34,870 --> 08:55:38,410
back in our Hardhead, config, we're going to create a new section in a module dot exports, 
回到我们的 "hardhat.config"，我们将在 "module.exports" 中创建一个新的部分

8999
08:55:38,410 --> 08:55:42,520
tell hardhat that we have this ether scan API key,
以告诉 Hardhat 我们拥有的这个 etherscan "API key"

9000
08:55:42,910 --> 08:55:44,770
or new section is going to be called ether scan.
这个新部分的名字是 "etherscan"

9001
08:55:46,390 --> 08:55:50,350
And in here, we're gonna say API key is going to be ether scan API key 
这里我们要写 "apikey"，它是 "ETHERSCAN_API_KEY"

9002
08:55:50,980 --> 08:55:55,870
that we're going to define up here the same way we define these other keys. 
现在我们要在这里定义它就像定义其它密钥一样

9003
08:55:55,870 --> 08:55:59,680
So we'll say const, ether scan API key equals process dot e NV dot ether scan API key. 
我们输入 "const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY"

9004
08:55:59,680 --> 08:56:05,950
And if something like this pops up, you can generally just hit enter,
如果弹出了这样的东西，通常你可以直接按回车

9005
08:56:05,950 --> 08:56:08,530
and it will autocomplete it for you, which is awesome. 
这样它就会自动为你补全，非常爽

9006
08:56:08,560 --> 08:56:12,130
Great. So now we have an ether scan API key 
很好，现在我们已经有了 etherscan "API key"

9007
08:56:12,130 --> 08:56:14,980
back in the heart had documentation, it tells us by adding this, 
回到 Hardhat 文档，它告诉我们只要添加这个

9008
08:56:14,980 --> 08:56:18,010
we actually get a new task called verify. 
就可以执行一种名为 "verify" 的新 task

9009
08:56:18,010 --> 08:56:22,840
Let's try that out. So open our terminal back up. 
嗯，让我们来试试看吧，打开我们的终端

9010
08:56:22,840 --> 08:56:27,880
And we'll do yarn, RT hat. Let's see what pops up. 
运行 "yarn hardhat"，看看会出来些什么

9011
08:56:27,880 --> 08:56:32,110
Wow, we did get a new verification here. 
哇，我们真的可以执行这个 "verify" 了

9012
08:56:32,140 --> 08:56:35,590
When we run yarn hard hat harder, it actually looks into our hard hat.config.js and checks for any plugins. 
当我们运行 "yarn hardhat" 的时候，它会去检查 "hardhat.config.js" 中的所有插件

9013
08:56:35,590 --> 08:56:38,980
If there are new plugins there, 
如果里面有新的插件存在

9014
08:56:38,980 --> 08:56:42,850
it'll add them as a new task that we can do. 
它就会将其作为新的 task 添加进来以便我们能够使用

9015
08:56:42,850 --> 08:56:46,630
You can manually verify your contract by doing yarn or MPX Harnett verify dash dash network, 
你可以手动验证你的合约，方法是运行 "yarn" 或 "npx hardhat verify --network"

9016
08:56:46,660 --> 08:56:50,230
the deployed contract address and any constructor arguments yourself. 
后面是已部署合约的地址以及任何你需要的构造函数参数

9017
08:56:50,230 --> 08:56:53,890
But we want to be a little bit more programmatic than this. 
但我们想让这个过程更加程序化

9018
08:56:53,890 --> 08:56:56,440
So what we're going to do 
所以我们要做的是

9019
08:56:56,440 --> 08:56:58,600
is we're going to go back and create this verification function, 
返回去继续创建这个验证函数

9020
08:56:58,630 --> 08:57:01,570
it is good to know how to do it via command line 
不过知道如何通过命令行执行验证还是很好的

9021
08:57:01,570 --> 08:57:03,670
so that if you want to verify something in the future, manually, you can, 
这样你将来想手动进行验证的时候就知道怎么做了

9022
08:57:03,670 --> 08:57:07,420
let's build this verify function though. 
让我们现在开始构建这个 "verify" 函数

9023
08:57:07,420 --> 08:57:10,120
So we're going to take the our contract address and some arguments. 
它需要获取我们的合约地址以及一些其它参数

9024
08:57:10,120 --> 08:57:13,090
And for our sake, we're going to do console dot log verifying contract that that 
接着我们输入 "console.log("Verifying contract...")"

9025
08:57:13,660 --> 08:57:18,970
just so that we know we might have to wait for a little bit. 
这只是为了让我们知道可能需要在这里等候一会儿

9026
08:57:18,970 --> 08:57:22,090
And in our code, we can actually run any task from hard hat using a run package. 
在我们的代码中，我们可以使用 "run" 包来运行 Hardhat 中的所有 task

9027
08:57:22,090 --> 08:57:28,210
So up at the top, we're actually going to import run from hard hat as well 
所以在代码顶部，我们需要从 "hardhat" 中一并导入 "run"

9028
08:57:28,210 --> 08:57:32,410
run allows us to run any hard hat task. 
"run" 允许我们运行所有的 Hardhat task

9029
08:57:32,410 --> 08:57:37,690
So in our code here, we're going to do a wait to run. And then we can do there it thought. 
所以在我们的代码这里，执行 "await run()"，接着是 "verify"

9030
08:57:37,690 --> 08:57:42,940
Now part of that allows you to add different parameters as well in this run. 
Hardhat 允许你在 "run" 中添加不同的参数

9031
08:57:43,090 --> 08:57:46,810
And it's usually best that you go ahead and add them in here 
最好是在此处就添加上

9032
08:57:46,810 --> 08:57:49,420
so that we're really specific with what we're doing. 
这样我们才能明确我们现在做什么

9033
08:57:49,420 --> 08:57:52,750
If we do yarn hardhat verify dash dash help,
如果我们运行 "yarn hardhat verify --help"

9034
08:57:52,750 --> 08:57:57,970
we can see what parameters we can actually pass. 
就能看到我们可以传递哪些参数

9035
08:57:58,120 --> 08:58:01,060
Well, it looks like we can pass the Verify parameter. 
看起来我们可以传递 "verify" 参数

9036
08:58:01,060 --> 08:58:04,330
So we'll do colon, verify. 
所以我们要写上 ":verify"

9037
08:58:04,540 --> 08:58:08,800
If you go to the actual GitHub for the verification tasks, 
如果你去查看 verify task 的 GitHub 页面

9038
08:58:08,800 --> 08:58:11,200
you can actually see you can do more than just verify, 
就会发现你不止可以进行 "verify" 操作

9039
08:58:11,200 --> 08:58:14,290
you can do verify, get minimum build,
还可以执行 "verify:get-minimum-build"

9040
08:58:14,500 --> 08:58:17,770
verify, get constructor arguments, 
"verify:get-constructor-arguments"

9041
08:58:17,770 --> 08:58:19,720
verify, verify, which is what we're going to be working with, 
"verify:verify"，这正是我们要使用的功能

9042
08:58:19,720 --> 08:58:23,050
and a couple of other subtasks as well. 
以及一些其它的子 task

9043
08:58:23,050 --> 08:58:26,110
The second parameter that goes inside run is going to be a list of actual parameters. 
第二个传入 "run" 的参数将是一个实际参数的列表

9044
08:58:26,140 --> 08:58:28,720
This second parameter here is just kind of the sub task, if you will, of our verify task. 
如果你愿意的话，这里的第二个参数可以说成是 "verify" task的一个子 task

9045
08:58:28,720 --> 08:58:32,500
And this is going to be an object that contains the actual parameters. 
并且它会是一个包含实际参数的对象

9046
08:58:32,500 --> 08:58:34,990
And this is where we pass in an address, 
这里我们传入一个 "address"

9047
08:58:34,990 --> 08:58:40,480
which is going to be our contract address, 
即我们的 "contractAddress"

9048
08:58:40,480 --> 08:58:47,770
and then our construct or arguments, which is going to be arcs. 
接着是我们的 "constructorArguments" 即 "args"

9049
08:58:47,770 --> 08:58:52,330
Now normally just this right here should be enough for us to go ahead and use this verify contract in our main function, 
通常情况下，这些东西就足够我们在 main 函数中使用这个合约验证了

9050
08:58:52,330 --> 08:58:55,540
but we're going to add one additional thing to it.
但我们还要额外添加一个东西

9051
08:58:55,540 --> 08:58:58,330
Because in practice, sometimes there's some errors that can come up. 
因为在实践中，有时会出现一些错误

9052
08:58:58,330 --> 08:59:00,940
One of the errors that often comes up when running a wait 
其中一个经常会遇到的错误是，在运行 "await" 的时候

9053
08:59:00,940 --> 08:59:03,250
is that the contract has already been verified. 
合约已经被验证过了

9054
08:59:03,250 --> 08:59:05,770
而且你很可能经常会遇到这个问题

9055
08:59:05,920 --> 08:59:08,740
because ether scan will get smart enough 
因为 etherscan 足够智能

9056
08:59:08,740 --> 08:59:11,680
by seeing enough bytecode that is exactly simple storage 
它已经看到过足够多形如 SimpleStorage 的字节码

9057
08:59:11,680 --> 08:59:14,350
that it will start to just automatically verify any bytecode that looks like simple storage. 
因此它会自动验证任何看起来像是 SimpleStorage 的字节码

9058
08:59:14,350 --> 08:59:17,470
And then this await will throw an error, which we want to avoid. 
这时 "await" 就会抛出一个错误，这正是我们想要避免的

9059
08:59:17,470 --> 08:59:21,070
So what we can do is we can add a try catch onto this await. 
我们可以做的是在 await 这里添加一个 "try catch"

9060
08:59:21,070 --> 08:59:27,340
So outside of the way, we're going to add a try. 
所以在 await 外面，我们要添加一个 try

9061
08:59:27,340 --> 08:59:30,550
And we're going to add these little brackets that wrap around our weight. 
还要添上这些括号包住我们的 await

9062
08:59:30,550 --> 08:59:34,540
And then we're going to put a catch. 
接着在这里放一个 "catch(e)"

9063
08:59:34,540 --> 08:59:40,270
This is known as a try, catch and solidity also has tried catches. 
这就是所谓的 "try catch"，Solidity 也有 "try catch"

9064
08:59:40,270 --> 08:59:44,380
But basically, this e is going to be any error that this section throws. 
基本上来说，这个 "e" 指的就是这部分抛出的任何错误

9065
08:59:44,380 --> 08:59:47,620
So we're going to do is we're going to say if this message is already verified, 
所以我们要做的就是，如果这段消息已经被验证过了

9066
08:59:47,620 --> 08:59:51,160
then we're just going to continue. 
那么就继续运行其余的代码

9067
08:59:51,160 --> 08:59:53,920
So we're gonna say if e.message.to lowercase, 
所以就是 "if (e.message.toLowerCase())"

9068
08:59:53,950 --> 09:00:00,460
we're going to make sure it's to lowercase 
这里要确保它变成全小写的

9069
09:00:00,460 --> 09:00:06,850
that includes already there. If five, 
".includes("already verified")"

9070
09:00:06,850 --> 09:00:10,450
then we're just going to console dot log already verified like that. 
接着是 "console.log("Already Verified!")"

9071
09:00:11,500 --> 09:00:16,810
Otherwise, we're just going to console dot log e. 
否则，我们要运行 "console.log(e)"

9072
09:00:16,810 --> 09:00:20,650
The reason we do This is because of this errors, our verification function will break, 
之所以要这么做是因为这个错误会导致我们的验证过程中断

9073
09:00:20,650 --> 09:00:23,110
and our whole script will end. 
并且我们的整个脚本都会终止运行

9074
09:00:23,110 --> 09:00:25,690
And we don't want our whole script to end, 
我们当然不希望整个脚本就此终止

9075
09:00:25,690 --> 09:00:28,480
we want our script to keep continuing if the verification doesn't work, because it's not really a big deal. 
我们想要的是即便验证过程中断，脚本也要继续运行，因为这并不是什么大问题

9076
09:00:28,480 --> 09:00:30,940
So I know this might seem like a lot of code, 
我知道这一段代码确实显得有些多

9077
09:00:30,940 --> 09:00:34,450
feel free to copy and paste it from the GitHub repo to just move along. 
所以你可以从 GitHub 仓库中复制粘贴这一段以继续前进

9078
09:00:34,450 --> 09:00:38,170
But awesome. So we now have a verify function using the Verify task in hardhat. 
很好，现在我们有了一个可以使用 Hardhat 进行 "verify" task 的 "verify" 函数

9079
09:00:38,200 --> 09:00:42,040
Let's go ahead and use this now in our main function, 
让我们继续，在 main 函数中实际使用一下它

9080
09:00:42,040 --> 09:00:45,730
right below our deploy, 
在我们的 "deploy()" 下方

9081
09:00:45,730 --> 09:00:48,490
we'll do console dot log deployed contract two, and then the contract address. 
我们运行了 "console.log('Deploy contract to: ')" 然后是合约地址

9082
09:00:48,490 --> 09:00:51,940
But before we call this main function, let's think for a quick second. 
但在我们调用这个 main 函数之前，让我们再次快速思考一下

9083
09:00:51,970 --> 09:00:57,580
What happens when we deploy to our RT Hat Network? 
在我们部署到 Hardhat 网络时到底发生了什么？

9084
09:00:57,580 --> 09:01:01,090
Well, remember, if we deploy to our Hard Hat Network, 
如果我们部署到的是 Hardhat 网络

9085
09:01:01,090 --> 09:01:04,480
will our contract need to be verified I need to scan?
那么我们的合约还需要 etherscan 的验证么

9086
09:01:04,720 --> 09:01:08,110
Well, we know there's a we know there's a rink ether scan, 
我们知道，有一个 "Rinkeby etherscan" 

9087
09:01:08,110 --> 09:01:10,450
we know there's a COVID ether scan, we know there's a main net easy scan. 
我们还知道除了这个 etherscan 还有主网络的 etherscan

9088
09:01:10,450 --> 09:01:14,680
But is there a Hardhead ether scan? No, of course not. Right? 
但是有 "Hardhat etherscan" 么？没有，当然没有了，对吧？

9089
09:01:14,740 --> 09:01:18,070
The hard at runtime environment is a network local to our machine. 
Hardhat 运行环境是一个位于我们本地机器上的网络

9090
09:01:18,070 --> 09:01:21,580
So it doesn't make sense for us to verify a hard hat network deployed contract on ether scan. 
因此对部署到 Hardhat 网络的合约进行 etherscan 验证是毫无意义的

9091
09:01:21,580 --> 09:01:24,880
So we actually don't want to call this verify function, 
所以我们并不打算实际调用这个 "verify" 函数

9092
09:01:24,880 --> 09:01:28,690
when we're working with our local network. 
在我们使用本地网络进行工作时

9093
09:01:28,690 --> 09:01:31,750
This is where these chain IDs are going to come in quite useful. 
这就是这些 "chainID" 的有用之处了

9094
09:01:31,750 --> 09:01:34,180
What we can do is we can check to see if the network that we're running on 
我们可以检查一下我们运行的网络

9095
09:01:34,180 --> 09:01:37,270
is a live network or it's a test net, or it's a network that actually can be verified, 
究竟是一个实时网络还是一个测试网络，或者说是一个可以验证的网络

9096
09:01:37,300 --> 09:01:40,120
we can actually get network configuration information by importing a network like this. 
我们可以通过导入一个 "network" 包来获取网络配置信息，就像这样

9097
09:01:40,120 --> 09:01:42,580
And we can do something like console dot log network dot config. 
然后我们就可以执行 "console.log(network.config)"

9098
09:01:42,580 --> 09:01:48,640
Now, if I run yarn, art, hit run scripts deploy.js. 
现在，如果我运行 "yarn hardhat run scripts/deploy.js"

9099
09:01:49,240 --> 09:01:56,260
On our Hard Hat Network, 
在我们的 Hardhat network 上

9100
09:01:56,260 --> 09:02:01,930
since I'm not passing a network flag, 
由于我没有传入任何网络标识

9101
09:02:01,930 --> 09:02:05,890
we get this massive output that looks like this. 
我们得到了这么一大堆输出，看起来就像这样

9102
09:02:05,890 --> 09:02:09,460
Our network dot config contains a ton of information about the current network that we're on, 
"network.config" 中包含了有关我们当前所在网络的大量信息

9103
09:02:09,490 --> 09:02:12,460
you'll see here that the chain ID of the Hardhead network is actually 31337 
这里可以看到 "Hardhat network" 的 "chainID" 是 31337

9104
09:02:12,460 --> 09:02:15,310
gas price, which gets set to auto
gasPrice 被设置为了 "auto"

9105
09:02:15,310 --> 09:02:20,080
block gas limit the current fork of Aetherium that we're working with, 
"blockGasLimit" 还有当前我们所使用的以太坊分支

9106
09:02:20,440 --> 09:02:23,770
and all these other pieces here. 
以及其它所有有关的信息

9107
09:02:23,770 --> 09:02:27,490
This chain ID is really important. 
这个 "chainID" 真的非常重要

9108
09:02:27,490 --> 09:02:30,880
Because we can use this chain ID to figure out
因为我们可以用这个 "chainID" 来确定

9109
09:02:31,000 --> 09:02:33,700
which one is a test net, or which one is a live network. 
哪一个是测试网络，哪一个是实时网络

9110
09:02:33,700 --> 09:02:36,550
And remember, running the script is going to be the same as doing dash dash network, hard hat,
并且记住，运行这个脚本等同于执行 "--network hardhat"

9111
09:02:36,580 --> 09:02:39,310
you'll see our channel ID is still 31337. 
可以看到我们的 "chainID" 仍然是 31337

9112
09:02:40,720 --> 09:02:44,530
Again, that's because the default network in our heart had config, it's hard hat, 
这是因为 "hardhat.config" 中的 "defaultNetwork" 仍然是 "hardhat"

9113
09:02:44,530 --> 09:02:47,800
which is the same as saying every single time we run a script, 
这就是说每次我们运行这个脚本的时候

9114
09:02:47,800 --> 09:02:51,190
we're secretly running it with dash dash network hard hat. 
都相当于在后台使用了一次 "--network hardhat"

9115
09:02:51,190 --> 09:02:54,190
So now we only want to verify on our test net. 
现在我们只想在测试网络上进行验证

9116
09:02:54,190 --> 09:02:57,730
So what we can do 
可以这样做

9117
09:02:57,730 --> 09:03:02,110
is we can say if network dot config, that chain ID equals equals equals four, 
"if (network.config.chainID === 4)"

9118
09:03:02,110 --> 09:03:07,570
which is going to be rank B, ad.
它表示 Rinkeby

9119
09:03:08,320 --> 09:03:12,040
And a JavaScript equals equals equals is nearly the same as equals equals, 
在 JavaScript 中 "==="  和 "==" 几乎相同

9120
09:03:12,040 --> 09:03:15,910
except no type conversion is done, 
唯一的区别是它不进行类型转换

9121
09:03:15,910 --> 09:03:21,820
which just means in JavaScript, four equals four, and four equals equals the string of four, 
这意味着在 JavaScript 中 “4 == 4” 和 “4 == "4"”

9122
09:03:21,820 --> 09:03:26,110
but four, but if you were to use four equals equals equals four, this is false. 
但如果你用的是 “4 === "4"” 这个输出的是 false

9123
09:03:26,110 --> 09:03:30,910
This is true 
这个是 true

9124
09:03:30,910 --> 09:03:34,990
equals equals four equals equals would be true, four equals equals to the string of four would also be true, 
“== 4” 是 true，“4 == "4"” 也是 true

9125
09:03:34,990 --> 09:03:38,050
but four equals equals equals to the string of four is going to be false. 
但 “4 === "4"” 则是 false

9126
09:03:38,110 --> 09:03:41,200
So you can kind of do whatever you want here 
你可以在这里采取你想用的方式

9127
09:03:41,200 --> 09:03:43,540
equals equals or equals equals equals. 
"==" 或是 "===" 都可以

9128
09:03:43,540 --> 09:03:46,870
So we want to say if the network dot config dot Trinity is four, 
所以我们做的就是，如果 "network.config.chainID" 是 4

9129
09:03:46,870 --> 09:03:52,030
so if we're on Rinkeby, 
即，如果我们是在 Rinkeby 上

9130
09:03:52,030 --> 09:03:57,100
then we can go ahead and actually verify. 
那么，我们就进行验证

9131
09:03:57,130 --> 09:04:01,570
But we also want to make sure we only verify if our ether scan API key exists. 
但我们还要确保只有当我们的 "ETHERSCAN_API_KEY" 存在的情况下才进行验证

9132
09:04:01,570 --> 09:04:05,890
So we can also in here is site and this double ampersand means and 
所以我们可以在这里添加一个“与”判断，这个 "&&" 的意思就是“(逻辑)与”

9133
09:04:05,920 --> 09:04:12,670
we can say process dot e NV dot ether scan API key. 
我们要写的是 "process.env.ETHERSCAN_API_KEY" 

9134
09:04:12,670 --> 09:04:15,040
This is some Boolean tricks that we're doing here, basically, 
这里我们使用了一些布尔值运算技巧

9135
09:04:15,070 --> 09:04:18,190
so our first conditional we're saying if network dot config chinati equals equals equals four, 
我们的第一个条件是判断 "network.config.chainID === 4"

9136
09:04:18,310 --> 09:04:22,000
this section can be true or false, obviously, right? 
这一段可以是真也可以是假，很明显，对吧？

9137
09:04:22,030 --> 09:04:25,060
The chain ID that we're running on can be the hardest network, 
我们现在是在 "Hardhat network" 上运行的

9138
09:04:25,060 --> 09:04:28,660
which would mean this doesn't equal four, 
这意味着 "chainID" 不等于 4

9139
09:04:28,660 --> 09:04:31,360
or it would be Rinckey, which means this does equal four. 
如果我们是在 Rinkeby 上的话，它就等于 4 了

9140
09:04:31,390 --> 09:04:34,120
But there's no conditional on this side. So how does this side work? 
但这一边并不是一个条件，那么它是如何工作的呢？

9141
09:04:34,120 --> 09:04:37,360
In JavaScript, if an object exists, 
在 JavaScript 中，如果一个对象存在

9142
09:04:37,360 --> 09:04:41,380
and you try to cast it as a Boolean, it will be converted to true. 
并且你要试图把它转换为布尔值，那么它就会被转换为 true

9143
09:04:41,380 --> 09:04:44,320
If it doesn't exist, it will be converted to false. 
如果它不存在，就会被转换为 false

9144
09:04:44,320 --> 09:04:49,690
So in JavaScript, basically, if either scan API key exists, 
所以在 JavaScript 中，如果 "ETHERSCAN_API_KEY" 存在

9145
09:04:49,690 --> 09:04:53,680
if we have this in our data in VI, this will be true. 
即，我们在 ".env" 中有这个值的话，它就是 true

9146
09:04:53,680 --> 09:04:57,130
And if not, this will be false. 
如果没有，它就是 false

9147
09:04:57,190 --> 09:05:01,480
So another way to read this line here is saying 
因此这一行的的另一种理解方式就是

9148
09:05:01,960 --> 09:05:07,150
if network dot config that Trinity is for AKA, if we're on rink B, 
如果 "network.config.chainID" 是 4，也就是说如果我们是在 Rinkeby 上

9149
09:05:07,180 --> 09:05:09,790
and our ether scan API key exists, then do some stuff. 
并且 "ETHERSCAN_API_KEY" 也存在，则执行以下操作

9150
09:05:09,790 --> 09:05:15,910
And that's what we're going to do here. 
这就是我们正在做的事情

9151
09:05:15,970 --> 09:05:20,170
So in here, we'd want to run verify, or verify function 
这里面，我们要运行 "verify()" 或者说 "verify" 函数

9152
09:05:20,170 --> 09:05:23,350
and pass it the contract address which is going to be Simple Storage dot address and the constructor arguments 
并传入合约地址，就是 "SimpleStorage.address" 以及构造函数参数

9153
09:05:23,350 --> 09:05:27,370
which we know are going to be blank. 
不过我们知道它是空白的

9154
09:05:27,370 --> 09:05:31,120
And since our verify function is an async function, and it deals with promises and stuff, 
由于我们的 "verify" 函数是一个异步函数，并且涉及 Promise 等内容

9155
09:05:31,510 --> 09:05:34,810
we want to add the await keyword here. 
所以我们要在这里添上 await 关键字

9156
09:05:34,810 --> 09:05:38,740
Awesome. So we've added a way to actually verify our contract. But we're not quite done. 
太好了，我们已经添加了一个验证合约的方法，但到此可并没完呢

9157
09:05:38,740 --> 09:05:42,430
See on ether scan and all these block explorers the instant we deploy the contract and the instant we send the contract, 
在 etherscan 和所有的区块浏览器上，当我们部署并发送合约的时候

9158
09:05:42,430 --> 09:05:46,210
ether scan might not know about the transaction yet, 
etherscan 可能还并不知道有这个交易

9159
09:05:46,210 --> 09:05:50,260
it might take a hot second for ether scan to be up to speed with where the blockchain is.  
etherscan 可能还需要一小段时间才能跟上区块链的变化

9160
09:05:50,260 --> 09:05:53,020
So it's usually best practice to wait for a few blocks to be mined, until you actually run your verification process. 
所以实践中最好是先等几个区块被挖出来，然后再进行你的验证操作

9161
09:05:53,020 --> 09:05:57,220
We've actually learned how to do this already with the deploy transaction. 
我们实际上已经在部署交易时学过怎么实现这个操作了

9162
09:05:57,220 --> 09:06:00,280
So before we actually verify 
所以在我们进行验证之前

9163
09:06:00,280 --> 09:06:04,000
we run, we want to run a weight, simple storage. Deploy transaction Wait, six. 
我们要运行 "await SimpleStorage.deployTransaction.wait(6)"

9164
09:06:04,000 --> 09:06:09,640
So we will wait six blocks, 
所以我们将等待六个区块

9165
09:06:10,900 --> 09:06:19,180
and then we'll run our verification process. 
随后再执行我们的验证过程

9166
09:06:19,180 --> 09:06:22,360
Now, if you want to go and test this out right now, you absolutely can. 
现在，如果你想要立即测试一下的话，也可以

9167
09:06:22,360 --> 09:06:25,450
I'm going to keep going, though, 
但我会先接着往下走

9168
09:06:25,450 --> 09:06:28,480
because again, testing all these on a test net takes a little bit of extra time. 
还是因为，在测试网上测试这些东西，实在是比较费时间

9169
09:06:28,480 --> 09:06:31,840
So I'm going to finish the rest of our main function, 
所以我要先完成 main 函数的剩余部分

9170
09:06:31,840 --> 09:06:34,120
and then I'm going to run everything all together. 
然后再一并运行它们