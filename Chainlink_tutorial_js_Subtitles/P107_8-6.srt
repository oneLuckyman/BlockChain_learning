12970
13:07:56,800 --> 13:08:03,040
and great. Let's go back to continuing our font function.
很好，让我们回来继续编写我们的 "fund" 函数

12971
13:08:03,280 --> 13:08:09,820
So we'll say const provider equals new ethers dot providers dot web three provider, window dot Aetherium. 
`const provider = new ethers.providers.Web3Provider(window.ethereum)

12972
13:08:09,880 --> 13:08:14,500
Web three provider is an object in ethers that allows us to basically wrap around stuff like Metamask 
"Web3Provider" 是一个 ethers 中的对象，它允许我们附在类似 MetaMask 这样的东西上

12973
13:08:14,500 --> 13:08:18,670
is web three provider is really similar to that JSON RPC provider, which we use before,
"Web3Provider" 与我们过去用的 "JsonRpcProvider" 十分类似

12974
13:08:18,670 --> 13:08:22,000
which is where we put in exactly that endpoint, our alchemy endpoint, 
也就是我们放入端点的地方，比如我们的 Alchemy 端点

12975
13:08:22,000 --> 13:08:25,900
or when we're working with Metamask. Here, 
或者是我们在使用 MetaMask 时

12976
13:08:25,930 --> 13:08:30,070
whatever endpoint that we have in our network section 
"Networks" 选项中的任意端点

12977
13:08:30,070 --> 13:08:33,220
is web three provider takes that HTTP endpoint 
这个 "Web3Provider" 接收 HTTP 端点

12978
13:08:33,220 --> 13:08:36,520
and automatically sticks it in ethers for us. 
并自动将其导入到 ethers 中

12979
13:08:36,520 --> 13:08:40,300
So this line of code basically looks at our Metamask and goes, 
所以这一行代码基本上就是在观察我们的 MetaMask 然后说

12980
13:08:40,300 --> 13:08:44,200
Ah, okay, I found the HTTP endpoint inside there, Metamask. 
啊，OK，我从 MetaMask 这里找到了 HTTP 端点

12981
13:08:44,200 --> 13:08:47,920
That's going to be what we're going to use as our provider here. 
我们就把它作为我们这里的 "provider" 

12982
13:08:47,920 --> 13:08:50,890
Since our provider is connected to our Metamask. Here, 
由于我们的 "provider" 是连接在我们这里的 MetaMask 上的

12983
13:08:50,890 --> 13:08:53,560
we can get a signer or we can get a wallet just by running 
所以我们可以通过运行以下代码来获取“签署者”("signer")或者钱包("wallet")

12984
13:08:53,560 --> 13:08:57,160
const signer equals provider, dot get signer, 
`const signer = provider.getSigner()`

12985
13:08:57,160 --> 13:09:04,750
this is going to return whichever wallet is connected from the provider, 
它会返回连接在这个 "provider" 上的钱包

12986
13:09:05,140 --> 13:09:09,670
which again, our provider is our Metamask. 
再次强调，我们的 "provider" 就是我们的 MetaMask

12987
13:09:09,670 --> 13:09:13,150
So if we're connected with with account one, 
所以，如果我们连接的是 "Account1"

12988
13:09:13,150 --> 13:09:17,770
it's going to return account one as the signer 
它就会返回 "Account1" 作为 "signer" 

12989
13:09:17,770 --> 13:09:20,530
connected with account two, it'll return account two, etc. 
连接的是 "Account2" 就会返回 "Account2"，以此类推

12990
13:09:20,530 --> 13:09:28,240
Now, I'm going to add console dot log signer here, 
现在我们在这里添加一句 `console.log(signer)`

12991
13:09:28,240 --> 13:09:31,810
and then flip to the front end now 
然后回到前端

12992
13:09:31,810 --> 13:09:34,360
and show you what happens when we hit the fund button. 
并且我们来看一下，点击 "Fund" 按钮会发生些什么

12993
13:09:34,360 --> 13:09:38,440
You can see in here we have our JSON RPC signer, 
我们可以看到，这里有我们的 "JsonRpcSigner"

12994
13:09:38,440 --> 13:09:42,010
the signer is going to be the account that we've connected to our front end. 
这个 "signer" 就是我们连接在前端上的账户

12995
13:09:42,040 --> 13:09:45,850
Now we have our provider, we have our signer.
现在我们有了 "provider" 还有了 "signer"

12996
13:09:45,880 --> 13:09:49,210
Now, we're going to need our contract by getting the API and the address. 
现在，我们要通过获取 ABI 和地址来得到我们的合约了

12997
13:09:49,210 --> 13:09:53,350
So we're gonna need to say const. Contract equals what? 
所以我们需要 `const contract = ""` 等于什么呢？

12998
13:09:53,680 --> 13:09:57,520
How are we going to get our contract? 
我们该怎么获取我们的合约呢？

12999
13:09:57,520 --> 13:10:01,840
Well, this is where we're going to need to know the ABI and the address of a working with 
嗯，这就是我们需要知道所用合约的 ABI 和地址的地方了

13000
13:10:01,840 --> 13:10:04,930
typically, what you'll see a lot of projects do
通常，你会看到很多项目会这么做

13001
13:10:04,960 --> 13:10:07,690
since once a contract is deployed, the addresses are going to change 
由于合约一旦被部署，地址就会发生改变

13002
13:10:07,690 --> 13:10:10,330
is they're going to have some type of constants file. 
所以他们会为此准备一些“常量文件”("constants file")

13003
13:10:10,330 --> 13:10:15,400
So they'll create a new file called constants, dot j s.
他们会创建一个新的文件，名为 "constants.js"

13004
13:10:17,500 --> 13:10:20,680
And in here, they'll add the addresses and any API's and anything like that 
他们会把地址和 ABI 之类的东西添加到这里来

13005
13:10:20,680 --> 13:10:25,240
for us to use in our fund piece here. 
以供我们在 "fund" 部分这里使用

13006
13:10:25,240 --> 13:10:27,670
Now, as we're developing, and as we're building, this, 
在我们进行开发和构建过程中

13007
13:10:27,670 --> 13:10:30,250
the backend and the front end team are gonna have to interact a little bit,
后端和前端团队需要有一定的互动

13008
13:10:30,280 --> 13:10:32,860
or if it's just you doing the full stack, 
或者，如果你是一个全栈开发者

13009
13:10:32,860 --> 13:10:36,070
you're gonna have to interact with their back end. 
你就需要自己与后端进行沟通

13010
13:10:36,070 --> 13:10:40,900
So this is why it's so important to have both your front end and your back end code nearby. 
所以，将前端和后端代码放在一起是非常重要的

13011
13:10:40,900 --> 13:10:45,280
So if we go back to our Hardhead, fund me project that we just made, 
现在回到我们刚刚构建的 "hardhat-fund-me" 的项目

13012
13:10:45,280 --> 13:10:49,630
we can find the ABI in here. 
我们可以在这里找到所需的 ABI

13013
13:10:49,630 --> 13:10:54,370
Once again, if we go to artifacts, go to contracts, we can go to fund me dot soul, fund me dot JSON,
再一次，我们来到 "artifacts - contracts - FundMe.sol - FundMe.json" 

13014
13:10:54,790 --> 13:10:58,660
we can find the ABI right here, 
我们就可以在这里找到 ABI 了

13015
13:10:58,660 --> 13:11:01,480
it's going to be this massive thing right here. 
这是一块儿庞大的内容

13016
13:11:01,480 --> 13:11:05,140
So you can go ahead, you can even copy this whole thing in this little non squiggly bracket and this little bracket here, 
你可以复制这里的全部内容，就是这个非波浪形括号的内部

13017
13:11:05,140 --> 13:11:09,040
we can copy that. And then we can come back to our constant.js. 
我们复制下来，然后回到我们的 "constants.js"

13018
13:11:09,040 --> 13:11:12,580
And we can just save it as variable, 
我们可以直接把它保存为一个变量

13019
13:11:12,670 --> 13:11:23,200
we'll say Export const, Avi, e equals and paste that in there. 
`export const abi = ` 然后粘贴到这里

13020
13:11:23,200 --> 13:11:26,920
And then back in our index dot j s, we can import it 
接着回到我们的 "index.js" 我们可以这样导入它

13021
13:11:28,509 --> 13:11:38,529
with import API from constants. Oops. 
`import {abi} from "./constants.js"

13022
13:11:38,559 --> 13:11:41,439
Okay, great. So we have the API. Well, what about the address, 
OK 很好，现在我们就有了 ABI，但地址怎么办呢？

13023
13:11:41,439 --> 13:11:44,289
since we're going to be running this locally, we want to get the contract address of this locally run contract, 
由于我们是本地运行，所以我们要获取本地运行的合约地址

13024
13:11:44,319 --> 13:11:48,039
we can do that a couple of ways. 
有这么几种方法可以使用

13025
13:11:48,039 --> 13:11:50,799
One way is you can just have two windows open 
其中一个方法是，你可以打开两个窗口

13026
13:11:50,829 --> 13:11:53,559
one with your front end code, one with your back end code, 
一个是你的前端代码，一个是你的后端代码

13027
13:11:53,559 --> 13:11:57,579
and the one with your back end code, you can run yarn, hard hat node, 
然后在你的后端代码这里，你可以运行 `yarn hardhat node`

13028
13:11:57,579 --> 13:12:01,839
which will spin up our blockchain node for us, and give us the address in here. 
它会为我们启动一个区块链节点，并给我们相应的地址

13029
13:12:01,839 --> 13:12:04,239
Or what we can do. And this will probably be a little bit easier
或者我们可以这样做，这种方法可能还会更简单一点

13030
13:12:04,329 --> 13:12:07,449
is in your window with your front end code and create a new terminal. 
在你的前端代码窗口中，创建一个新的终端

13031
13:12:07,449 --> 13:12:10,569
And now we'll have two terminals running. 
现在，我们就运行了两个终端

13032
13:12:10,599 --> 13:12:15,849
And then this second one, we're going to CD down CD dot dot, 
然后在第二个终端这里，我们返回上一层 `cd ..`

13033
13:12:16,329 --> 13:12:20,649
and then CD, hard hat on Me Free Code Camp. 
接着 `cd hardhat-fund-me-fcc` 

13034
13:12:20,649 --> 13:12:25,929
And in here, we're going to run yarn, art head node. 
我们在这里运行 `yarn hardhat node`

13035
13:12:25,929 --> 13:12:30,159
And this is going to spin up our local blockchain in this second terminal in here, 
这样就在第二个终端里启动了我们的本地区块链

13036
13:12:30,459 --> 13:12:34,029
where we have deploying fund me deploy that address, blah, blah, blah, right here. 
这里可以找到 "deploying "FundMe" 以及 "deployed at" 的地址 bla bla bla

13037
13:12:34,029 --> 13:12:37,869
And just a reminder, if I hit this x, it just hides the terminal. 
提醒一下，如果我点击这里的 X，它只会隐藏这里的终端

13038
13:12:37,869 --> 13:12:41,619
I can always pull it back up with terminal new terminal, 
我可以随时通过“终端-新建终端”("Terminal-New Terminal")来把它拉回来

13039
13:12:41,619 --> 13:12:45,639
and I can always hide it, 
也可以随时把它隐藏起来

13040
13:12:45,669 --> 13:12:48,399
but this is still running inside of my terminal. 
但是，我的终端内部仍然还在运行着

13041
13:12:48,399 --> 13:12:51,699
So I'm going to hide it. 
我要把它隐藏起来

13042
13:12:51,699 --> 13:12:59,439
And what I can do is I can come back over to our constants folder, and at the top, we can do export const contract address. equals, 
现在回到我们的 "constants" 文件，我可以在顶部执行 `export const contractAddress =`

13043
13:12:59,439 --> 13:13:04,059
we'll pull the terminal back up. And we'll go grab, where it says, pulling fund me deployed at right here. 
我们把终端拉回来，找到 "deploying "FundMe"" 还有 "deployed at"

13044
13:13:04,929 --> 13:13:08,709
We'll copy that address, 
复制这个地址

13045
13:13:08,709 --> 13:13:12,999
put some quotes, and we'll paste it in. 
写一对儿引号，然后把它粘贴进去

13046
13:13:12,999 --> 13:13:16,959
And now we're also exporting the contract address, 
现在我们就同时在导出合约地址了

13047
13:13:17,019 --> 13:13:22,749
then in our index.js will import the contract address with comma, contract address.
然后在我们的 "index.js" 里，我们要把合约地址导入进来 `, contractAddress`

13048
13:13:23,469 --> 13:13:28,149
And now we have both the ABI and the contract address. 
现在我们就同时拥有 ABI 以及合约地址了

13049
13:13:28,149 --> 13:13:33,249
So what we can do, we can say const contract equals new ethers dot contract of, 
所以我们就可以开始写 `const contract = new ethers.Contract()`

13050
13:13:33,249 --> 13:13:38,439
we'll pass the contract address, pass the API, and we'll pass it the signer. 
传入 `contractAddress` 和 `abi` 以及 `signer`

13051
13:13:38,679 --> 13:13:41,649
Now we have an ethers contract object 
现在我们就有了一个 "ethers.Contract" 对象

13052
13:13:41,649 --> 13:13:44,829
that's connected to our signer, and we have the contract address, and we have the contract abi, 
它连接到了我们的 "signer" 并且我们还有了合约的地址以及 ABI 

13053
13:13:44,829 --> 13:13:47,769
now that we have a contract object, we can go ahead and start making transactions
现在我们有了一个合约对象，就可以开始创建交易了

13054
13:13:47,769 --> 13:13:50,829
the exact same way we've made transactions before 
就和我们之前创建交易的方式完全一样

13055
13:13:51,009 --> 13:13:54,219
we can just run const transaction response equals a weight contract dot fund. 
我们可以直接运行 `const transactionResponse = await contract.fund()`

13056
13:13:54,219 --> 13:14:02,739
And then we'll pass a value of ethers dot utils dot parse, ether ether mount. 
接着我们传入 `{value: ethers.utils.parseEther(ethAmount)}

13057
13:14:02,799 --> 13:14:08,829
So this is going to be how we're going to go ahead and create our transaction. 
这就是我们创建交易的方式

13058
13:14:09,039 --> 13:14:14,619
And if you take this right now, and we go to our front, we give it a little refresh, 
如果你就保持现在这样，并且回到前端，刷新一下

13059
13:14:14,619 --> 13:14:18,219
make sure we're connected and we hit fund, 
确保已经连接上了，然后我们点击 "Fund"

13060
13:14:18,219 --> 13:14:21,159
we're gonna get this error value must be a string. 
我们收到了一个报错 "value" 必须是一个字符串("Error: value must be a string")

13061
13:14:21,159 --> 13:14:24,699
That's because at the mount right now is being passed in as nothing. 
这是由于 "ethAmount" 现在还没有被传入任何值

13062
13:14:24,699 --> 13:14:29,529
Now normally, we'll pass parameters directly to our functions. 
一般来说，我们会直接给我们的函数传入这一参数

13063
13:14:29,529 --> 13:14:33,219
But what we're going to do is for now is we're just going to hard code this. 
但目前，这里我们还是先用硬编码吧

13064
13:14:33,219 --> 13:14:36,669
So we'll say const. At the mount equals, we'll do like 77, or something 
所以我们写下 `const ethAmount =` 比如说 77 吧，都一样

13065
13:14:36,789 --> 13:14:39,309
we had fun. Now, what do you think's gonna happen? 
现在点击 "Fund" 你觉得会发生些什么？

13066
13:14:39,309 --> 13:14:43,629
Well, we get this other air, insufficient funds for intrinsic transaction cost, 
好吧，我们收到了另一个报错，“内在交易费用不足”("insufficient funds for intrinsic transaction cost")

13067
13:14:43,629 --> 13:14:47,379
or you might get some other error, 
或者你可能会遇到一些其它错误

13068
13:14:47,379 --> 13:14:51,669
but you're gonna get a weird error here. 
总之你一定会在这里遇到某个奇怪的报错

13069
13:14:51,699 --> 13:14:55,089
And that's because we're not actually connected to our local hard head node right now. 
这是因为我们此时还没有实际连接到我们的本地 Hardhat 节点

13070
13:14:55,089 --> 13:14:57,459
Well, if we look at our Metamask, 
如果我们查看一下我们的 MetaMask 

13071
13:14:57,459 --> 13:15:01,689
we're currently not connected to the right blockchain, 
我们目前没有连接到正确的区块链上

13072
13:15:01,689 --> 13:15:04,899
we're connected to rink B, or main net or whatever, 
我们连接的是 Rinkeby 或者主网络或者其它网络

13073
13:15:04,929 --> 13:15:08,409
we need to get connected to our local host. 
我们需要的是连接到我们的本地主机上

13074
13:15:08,409 --> 13:15:12,729
If you look in your networks, 
如果你查看一下你的 "Networks"

13075
13:15:12,729 --> 13:15:16,209
you'll actually have a local host object here already. 
实际上你已经有一个本地主机("Localhost")对象了

13076
13:15:16,209 --> 13:15:19,869
But let's just be super specific. 
但是让我们更具体一点

13077
13:15:19,869 --> 13:15:23,079
And we'll add a new network here, 
我们来添加一个新的网络

13078
13:15:23,079 --> 13:15:27,099
we're going to add something called our hard hat, local host. 
添加一个名为 "Hardhat-Localhost" 的网络

13079
13:15:27,099 --> 13:15:30,549
And we'll hit Add Network and we'll add Hardhead. Local host in here, 
我们点击“添加网络”("Add a network") 然后在这里添加 "Hardhat-Localhost"

13080
13:15:30,789 --> 13:15:35,379
the RPC URL, we can find from our node area, 
而 "RPC URL"，我们可以在 "node" 中找到

13081
13:15:35,379 --> 13:15:39,579
which we scroll to where our node is running, 
我们滑到还在运行的 "node" 这里

13082
13:15:39,579 --> 13:15:44,859
we can copy this URL and paste it into new RPC URL, 
复制这里的 URL 并粘贴到到这边的 "New RPC URL" 里

13083
13:15:44,859 --> 13:15:48,789
chain ID is going to be 31337 currency symbol is going to be go or ether. 
"Chain ID" 是 `31337`，"Currency Symbol" 是 "GO" 或者 "ETH"  

13084
13:15:48,789 --> 13:15:51,159
Even though this pop up says it might have a different currency symbol go, we're just going to put eath in here. 
尽管这里可能会弹出来说有不同的货币符号 "GO"，但我们这里还是填 "ETH"

13085
13:15:51,159 --> 13:15:54,429
And there is no block explorer, right? 
然后我们并没有区块浏览器，对吧？

13086
13:15:54,429 --> 13:15:57,249
Because this is a local blockchain, we're not going to have a block Explorer.
因为这是一个本地区块链，根本不可能区块浏览器

13087
13:15:57,309 --> 13:15:58,809
So we'll go ahead and hit Save.
我们继续，点击保存

13088
13:15:58,900 --> 13:16:01,870
And now we have an account here, which is great. 
现在我们在这就有了一个账户了，非常好

13089
13:16:01,870 --> 13:16:04,990
We're connected to our local blockchain. 
我们已经连接到本地区块链上了

13090
13:16:04,990 --> 13:16:08,590
And if we switch our meta mask, we can see we're on the local hard hat. 
如果我们切换到我们的 MetaMask，就可以看到我们已经位于本地 Hardhat 上了

13091
13:16:08,770 --> 13:16:13,390
And we are connected. Awesome. 
并且我们是已连接状态，棒极了

13092
13:16:13,390 --> 13:16:17,740
Let's refresh. Let's run fund one more time. 
让我们刷新一下，再运行一次 "Fund"

13093
13:16:17,740 --> 13:16:21,190
And we'll see a transaction does indeed pop up. This is great. 
我们会看到，确实会弹出一笔交易，太好了

13094
13:16:21,190 --> 13:16:24,880
But our account here doesn't have any money we have, we're broke, 
但是我们的账户里面没有钱，我们破产了！

13095
13:16:24,940 --> 13:16:29,230
we don't have any local Hardhead Aetherium. 
我们没有任何本地 Hardhat 以太币

13096
13:16:29,530 --> 13:16:33,640
So we're actually going to need to import one of our accounts from hard hat into our meta mask, which we can do 
所以我们需要从 Hardhat 中导入一个账户到我们的 MetaMask 里，确实是可以这样做的

13097
13:16:33,640 --> 13:16:36,940
so and you can actually do this for any account with a private key 
实际上对任何具有私钥的账户你都可以进行这样的操作

13098
13:16:36,940 --> 13:16:40,030
so hard that gives us these accounts. 
Hardhat 给我们提供了这些账户

13099
13:16:40,060 --> 13:16:42,910
And we're going to import the private key of Count zero into our meta mask. 
我们要导入 "Account #0" 的私钥到我们的 MetaMask 里

13100
13:16:42,910 --> 13:16:45,790
So we're going to copy the private key, we're going to come back to our front end, click on our meta mask,
所以我们复制这个私钥，回到我们的前端，点击 MetaMask

13101
13:16:46,090 --> 13:16:48,850
we're gonna hit this big button, we're gonna hit import account.
点击这个大按钮，点击“导入账户”("Import Account")

13102
13:16:49,270 --> 13:16:52,450
It's like type private key, 
“选择类型”("Select Type")是“私钥”("Private Key")

13103
13:16:52,450 --> 13:16:57,340
and we're gonna paste our private key here. 
然后把我们的私钥粘贴到这里

13104
13:16:57,340 --> 13:17:01,510
A quick note, if you choose json file, 
补充一句，如果你选择“JSON 文件”("JSON File")

13105
13:17:01,510 --> 13:17:05,830
remember how back in that ether section, we encrypted our key into a JSON file with a password, 
还记得在 ethers 那一节中，我们把私钥加密到了一个带有密码 JSON 文件中

13106
13:17:05,830 --> 13:17:08,770
you can actually import accounts with that JSON file with the password. 
你可以用这个带有密码的 JSON 文件来导入账户

13107
13:17:08,770 --> 13:17:11,650
So if you encrypt a key and you want to add it to meta mask, 
如果你加密了一个私钥，并且想把它添加到 MetaMask 的话

13108
13:17:11,650 --> 13:17:13,750
you can go ahead and add it in just like this. 
可以用这样的方式进行添加

13109
13:17:13,750 --> 13:17:16,180
But for now, we're going to use private key, 
但现在，我们打算直接使用私钥

13110
13:17:16,180 --> 13:17:21,100
we'll paste the private key in and we'll hit import. 
我们把私钥粘贴进去，然后点击“导入”("Import")

13111
13:17:21,130 --> 13:17:26,380
And we can see we now have an account, a new account and account three, 
可以看到，现在我们有了一个账户，一个新的账户 "Account3"

13112
13:17:26,650 --> 13:17:29,890
with a ton of eath from our local blockchain. 
它存有我们本地区块链上的大量以太币

13113
13:17:29,920 --> 13:17:33,370
So we'll refresh one more time, we'll go ahead and connect, we'll make sure that our account three is connected. 
我们再刷新一次，点击 "Connect" 确保我们的 "Account3" 已经连接上了

13114
13:17:33,370 --> 13:17:36,700
And if it's not, we'll go ahead and hit this Connect button. 
如果没有的话，就点击 "Connect" 按钮

13115
13:17:36,700 --> 13:17:39,760
So that now our account three is what's connected here. 
现在，我们的 "Account3" 就已经连接上了

13116
13:17:39,760 --> 13:17:43,720
And we'll go ahead and hit fund. 
我们继续，点击 "Fund" 

13117
13:17:43,720 --> 13:17:48,340
And we now see that we can fund this contract, 
现在我们看到，可以对合约进行资助了

13118
13:17:48,340 --> 13:17:50,230
we can go ahead and hit Confirm. 
我们继续，点击“确认”("Confirm")

13119
13:17:50,230 --> 13:17:52,450
And if we look and nothing's going to happen on our front end, 
如果我们查看一下，前端并没有任何事情发生

13120
13:17:52,450 --> 13:17:55,960
because we didn't tell our front end to do anything once we confirm, 
因为我们并没有告诉前端，确认后要做些什么

13121
13:17:55,990 --> 13:17:58,750
but if we go to our blockchain, we can see our fun function was called 
但如果前往我们的区块链，可以看到我们的 "fund" 函数已经被调用了

13122
13:17:58,750 --> 13:18:02,680
we've just made our first transaction on a blockchain from our own front end, 
我们刚刚在我们的前端上完成了我们在区块链上的第一笔交易

13123
13:18:02,710 --> 13:18:05,440
this is awesome, great work. 
真是太棒了，干得漂亮

13124
13:18:05,440 --> 13:18:07,720
But it's probably a little confusing to the user. If nothing happens here, 
但这可能会让用户有一些疑惑，如果这里什么都不发生的话

13125
13:18:07,720 --> 13:18:12,190
they're going to hit the fun function. And it's going to be like, Oh, okay, cool. What, what happens? 
他们点击了 "Fund" 函数，然后就会像这样：哦，OK，酷~，发生什么了么？

13126
13:18:12,190 --> 13:18:14,740
Now, we probably want to make it a little bit more obvious that something just happened. 
我们想让它对刚刚发生的事表现得尽量更明显一些

13127
13:18:14,740 --> 13:18:17,200
And one more thing I want to show you, you don't have to follow along here, 
还有一件事我要给你展示一下，这里你不用跟着做

13128
13:18:17,200 --> 13:18:20,590
if I hit fund, and then I hit reject,
如果我点击 "Fund"，然后点击“拒绝”("Reject")

13129
13:18:20,860 --> 13:18:23,470
it's gonna freak out on us and be like, 
就会突然吓到我们，就好像说

13130
13:18:23,470 --> 13:18:25,720
hey, like, you hit reject, I don't know what to do now. 
嘿，你点击了 "Reject"，我现在不知道该怎么办了

13131
13:18:25,720 --> 13:18:28,600
So we're going to make our code a little bit more robust by adding a try catch. 
所以我们要通过添加 "try-catch" 来让我们的代码更健壮一些

13132
13:18:28,600 --> 13:18:36,160
So we'll tell JavaScript to try running this transaction. 
我们会告诉 JavaScript `try` (“尝试”)运行这个交易

13133
13:18:36,160 --> 13:18:41,980
And then if it catches an error, just to console dot log, that error. 
然后如果 `catch` (“发现”)了一个报错，就运行 `console.log(error)`

13134
13:18:41,980 --> 13:18:46,330
So now, if I hit fund, and I hit reject, 
现在，如果我点击 "Fund"，然后点击 "Reject"

13135
13:18:46,330 --> 13:18:49,060
it's gonna, it'll still be a little bit mad, but at least we're catching it and it's not going to break and destroy everything. 
它仍然会有一些问题，但至少我们捕捉到了它，并且不会中断和破坏所有的一切

13136
13:18:49,060 --> 13:18:52,240
Okay, cool. We've got a transaction response here. 
OK，酷~ 我们在这里收到了 "transactionResponse"

13137
13:18:52,240 --> 13:18:55,840
And when we hit fund, our front end goes great. 
并且当我们点击 "Fund" 时，我们的前端一切正常

13138
13:18:55,840 --> 13:19:03,130
You've funded me I'm I'm super confused. 
你资助了我，但我十分困惑