16015
16:18:15,800 --> 16:18:22,940
Let's try our staging test out from start to finish.
让我们从头到尾地尝试一下我们的 "staging" 测试

16016
16:18:23,000 --> 16:18:27,350
So now in order for us to test this staging test, from end to end, 
现在，为了从头到尾地进行 "staging" 测试

16017
16:18:27,350 --> 16:18:30,440
you first going to need to get our sub ID for the channeling fear F 
首先你需要获取 "Chainlink VRF" 的 "SubId" 

16018
16:18:30,440 --> 16:18:32,600
then we're going to need to deploy our contract using the sub ID, 
接着我们再用这个 "SubId" 部署我们的合约

16019
16:18:32,600 --> 16:18:35,960
we're going to need to register the contract with chain link VRF. And it's somebody 
我们需要在 "Chainlink VRF" 上注册合约以及它的 "SubId" 

16020
16:18:35,960 --> 16:18:39,560
we're going to then need to register it with chain link keepers. And then of course, we're going to run the staging tests. 
然后我们需要注册 "Chainlink Keepers"，再然后当然就是运行 "staging" 测试了

16021
16:18:39,590 --> 16:18:42,260
So let's do it.
那么，让我们开始吧

16022
16:18:42,260 --> 16:18:45,140
So first thing we're going to need to do is what? 
首先我们需要做的是什么呢？

16023
16:18:45,350 --> 16:18:48,200
Get our sub ID for chain link VRF. Okay, great. 
获取 "Chainlink VRF" 的 "SubId"，好的

16024
16:18:48,200 --> 16:18:51,110
So we're going to come over to VRF dot chain dot link. 
我们来到 "vrf.chain.link" 

16025
16:18:51,110 --> 16:18:54,920
And we're going to need to create a new subscription. 
然后我们需要创建一个新的订阅

16026
16:18:54,920 --> 16:18:58,850
If we don't have enough rink B eath.
如果我们没有足够的 "Rinkeby ETH"

16027
16:18:58,940 --> 16:19:02,540
Let's we want to head over to the full blockchain solidity course, 
我们就前往 "full-blockchain-solidity-course"

16028
16:19:02,540 --> 16:19:05,030
here, we're going to scroll down. And we're going to look for the recommended test and here, which is ranked v. 
在这里，我们往下拉，找到我们在这里推荐的测试网，也就是 "Rinkeby" 

16029
16:19:05,030 --> 16:19:08,030
And we're going to use the faucets link to get some Rigby link, 
接着我们用 "faucets link" 来获取一些 "Rinkeby" 和 "Link"

16030
16:19:08,030 --> 16:19:11,120
run Fosses dot chain dot link, let's switch over from COVID to a cerium. Rigby, 
运行 "faucets.chain.link"，并且从 "Kovan" 切换到 "Ethereum Rinkeby"

16031
16:19:11,120 --> 16:19:15,410
we know we're going to need some link and some eath. So let's just go ahead and get both. 
我们既需要一些 "Link" 也需要一些 "ETH"，所以我们把它们都选上

16032
16:19:15,410 --> 16:19:18,890
Alright, great now that our transaction has gone through, 
很好，我们的交易已经通过了

16033
16:19:18,920 --> 16:19:23,900
let's just double check our wallet here. 
让我们再次检查一下我们的钱包

16034
16:19:23,900 --> 16:19:26,780
And it looks like we do indeed have Ethereum here. 
看来我们确实已经获得一些 "Ethereum" 了

16035
16:19:26,780 --> 16:19:30,230
And if you don't see the link, you can head over to link token contracts, 
如果你看不到 "Link"，就前往 "link token contracts"

16036
16:19:30,230 --> 16:19:33,140
Link token contracts in the chain link documentation. 
"LINK Token Contracts" 就在 "Chainlink" 的文档里

16037
16:19:33,140 --> 16:19:35,960
We'll scroll down to Rigby, we'll grab this contract address 
往下拉到 "Rinkeby"，获取这个合约的地址

16038
16:19:35,960 --> 16:19:39,140
import tokens and we'll paste it in here. 
点击 "import tokens"，并且把它粘贴到这里

16039
16:19:39,140 --> 16:19:43,730
Add Custom tokens, import tokens. Great. 
点击 "Add Custom Token" 以及 "Import Tokens"，很好

16040
16:19:43,730 --> 16:19:48,050
Now I can see my eath and my link here, perfect. 
现在我就可以看到我的 "ETH" 以及 "Link" 了，完美

16041
16:19:48,050 --> 16:19:51,440
We have some eath we have some link, 
现在我们有了一些 "ETH" 以及 "Link"

16042
16:19:51,560 --> 16:19:53,720
let's head over to V REF subscription management. And we're going to create a new subscription. 
让我们转到 "VRF" 的订阅管理，并创建一个新的订阅

16043
16:19:53,720 --> 16:19:56,420
Again, we could totally do this programmatically, 
再次强调，我们完全可以使用程序化的方式

16044
16:19:56,420 --> 16:19:58,550
because the user interface here is only helping us facilitate call contracts to the registration contract that's completely decentralized and on chain. 
因为用户界面只是帮助我们简化对链上去中心化合约的调用和注册

16045
16:19:58,550 --> 16:20:02,090
So let's go ahead and create subscription 
现在让我们继续，创建订阅

16046
16:20:02,090 --> 16:20:05,450
will create subscription will confirm the transaction and Metamask on the Rinkeby network 
我们点击 "Create subscription"，在 MetaMask 中确认交易，并且是在 "Rinkeby" 网络上

16047
16:20:05,450 --> 16:20:07,790
will do a little bit of wading in great once it's gone through, you can go ahead and click the add funds button. 
稍微等一下，很好，通过之后你就可以点击 "Add funds" 按钮继续了

16048
16:20:07,790 --> 16:20:10,850
I'm going to show you what it looks like if you accidentally refresh and jump off though. 
我会向你展示一下，如果你不小心刷新并跳了出来会怎么样

16049
16:20:10,850 --> 16:20:14,780
So if you refresh and you go back to veer off the chain dot link,
如果你点了刷新，就需要返回到 "vrf.chain.link" 

16050
16:20:14,780 --> 16:20:17,540
you should have a new active subscription. 
这时你应该会有一个新的活跃("Active")订阅

16051
16:20:17,540 --> 16:20:20,150
And you'll see this number here. If you click on it, this is your subscription ID great. 
如果你看一下这里的数字，点击一下，这其实就是你的 "subscriptionId"

16052
16:20:20,150 --> 16:20:23,360
So we can actually take this, come back to our code into our helper Hardhead config. 
这样我们就可以获取这个数字，回到我们的 "hepler-hardhat-config" 的代码中

16053
16:20:23,360 --> 16:20:26,690
And we can paste our subscription ID under subscription ID for our Rinkeby network here. Awesome. 
现在我们就可以把我们的 "subscriptionId" 粘贴到我们的 "rinkeby" 网络这里了，干得好

16054
16:20:26,840 --> 16:20:29,870
Now that we have a subscription we can see it's not funded with any link. 
现在我们在 "Subscription" 里看到，这里还没有注入任何 "LINK"

16055
16:20:29,870 --> 16:20:33,410
So we don't have any Oracle gas here. And we don't have any consumers. 
所以我们现在还没有预言机 "gas"，也没有任何 "consumers" 

16056
16:20:33,440 --> 16:20:38,120
Right our consumer is going to be a raffle or a lottery contract. 
对于我们来说，"consumers" 就是抽奖或者说彩票合约

16057
16:20:38,210 --> 16:20:41,900
So let's add some funds first and we don't need to add A whole lot because we're only going to be testing once. 
让我们先注入一些资金，我们不需要往里面加很多，因为我们打算只测试一次而已

16058
16:20:41,900 --> 16:20:45,830
So let's go just go ahead and add to link here, 
让我们继续，给它添加一些 "Link"

16059
16:20:45,860 --> 16:20:49,040
this number might change depending on different costs of the test nets and how much link token there's available. 
这个数字可能会根据不同测试网的不同花费以及可用 "Link" 的多少而改变

16060
16:20:49,040 --> 16:20:52,280
So if you're actually working on a main net, 
如果你是在主网上运行

16061
16:20:52,280 --> 16:20:55,970
be sure to head over Doc's touching that link EVM chains contract addresses, 
就一定要点击 "docs.chain.link - EVN Chains - Contract Addresses" 

16062
16:20:55,970 --> 16:20:59,600
you can read more about the costs some of these different chains, 
你可以在这里阅读到更多有关不同链上的价格信息

16063
16:20:59,600 --> 16:21:02,240
so you can figure out exactly how much to put in here. 
这样你就能搞清楚到底该放进去多少资金了

16064
16:21:02,240 --> 16:21:05,060
And if you go to the full blockchain solidity course, Jas, we can scroll down to Lesson Nine,
如果你前往 "full-blockchain-solidity-course-js"，可以往下拉到 "Lesson 9"

16065
16:21:05,060 --> 16:21:08,240
there's a recommended link amounts or rinky saving tests
这里有一个针对 "Rinkeby Staging" 测试的 "LINK" 推荐数额 

16066
16:21:08,240 --> 16:21:10,970
for chain link VRF. For now we're going to put two 
对于 "Chainlink VRF" 我们建议填 "2"

16067
16:21:10,970 --> 16:21:13,520
for keepers, we're going to put eight, 
对于 "Keepers" 我们建议填 "8"

16068
16:21:13,520 --> 16:21:16,580
but feel free to refer to here so you know how much to put in. 
请自由参考这里的数值，这样你就能知道该填多少了

16069
16:21:16,580 --> 16:21:20,210
So let's go ahead and confirm, we're going to approve adding funds here, 
让我们继续，点击 "Confirm"，然后就来到了 "Approve add funds" 界面

16070
16:21:20,240 --> 16:21:22,700
go ahead and confirm. 
继续点击 "Confirm"

16071
16:21:22,700 --> 16:21:25,340
And we're now funding our subscription to 
现在我们就为我们的订阅注入了资金

16072
16:21:25,340 --> 16:21:29,480
so we can pay that Oracle gas to get our random numbers. 
这样我们就可以支付获取随机数所需的预言机 "gas" 了

16073
16:21:29,510 --> 16:21:32,990
Great. And once we're funded, we can close it, we'll do a little refresh. 
好的，注资完成后，我们就可以关掉它了，再刷新一下

16074
16:21:33,080 --> 16:21:35,180
And we can see the balance is now to link 
并且我们看到 "Balance" 现在是 "2 LINK" 了

16075
16:21:35,180 --> 16:21:37,490
when we don't have any consumers 
不过我们还没有 "consumers" 

16076
16:21:37,490 --> 16:21:40,160
perfect. So we've got our sub ID, we funded it. 
完美，我们已经获取了我们的 "SubId"，并注入了资金

16077
16:21:40,160 --> 16:21:43,340
Now let's go ahead and deploy our contract. 
现在让我们继续部署我们的合约

16078
16:21:43,340 --> 16:21:47,270
And we already know that we should be all good for deploying our contract, 
不过我们知道，我们应该已经部署好我们的合约了

16079
16:21:47,270 --> 16:21:50,300
we go to our Dotty and V will need to add all of those same parameters from our previous projects, 
前往我们的 ".env" 我们需要添加与上次项目中完全相同的参数

16080
16:21:50,300 --> 16:21:53,390
we'll need to shrink the RPC URL, we'll need our private key. 
我们需要 "RINKEBY_RPC_URL"，以及我们的 "PRIVATE_KEY" 

16081
16:21:53,390 --> 16:21:56,720
If we want to verify we'll need our ether scan API key. 
如果我们想要验证的话，就还需要我们的 "ETHERSCAN_API_KEY" 

16082
16:21:56,720 --> 16:22:00,980
And if we want to do gas output, we'll need our coin market cap API key. 
以及，如果我们想要获取 "gas" 输出的话，那就还需要我们的 "COINMARKETCAP_API_KEY" 

16083
16:22:01,010 --> 16:22:05,120
So let's make sure we have all that. 
让我们来确认一下这里的所有内容

16084
16:22:05,450 --> 16:22:08,570
And we'll look at our deploy script. Once again, just real quick 
查看一下我们的部署脚本，快速的看一下

16085
16:22:08,570 --> 16:22:12,290
look at our helper hardcat config just real quick,
再看一下我们的 "helper-hardhat-config.js"，同样是快速看一下

16086
16:22:12,320 --> 16:22:14,840
and it looks like we do indeed have everything in here. 
看来我们这里确实已经具备所有的内容了

16087
16:22:14,840 --> 16:22:18,770
And we should just be able to deploy it in one command.
然后我们就应该用一行命令部署它了

16088
16:22:18,770 --> 16:22:22,040
So we should be able to do yarn, hard hat or just h h again,
我们应该运行 `yarn hardhat` 又或者是 `hh` 

16089
16:22:22,040 --> 16:22:25,100
ploy, dash dash network Rinkeby. 
`deploy --network rinkeby`

16090
16:22:25,100 --> 16:22:28,070
Let's go try this out. 
来试一下吧

16091
16:22:28,070 --> 16:22:31,220
All right, it looks like we've compiled successfully, we've deployed it successfully. And we've even verified it, 
很好，看起来已经编译成功并且部署成功，而且还验证完了

16092
16:22:31,220 --> 16:22:34,040
we can go and open it up on Rinku ether scan. 
我们可以打开一下 "rinkeby.etherscan"

16093
16:22:34,040 --> 16:22:36,260
And we can see our code here has been verified. And it's looking beautiful. 
可以看到我们的代码已经通过了验证，看起来非常漂亮

16094
16:22:40,369 --> 16:22:44,659
We can read from it, which is great. We can see all these commands here now that it's verified. 
我们可以从中读取信息，好极了，还可以在这里看到所有的指令，并且都已经被验证了

16095
16:22:44,839 --> 16:22:51,139
And if we look at the Git raffle state, we should indeed see that it's open, right, 
如果我们看一下这个 "getRaffleState"，应该能看到它是开放的，对吧？

16096
16:22:51,139 --> 16:22:53,569
and it's going to stay open until somebody ends the raffle and updates the amount of eath that the contract actually has. 
并且它将一直保持开放，直到有人结束了抽奖并更新了合约实际拥有的以太币金额

16097
16:22:53,569 --> 16:22:57,259
Now that we've deployed a contract using that sub ID, 
我们已经完成了使用 "SubId" 部署合约的任务

16098
16:22:57,259 --> 16:23:00,829
we need to register the contract with chain link V REF. And with chain link keepers. 
现在我们需要为合约注册 "Chainlink VRF" 以及 "Chainlink keepers" 

16099
16:23:00,829 --> 16:23:04,309
So we need to add this consumer does tell chinley VRF. 
所以我们需要把它添加为 "consumer" 并告诉 "Chainlink VRF"

16100
16:23:04,309 --> 16:23:07,009
Hey, this is the contract that you're looking for now. 
嘿，这就是你现在要找的合约了

16101
16:23:07,009 --> 16:23:09,709
So we're gonna go back to V REF dot chain dot link, 
所以我们要回到 "vrf.chain.link"

16102
16:23:09,709 --> 16:23:12,319
and we're going to grab this contract address, and we're going to add it as a consumer,
我们要获取这个合约的地址，并将其添加为一个 "consumer" 

16103
16:23:12,319 --> 16:23:16,009
your subscription is ready, you can now add consumers we're gonna add consumer. 
你的订阅已经准备好了，现在可以添加 "consumer" 了，我们点击 "Add consumer"

16104
16:23:16,009 --> 16:23:19,189
And again, this website is just here to help facilitate us interacting with the contract. 
再提醒一下，这个网站只是为了帮助我们更便捷地与合同进行交互而已

16105
16:23:19,189 --> 16:23:22,369
So we're going to approve that user, we'll go ahead and confirm and the transaction is going through. 
这样我们就来到了用户批准环节，继续点击 "Confirm" 然后交易就正在进行了

16106
16:23:22,369 --> 16:23:25,639
While we wait for this to go through, we can go to keepers dot chain dot link, 
当我们等待通过的时候，我们可以前往 "keepers.chain.link"

16107
16:23:25,639 --> 16:23:29,659
and do the same thing work with the user interface to register a new upkeep. 
并在用户界面中使用同样的操作注册一个新的 "Upkeep" 

16108
16:23:29,659 --> 16:23:31,789
So we'll go ahead and add our email Hardhead free code camp@gmail.com. 
我们继续，添加我们的 Email: "hardhatfreecodecamp@gmail.com"

16109
16:23:31,789 --> 16:23:34,909
We'll call this raffle upkeep. 
我们把它命名为 "Raffle Upkeep" 

16110
16:23:34,909 --> 16:23:38,089
We'll paste our upkeep address in here 
把我们的 "Upkeep address" 粘贴到这里

16111
16:23:38,149 --> 16:23:40,639
we have our admin address, and you can ignore this bit right here. 
我们有一个 "Admin address"，你可以忽略这里的内容

16112
16:23:40,639 --> 16:23:43,909
For gas limit, this is going to be the gas limit of the PErforM upkeep function. 
"Gas limit" 指的是 "performUpkeep" 函数的 gas 上限

16113
16:23:43,909 --> 16:23:47,059
If we did our gas estimator, we could just check to see how much that perform upkeep costs. 
如果我们执行了 "gas estimator"，就能知道 "performUpkeep" 会消耗多少 gas 

16114
16:23:47,059 --> 16:23:49,729
But for now, I'm just going to put 500,000 That's probably overkill, but that's fine. 
但暂时我们先直接填上 `500000`，可能有点多了，不过没关系

16115
16:23:49,729 --> 16:23:52,189
Check data, we're going to keep blank because again, our checkup keep doesn't take anything. 
"Check data" 这里我们会保持留白，因为我们的 "checkUpkeep" 没有接收任何参数

16116
16:23:52,189 --> 16:23:56,689
And then starting balance, we're going to put as eight. 
而 "Starting balance" 我们就填入 `8`

16117
16:23:56,689 --> 16:23:59,779
And if you forget to put a starting balance here, you can always find it later. 
如果你忘了填写这里的 "Starting balance"，可以之后随时填上

16118
16:23:59,779 --> 16:24:04,369
So let's go ahead and register,
那么让我们继续，点击 "Register"

16119
16:24:04,369 --> 16:24:09,949
we're gonna get a Metamask pop up, we're gonna go ahead and hit Confirm. 
我们的 MetaMask 弹了出来，继续点击 "Confirm"

16120
16:24:09,949 --> 16:24:13,249
And we can go back to our VRF and see that it's indeed been added 
然后我们可以回到 "VRF" 这里，并且能看到它确实已经被添加了

16121
16:24:13,249 --> 16:24:16,129
and awesome, we now have a consumer on our VRF. 
好极了，现在我们的 "VRF" 上就有了一个 "consumer" 了

16122
16:24:16,129 --> 16:24:19,399
So now let's just wait for our keepers to go through 
现在就让我们等一下 "Keepers" 的通过吧

16123
16:24:19,429 --> 16:24:22,399
upkeep registration requests submitted successfully 
"Upkeep" 注册请求提交成功

16124
16:24:22,429 --> 16:24:25,069
on domain net, you might actually have to wait a little bit for your request to go through, 
在主网上，你可能需要多等待一段时间请求才能通过

16125
16:24:25,099 --> 16:24:29,269
but I'll test that it should automatically go through. 
但在测试网上它应该自动就通过了

16126
16:24:29,269 --> 16:24:32,419
Now if we go back to keepers dot chain dot link, 
现在，如果我们回到 "keepers.chain.link"

16127
16:24:32,419 --> 16:24:35,239
we should now see we now if we scroll down to my upkeeps We have a raffle upkeep here 
我们现在应该能看到，点开 "My upkeeps"，这里已经有了一个 "Raffle Upkeep" 了

16128
16:24:35,239 --> 16:24:38,479
and I have to because I accidentally use the same account that I tested on, 
我有两个，因为我之前不小心用了相同的账号进行了测试

16129
16:24:38,479 --> 16:24:41,749
you can ignore the two you'll have one but this is the one that we just created.
你可以忽略这两个，有一个就行了，这一个才是我们刚刚创建的那个

16130
16:24:42,559 --> 16:24:45,649
And we can actually see what our balances and then what the minimum balance for this actually is. 
我们可以看到我们的 "Balance" 以及 "Minimum Balance" 分别是多少 

16131
16:24:45,649 --> 16:24:50,029
So it looks like eight Link was a little bit too low. 
看起来 8 "LINK" 还有一点不够

16132
16:24:50,029 --> 16:24:53,359
So let's go back to Fosses dot chain dot link slash rinky. 
所以让我们回到 "faucets.chain.link/rinkeby" 

16133
16:24:53,359 --> 16:24:55,819
Now that we have some more link, we can come back to our raffle upkeep. 
现在我们有了更多 "Link"，就可以回到我们的 "Raffle Upkeep" 

16134
16:24:55,819 --> 16:24:59,539
And we go ahead and hit add funds. 
我们继续，点击 "Add funds"

16135
16:24:59,539 --> 16:25:02,239
And we'll add just three. And we'll go ahead and confirm 
我就添加 `3` 吧，继续点击 "Confirm"

16136
16:25:02,239 --> 16:25:04,819
we first need to give permission to spend. 
首先我们需要得到花费许可

16137
16:25:04,819 --> 16:25:08,509
We approved our link transfer now let's actually transfer the link to the contract 
我们批准了 "Link" 转移，现在让我们把 "Link" 实际转移到合约内

16138
16:25:08,509 --> 16:25:12,409
and alright funds added successfully. So now let's do a little refresh. 
好的，资金添加成功，现在让我们刷新一下

16139
16:25:12,409 --> 16:25:15,859
Now we no longer see that message saying that it's underfunded and we have our balance 
现在我们就不会看到资金不足的消息了，这是我们的余额

16140
16:25:15,919 --> 16:25:18,439
and we can see that it's more than the minimum balance. 
并且我们可以看到，它是多于最小余额的

16141
16:25:18,439 --> 16:25:21,169
We have See the history that we just funded this twice. 
我们可以在历史("History")中看到，刚刚我们注资了两次

16142
16:25:21,289 --> 16:25:24,589
Once this actually kicks off, we'll see activity type will be like perform upkeep or something
一旦这里被实际启动了，我们就能看到 "Activity type" 会变成 "performUpkeep" 之类的东西了

16143
16:25:24,589 --> 16:25:26,809
got our sub ID, we've deployed the contract, 
我们已经获取了 "SubId"，已经部署完了合约

16144
16:25:26,839 --> 16:25:30,499
we've registered with chain link V REF, we've registered it with chain link keepers. 
我们已经注册好了 "Chainlink VRF"，也注册好了 "Chainlink Keepers"

16145
16:25:30,499 --> 16:25:35,959
Now all we need to do is run the staging tests. 
现在我们就需要运行 "staging" 测试了

16146
16:25:35,989 --> 16:25:38,899
Now running our staging test is essentially going to be the same as us calling this enter script, right, 
运行 "staging" 测试本质上和调用这个 "enter" 脚本是一样的，对吧

16147
16:25:38,899 --> 16:25:43,009
because all we're doing in our staging test is entering the lottery. 
因为我们在 "staging" 测试中所做的事就是进入抽奖

16148
16:25:43,009 --> 16:25:47,239
And then we just have a whole bunch of validators that we're running to make sure that things are doing as we expect, 
然后用一大堆验证器来确保所有事情都能按我们预期的那样执行

16149
16:25:47,239 --> 16:25:50,179
since our contract is actually verified, what we could do on Rigby ether scan 
因为我们的合约都已经被验证了，那么我们就能到 "rinkeby etherscan" 上

16150
16:25:50,179 --> 16:25:53,569
is we can actually go to this right contract section of the contract. 
点开这里的 "Contract" 部分中的 "Write Contract" 

16151
16:25:53,569 --> 16:25:56,659
And we could even connect our wallets to it. 
我们甚至可以把它和我们的钱包连接起来

16152
16:25:56,659 --> 16:25:59,539
And once this turns from red to green, after a little refresh,
一旦这个开关从红色变为绿色，我们刷新一下

16153
16:25:59,539 --> 16:26:02,359
we'll now see that it's green, it's connected, 
现在我们看到它是绿色的了，表示已经连接上了

16154
16:26:02,359 --> 16:26:05,509
we can even call functions on this contract ourself, 
我们甚至可以自己在这个合约上调用函数

16155
16:26:05,539 --> 16:26:09,079
so we could enter the raffle ourself, 
所以我们可以自己进入到抽奖中

16156
16:26:09,109 --> 16:26:12,259
we would add, you know, however much eath to enter the raffle, 
我们添加，总之，随便用一些 ETH 进入抽奖

16157
16:26:12,259 --> 16:26:14,389
and that would kick off the keepers in the VRF, as well. 
这同样会使 "Keepers" 和 "VRF" 启动起来

16158
16:26:14,389 --> 16:26:18,079
So we could call it via ether scan, we could obviously call it via our staging tests here, 
也就是说，我们可以通过 etherscan 调用，也可以通过这里的 "staging" 测试调用

16159
16:26:18,079 --> 16:26:20,899
we could call it via our scripts, we could call it via the console, 
也可以通过我们的脚本调用，也可以通过控制台进行调用

16160
16:26:20,989 --> 16:26:24,589
there's a ton of ways to actually do this. 
有很多方法可以完成这一操作

16161
16:26:24,679 --> 16:26:27,349
But moment of truth here, we're gonna run our staging tests, 
那么，关键时刻到了，我们要开始运行 "staging" 测试了

16162
16:26:27,349 --> 16:26:29,839
which is going to have us enter the lottery, and set up a listener to make sure that everything works correctly. 
我们将进入到抽奖中，并设置一个 "listener" 以确保一切都能正常工作

16163
16:26:29,839 --> 16:26:33,409
And additionally, we'll see on our raffle upkeep history, 
此外，我们会在 "Raffle Upkeep" 的 "History" 中看到

16164
16:26:33,409 --> 16:26:37,069
we'll see a transaction go through, 
我们会看到一笔交易通过了

16165
16:26:37,069 --> 16:26:39,739
and then we'll see a transaction on our chain like VRF as well. 
接着，我们同样会在 "Chainlink VRF" 中看到一笔交易

16166
16:26:39,739 --> 16:26:44,659
Are you ready? I sure am. Let's do this. 
你准备好了么？我准备好了，让我们开始吧

16167
16:26:44,659 --> 16:26:48,079
So we'll do h h, test, dash dash network, rink B.
我们执行 "hh test --network rinkeby"

16168
16:26:48,139 --> 16:26:51,409
And that should be all we need to do. 
这就是我们全部要做的事情了

16169
16:26:51,409 --> 16:26:55,279
In our state and tests, we probably should have added some console dot logs in here 
在我们的 "staging" 测试中，我们大概还应该添加一些 "console.log" 语句

16170
16:26:55,279 --> 16:26:58,309
to tell us hey, to tell us what steps that we're on with each.
来告诉我们进行到哪一步了

16171
16:26:58,309 --> 16:27:01,069
But we forgot to. 
不过我们给忘了

16172
16:27:01,069 --> 16:27:03,889
So if you follow along with the repo associated with this, we've added the console dot logs in the test there. But all right, 
如果你是跟着关联仓库在做的话，我们已经在那里把 "console.log" 语句添加进测试里了，不过影响不大

16173
16:27:03,889 --> 16:27:06,559
if we go to the ether scan for this contract, 
如果我们前往这个合约的 etherscan 

16174
16:27:06,559 --> 16:27:09,109
we go back to the rink the ether scan for this, we paste in that address, 
我们回到 Rinkeby etherscan 里，把地址粘贴进去

16175
16:27:09,109 --> 16:27:12,949
the first step that we're doing in this test, of course, while we're setting up this listener, 
我们在测试里做的第一步，当然就是设置这个 "listener" 

16176
16:27:12,949 --> 16:27:15,949
the first transaction is going to be entering the raffle that's going to kick everything off. 
第一笔交易则是进入到抽奖中，是它启动了所有的东西

16177
16:27:15,949 --> 16:27:19,609
Right. So if we refresh a little bit on ether scan, we do indeed see we've entered the raffle. 
那么，如果我们在 etherscan 中刷新一下，就能看到我们确实进入到抽奖中了

16178
16:27:19,609 --> 16:27:23,089
And we've updated the balance of the raffle. Okay, awesome. 
并且我们更新了抽奖中的余额，好极了

16179
16:27:23,089 --> 16:27:26,839
So raffle has been entered. Now then what happens? 
所以我们已经入到抽奖里了，那么接下来会发生什么？

16180
16:27:26,839 --> 16:27:30,769
Well, if the raffle has been entered, if we go to raffle dot soul, 
嗯，如果已经进入到抽奖里了，我们来到 "Raffle.sol" 这里

16181
16:27:30,769 --> 16:27:32,719
if it's open, if enough time has passed, if there's players and it has a balance, which we just checked does, 
如果它是开放的，如果时间足够长，如果有玩家有余额，总之全部都已经检查过了

16182
16:27:32,900 --> 16:27:40,250
this will get kicked off by the keepers. 
那么它就会启动 "Keepers" 

16183
16:27:40,400 --> 16:27:43,220
So if we go to the keepers, and we do a little refresh here, 
所以如果来到 "Keepers" 这里，并且刷新一下

16184
16:27:43,220 --> 16:27:46,040
after a little bit, we do indeed see checkup key passed and we see a perform upkeep having gone through
片刻过后，哦，我们看到 "checkUpkeep" 确实通过了，并且 "performUpkeep" 也通过了！

16185
16:27:46,040 --> 16:27:49,160
great, what does perform upkeep to 
很好，那么 "performUpkeep" 做了些什么呢？

16186
16:27:49,400 --> 16:27:52,640
well perform upkeep calls the chainlink VRF. 
嗯，"performUpkeep" 调用了 "Chainlink VRF" 

16187
16:27:52,640 --> 16:27:55,160
So now if we go over to chainlink, VRF, we do a refresh here, 
所以现在，如果我们前往 "Chainlink VRF"，在这里刷新一下

16188
16:27:55,160 --> 16:27:58,700
go down to history, we do indeed see one of the transactions has gone through 
来到下面的 "History"，我们看到交易确实已经通过了！

16189
16:27:58,700 --> 16:28:01,580
we can see the transaction hash, the link spent, etc. 
我们能看到 "Transcation Hash" 以及消耗的 "LINK" 数，等等等等

16190
16:28:01,580 --> 16:28:04,730
And now if we go back to our tests, 
现在如果我们回到测试

16191
16:28:04,730 --> 16:28:08,210
we do indeed see raffle unit tests for friend fulfill random request winner pick event fired. 
我们看到了 "Raffle Unit Tests", "fulfillRandomWords", "WinnerPicked event fired"

16192
16:28:08,210 --> 16:28:11,210
And this means that we just went through this entire process of having a perfectly truly decentralized raffle 
这意味着，我们刚刚经历了一个完整的，真正去中心化的抽奖过程

16193
16:28:11,210 --> 16:28:13,970
work on an actual Testament with our integration tests working correctly.
并且我们在一个实际的测试网上，正确地执行了我们的集成测试

16194
16:28:13,970 --> 16:28:17,720
Absolutely massive, huge congratulations if you've made it this far. 
如果你走到了这一步，那真的是非常的了不起

16195
16:28:17,720 --> 16:28:22,400
And if you just walk through the integration test with me 
恭喜你，刚刚和我一起完成了集成测试

16196
16:28:22,400 --> 16:28:26,600
now bounce over contract has now been reset to zero 
现在，合约的余额已经被重置为了 0 

16197
16:28:26,600 --> 16:28:30,140
because our wallet address just won the lottery right and got the money back. 
因为我们的钱包刚刚已经赢得了抽奖，并且获得了相应的金钱

16198
16:28:30,140 --> 16:28:32,540
Now you might be wondering, Hey, I see the Create raffle function. And I see enter raffle 
你可能会感到有一些奇怪，我看到了 "Create: Raffle" 函数，还看到了 "Enter Raffle"

16199
16:28:32,540 --> 16:28:36,110
but I don't see didn't the chain link nodes just call perform upkeep and fulfill random words, 
但我没看到 "Chainlink" 节点调用 "performUpkeep" 以及 "fulfillRandomWords"

16200
16:28:36,110 --> 16:28:39,530
I'll come no matter how often I refresh, I don't see those transactions here. 
无论我在这里刷新多少次，都无法在这里看到那些交易

16201
16:28:39,530 --> 16:28:43,190
Well, those are actually going to be considered internal transactions 
嗯，他们实际上被当成了内部交易

16202
16:28:43,190 --> 16:28:46,280
fulfill random words, it's actually called through the VRF coordinator 
"fulfillRandomWords" 实际上是通过 "VRFCoordinator" 调用的

16203
16:28:46,670 --> 16:28:50,960
and the VRF coordinator contract then calls for full randomness.
是 "VRFCoordinator" 合约调用了 "fulfillRandomWords" 

16204
16:28:50,960 --> 16:28:55,220
So we can go to internal transactions. 
所以，我们可以到 "Internal Txns" 中 

16205
16:28:55,220 --> 16:28:59,900
And one of these transactions is going to be the transaction to the VRF coordinator contract, which calls our contract. 
这些交易的其中之一就是 "VRFCoordinator" 合约，是它调用了我们的合约

16206
16:28:59,900 --> 16:29:02,060
Same thing with perform upkeep. 
"performUpkeep" 也是同样的道理

16207
16:29:02,060 --> 16:29:05,030
Perform upkeep, the chain link nodes actually call through the registry contract 
"performUpkeep" 其实是 "Chainlink" 节点通过注册的合约调用的

16208
16:29:05,030 --> 16:29:08,480
and then the registry contract calls perform upkeep. That's what we see here.
是这个注册合约调用了 "performUpkeep"，这就是我们所看到的

16209
16:29:08,510 --> 16:29:12,830
And if we go through the internal transactions, we'll see him there. 
我们到 "Internal Txns" 里就能看到它了 

16210
16:29:12,830 --> 16:29:16,460
Now let's look at this enter raffle as well. 
现在，让我们再来看看这个 "Enter Raffle"

16211
16:29:16,460 --> 16:29:20,090
And since we've learned about events and logs, we can actually go to the logs section now. 
既然我们已经学过了 "event" 和 "log"，那我们就可以到这个 "Logs" 里看看了

16212
16:29:20,090 --> 16:29:22,460
And we can see our log or event being emitted here 
可以看到，我们的 "log" 或者 "event" 在这里显示被触发了

16213
16:29:22,490 --> 16:29:25,130
we can see the name raffle, enter, we can see the topic zero which is going to identify this entire event. 
我们可以看到 "Name RaffleEnter"，可以看到 "Topics 0"，它用来标识整个 "event" 

16214
16:29:25,130 --> 16:29:27,230
And then we also see this number here which is what 
我们还可以看到，这里的这个数字，它是什么呢？

16215
16:29:27,230 --> 16:29:30,320
which is index topic, one address player 
它就是 "index_topic_1 address player"

16216
16:29:30,320 --> 16:29:33,560
and then there's no data associated with this right 
然后 "Data" 这里是空的，对吧

16217
16:29:33,560 --> 16:29:36,890
because we only have index parameters which again show up as topics 
因为我们只有 "index" 参数，它会在 "Topics" 中显示出来

16218
16:29:36,890 --> 16:29:40,580
so this is absolutely phenomenal. 
嗯，这可真是太了不起了