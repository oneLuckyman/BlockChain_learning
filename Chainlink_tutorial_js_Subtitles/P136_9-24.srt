15599
15:52:07,970 --> 15:52:13,970
Now I'm going to make just one more test here, that's gonna be way too big. 
现在我要再做一个测试，它的规模很大

15600
15:52:13,970 --> 15:52:17,450
But right now the test that we're about to write is going to be it's going to be a really big test. 
现在我们要写的测试会是一个很大的测试

15601
15:52:17,450 --> 15:52:19,820
And we probably want to split it up into different sections, 
我们可能需要把它分为几个不同的部分

15602
15:52:19,820 --> 15:52:22,250
but actually figured that this was actually the best way to show this section. 
我认为这是展示这部分内容的最佳方式

15603
15:52:22,250 --> 15:52:25,190
And it's going to be exactly what we're going to do. When we get to our staging test, 
当我们要进行 "Staging" 测试的时候，这些事是肯定要做的

15604
15:52:25,190 --> 15:52:27,500
we're going to write this test literally almost exactly the same. 
我们将几乎以完全相同的方式来编写这个测试

15605
15:52:27,500 --> 15:52:30,350
So let's write it, 
那么，让我们开始写吧

15606
15:52:30,350 --> 15:52:33,680
this is basically going to be the test that puts everything together. 
这基本上就是把所有内容整合到一起的测试

15607
15:52:33,860 --> 15:52:37,790
So we're going to test that this indeed, so winner resets the lottery, and sends money, 
所以，我们要测试的就是 `picks a winner, resets the lottery, and sends money`
(“选出一个优胜者，重置抽奖，发送奖金”)

15608
15:52:37,790 --> 15:52:40,970
which is kind of a lot for a single it, 
这对于单个 "it" 来说有点多了

15609
15:52:40,970 --> 15:52:47,240
we probably would want to split those into their own pieces. 
我们可能会把它分割为几个各自不同的部分

15610
15:52:47,240 --> 15:52:50,210
But for this, we're just going to put them all into one, 
但现在我们先把它们全都整合成一个

15611
15:52:50,210 --> 15:52:53,390
and it's going to be an async function. 
这里还有一个 "async function"

15612
15:52:53,390 --> 15:52:55,580
Now we are going to learn a couple of new tricks here. So definitely be sure to follow along. 
现在我们要学习一些新的技巧，所以请一定要跟紧了

15613
15:52:55,700 --> 15:52:59,390
Now for this one, we're also going to add in some additional entrances 
对于这个测试来说，我们需要添加一些额外的参与者

15614
15:52:59,390 --> 15:53:02,630
additional people who are entering this lottery. 
一些额外参与抽奖的人

15615
15:53:02,630 --> 15:53:05,780
So we'll say const, additional, and trance equals great. 
所以我们要写 `const additionalEntrants = 3`

15616
15:53:05,780 --> 15:53:08,480
We're gonna have some more of those fake accounts from ethers enter our lottery here.
我们需要从 "ethers" 中获取一些额外的虚拟账户来参与到我们的抽奖中来

15617
15:53:08,870 --> 15:53:14,210
So we're gonna say const. Starting account, index equals to, 
所以我们要写 `const startingAccountIndex = 2`

15618
15:53:14,210 --> 15:53:17,930
since deployer equals zero, excuse me equals one, 
因为 "deployer = 0"，抱歉，应该是等于 1 

15619
15:53:17,960 --> 15:53:23,180
since the player is zero, 
因为 "deployer" 是 0 

15620
15:53:23,300 --> 15:53:27,950
so we're going to have new accounts start from index one. 
所以我们就有了一个新的账户，从索引 1 开始

15621
15:53:27,950 --> 15:53:30,740
And we're going to do a little for loop or let i equals starting count index, 
然后我们执行一个循环 `for(let i = startingAccountIndex)`

15622
15:53:30,770 --> 15:53:34,910
i is less than the starting count, index, plus additional and trend sees 
`i < startingAccountIndex + additionalEntrances`

15623
15:53:35,090 --> 15:53:44,150
there's gonna be entrance. 
抱歉，应该是 `Entrants` 

15624
15:53:45,080 --> 15:53:51,470
i plus plus, 
`i++`

15625
15:53:52,580 --> 15:53:56,690
we're gonna do a little loop and connect our raffle contract to these new accounts. 
我们要通过这个循环，把我们的 "Raffle" 合约与这些新账户连接起来

15626
15:53:56,720 --> 15:53:59,150
And then we're going to have these new accounts, enter our raffle 
然后我们就能让这些新账户进入到我们的抽奖中了

15627
15:53:59,150 --> 15:54:04,700
contest. Count, connected raffle equals raffle dot connect accounts of i 
`const accountConnectedRaffle = raffle.connect(accounts[i])`

15628
15:54:05,090 --> 15:54:13,070
and do we have accounts defined somewhere 
我们在哪里定义过 "accounts" 么？

15629
15:54:13,070 --> 15:54:16,190
we don't. So let's get accounts to find somewhere. 
没有，所以让我们先找个地方获取一下 "accounts" 

15630
15:54:16,190 --> 15:54:20,600
We'll say const accounts equals await ethers dot get signers. 
这样写 `const accounts = await ethers.getSigners()`

15631
15:54:20,660 --> 15:54:24,980
And then we're going to do a weight account connected raffle dot enter. raffle 
接着我们执行 `await accountConnectedRaffle.enterRaffle()

15632
15:54:24,980 --> 15:54:31,190
with a value of course of raffle entrance fee,
当然，还有 `value: raffleEntranceFee`

15633
15:54:31,220 --> 15:54:34,100
we're going to connect three additional entrance to our raffle. 
我们要连接三个额外的参与者到我们的抽奖中来

15634
15:54:34,220 --> 15:54:37,550
So we're going to have a total of four people connect into this raffle. 
所以我们总共有 4 个人连接到了这个抽奖上

15635
15:54:37,550 --> 15:54:41,000
Now that we have them in here, we're going to keep note of our starting timestamp. 
现在我们已经有了他们，接着我们要记录下开始时的时间戳

15636
15:54:41,030 --> 15:54:43,970
So we're gonna do const starting timestamp equals await, raffle dot get last timestamp. 
我们要执行 `const startingTimeStamp = await raffle.getLastTimeStamp`

15637
15:54:43,970 --> 15:54:47,060
And here's where we're going to get a little bit tricky. 
这里我们要用到一个小技巧

15638
15:54:47,060 --> 15:54:53,750
What we want to do is a couple of things 
我们想做的就是这么几件事

15639
15:54:54,320 --> 15:54:56,660
we want to we want to perform upkeep, which is going to mock being chainlink keepers, 
我们想要执行 "performUpkeep"，它用于模拟 "Chainlink Keepers" 

15640
15:54:56,660 --> 15:55:00,800
which will kick off the chain link, which will kick off calling fulfill random words. 
它会启动调用 "fulfillRandomWords" 

15641
15:55:00,800 --> 15:55:05,420
And we're going to mock doing that as well. Mock being the chain link VRF. 
同样是模拟做一些事情，模拟 "Chainlink VRF" 

15642
15:55:05,420 --> 15:55:09,620
Once we do that, we can of course just check to see okay, 
一旦做完了这些，我们当然就可以开始检查了

15643
15:55:09,620 --> 15:55:14,360
did the recent winner get recorded the raffle get reset just play as we said as the timestamp is everything reset. 
"recentWinner" 是否被记录了，抽奖是否重置了，"players" 是否重置了，时间戳是否重置了

15644
15:55:14,360 --> 15:55:19,340
But we want to do this in a specific way. 
但我们要用一种特殊的方式来执行这些操作

15645
15:55:19,340 --> 15:55:22,520
If we're doing this on a test net after we call fulfill random words, 
如果我们是在一个测试网上进行的这些操作，那么在调用 "fulfillRandomWords" 之后

15646
15:55:22,520 --> 15:55:26,180
we will have to wait for the fulfill random words to be called. 
我们需要等待 "fulfillRandomWords" 调用完毕

15647
15:55:26,180 --> 15:55:29,450
Now since we're working with a hardhat local chain, we don't really need to wait for anything, 
但由于我们是在 hardhat 本地链上，所以我们并不需要真的去等待什么

15648
15:55:29,450 --> 15:55:33,140
right because we can just say okay, boom, snap our fingers and adjust our blockchain to do whatever we want. 
因为我们可以随意做出改变，就像打响指一样，随心所欲地调整我们的区块链

15649
15:55:33,140 --> 15:55:37,130
But we're going to simulate that we do need to wait for that event to be called. 
但我们需要模拟我们确实等待 "event" 被调用了

15650
15:55:37,280 --> 15:55:40,640
So in order for us to simulate waiting for that event, we once again need to set up a listener.
所以为了模拟等待 "event"，我们又一次需要配置 "listener"

15651
15:55:40,640 --> 15:55:43,430
Now if we set up a listener we don't want this to Just to finish before the listener has is done listening, 
如果我们配置了 "listener" 我们就不希望测试在 "listener" 完成监听前就结束

15652
15:55:43,430 --> 15:55:46,400
so we need to once again create a new promise. 
所以我们又需要创建一个新的 "promise" 

15653
15:55:46,400 --> 15:55:48,800
And this is going to be incredibly important, especially for our staging tests. 
这一点非常重要，尤其是对于 "staging" 测试来说

15654
15:55:48,800 --> 15:55:51,680
So we're going to do await, new promise. 
所以我们执行 `await new Promise()`

15655
15:55:51,920 --> 15:55:55,010
And this is going to be exactly the same as we set it up before, 
它就和我们之前的做法完全相同

15656
15:55:55,010 --> 15:55:59,240
it's going to be an async function that's going to take resolve and reject as parameters. 
这里是一个 `async` 函数，接收 `resolve` 以及 `reject` 作为参数

15657
15:55:59,300 --> 15:56:02,300
And we're going to use this little arrow syntax here saying, this is an async function, basically, 
然后我们用一个箭头语法表明这里是一个 "async" 函数

15658
15:56:02,300 --> 15:56:06,650
and we're going to set up once again, that once syntax, 
接着我们要再次配置 "once" 语法

15659
15:56:06,650 --> 15:56:09,800
we're gonna say raffle that once, what's the event name, winner picked. 
我们要写的是 `raffle.once()`，"event" 的名字是 "WinnerPicked" 

15660
15:56:09,800 --> 15:56:13,250
So we're gonna say, Listen, for this winner picked event, 
所以我们的意思就是，监听这个 "WinnerPicked" 事件

15661
15:56:13,250 --> 15:56:17,510
we're gonna say raffle dot once winner picks happens, do some stuff.
我们要做的就是一旦 "raffle.once("WinnerPicked")" 发生了，就要做些什么

15662
15:56:17,510 --> 15:56:20,570
And again, this is just an anonymous function. 
这里也是一个匿名函数

15663
15:56:20,570 --> 15:56:24,860
So we're gonna say raffle dot once the winner picked event gets emitted, do some stuff. 
所以我们的意思就是，一旦 "raffle.once(WinnerPicked)" 事件被触发，就要去做某些事了

15664
15:56:24,860 --> 15:56:27,080
So we're setting this up. 
我们正在做的就是这么一件事

15665
15:56:27,080 --> 15:56:30,920
Now it's in this function, we're going to add all of our certs and everything 
在这个函数中，我们要添加各种 "assert" 之类的东西

15666
15:56:30,920 --> 15:56:34,520
because we want to wait for winter to get picked.
因为我们要等待优胜者被选出来

15667
15:56:34,520 --> 15:56:39,350
Now before the event gets fired, though, we of course, need to actually call perform and call fulfill random words. 
在这个 "event" 被触发之前，我们当然还需要调用 "fulfillRandomWords"

15668
15:56:39,350 --> 15:56:42,230
So this is going to seem like it's a little bit backwards. 
这看起来好像是反过来了

15669
15:56:42,230 --> 15:56:46,070
But that's because we want to set up our listeners so that when we do fire, the methods that will fire the event, 


15670
15:56:46,100 --> 15:56:49,100
our listener is activated and is waiting for it. 


15671
15:56:49,100 --> 15:56:51,950



15672
15:56:51,950 --> 15:56:56,060



15673
15:56:56,060 --> 15:56:58,400



15674
15:56:58,400 --> 15:57:01,910



15675
15:57:01,970 --> 15:57:05,180



15676
15:57:05,180 --> 15:57:08,870



15677
15:57:08,870 --> 15:57:11,540



15678
15:57:11,540 --> 15:57:14,780



15679
15:57:14,810 --> 15:57:19,040



15680
15:57:19,040 --> 15:57:22,550
So we're going to put all of our


15681
15:57:22,550 --> 15:57:27,050
code inside of this promise. Now, because we put it outside


15682
15:57:27,050 --> 15:57:28,910
of the promise, we put all the code outside of the promise,


15683
15:57:28,940 --> 15:57:31,610
this promise will never get resolved, because the listener


15684
15:57:31,790 --> 15:57:34,790
will never fire into vent. So if down here, you know we call


15685
15:57:34,790 --> 15:57:37,910
fulfill random words with something, you know which the


15686
15:57:37,910 --> 15:57:40,820
spelling is bad. But let's say we call the down here, this


15687
15:57:40,820 --> 15:57:43,700
piece of code will never reach this fulfill random words,


15688
15:57:43,940 --> 15:57:47,060
because it's always going to be waiting for this wants to get


15689
15:57:47,060 --> 15:57:51,290
resolved. So we need to add all of our code inside the promise.


15690
15:57:51,500 --> 15:57:55,190
But outside this raffle dot once now we don't want to wait


15691
15:57:55,190 --> 15:57:58,640
forever, right? Maybe there is an issue here. And we want to be


15692
15:57:58,640 --> 15:58:02,300
able to reject this, if there's an issue. Now what we can do is


15693
15:58:02,300 --> 15:58:06,830
in our heart hat dot config, we can add a timeout. So we can add


15694
15:58:06,830 --> 15:58:13,190
this mocha section, we can give ourselves a timeout of 200,000


15695
15:58:13,190 --> 15:58:17,750
milliseconds, which is going to be 200 seconds max, if this


15696
15:58:17,780 --> 15:58:21,620
event doesn't get fired in 200 seconds, this will be considered


15697
15:58:21,650 --> 15:58:24,980
a failure and this test will fail, which is what we want. And


15698
15:58:24,980 --> 15:58:27,770
I typically like to just wrap this in a try catch because if


15699
15:58:27,770 --> 15:58:31,550
something fails, it'll cause you a whole bunch of headache catch


15700
15:58:31,910 --> 15:58:35,840
E. And if anything fails, we'll also reject, there's an issue


15701
15:58:35,840 --> 15:58:38,030
with us calling some function, we'll just say, Hey, okay,


15702
15:58:38,030 --> 15:58:41,150
that's a failure. But you fail, that way, our promise can get


15703
15:58:41,150 --> 15:58:43,910
resolved in a timely manner, we're going to add this code in


15704
15:58:43,910 --> 15:58:47,240
a little bit. But let's keep going. Let's keep going. And


15705
15:58:47,300 --> 15:58:50,960
excuse me, the trycatch should be in the ones, the ones above


15706
15:58:50,960 --> 15:58:54,020
the results, excuse me, because this is the listener. So sorry,


15707
15:58:54,050 --> 15:58:56,990
we want the trycatch to be inside the ones if this takes


15708
15:58:56,990 --> 15:58:59,600
too long, we want to just go ahead and throw an error.


15709
15:58:59,810 --> 15:59:01,880
Otherwise, we're going to resolve now outside the


15710
15:59:01,880 --> 15:59:04,640
listener, but inside of the promise, we're going to do this


15711
15:59:04,640 --> 15:59:11,480
bit here, where we go const TX equals await raffle dot perform


15712
15:59:11,990 --> 15:59:15,470
upkeep, and we'll pass it the empty bytes object, we'll get


15713
15:59:15,470 --> 15:59:21,650
const TX receipt equals await TX dot weight of one block.


15714
15:59:21,889 --> 15:59:27,409
And then we're going to do a weight VRF core didn't a tour be


15715
15:59:27,409 --> 15:59:35,059
to mock dot fulfill random words, CX receipt dot events of


15716
15:59:35,059 --> 15:59:41,569
one dot args dot Request ID come a raffle that address. So then


15717
15:59:41,569 --> 15:59:43,639
the final thing that we're going to do is we're going to get this


15718
15:59:43,639 --> 15:59:46,639
veer off coordinator be to mock we're going to have it call


15719
15:59:47,239 --> 15:59:50,869
fulfill random words, which takes the request ID and the


15720
15:59:50,869 --> 15:59:53,869
consumer address. So we're going to mock it, give it the request


15721
15:59:53,869 --> 15:59:56,539
ID which we get from the transaction receipt, and the


15722
15:59:56,539 --> 15:59:59,539
consumer address here. All inside this promise, we're


15723
15:59:59,539 --> 16:00:02,809
setting up a listener for this winner picked event. And then


15724
16:00:02,809 --> 16:00:05,809
we're mocking the channeling keepers and then we're mocking


15725
16:00:05,839 --> 16:00:09,949
the chainlink VRF. And once this function gets called this


15726
16:00:09,949 --> 16:00:14,629
function should emit a winner picked event. So this raffle


15727
16:00:14,659 --> 16:00:18,139
that was set up that was listening for this to get


15728
16:00:18,169 --> 16:00:22,159
emitted will pick up and go Ah okay, I found it I found the


15729
16:00:22,159 --> 16:00:26,209
winner picked event. Now we can go ahead and do some stuff. So


15730
16:00:26,209 --> 16:00:29,539
once the winner picked event gets fired, we'll do a little


15731
16:00:29,539 --> 16:00:35,149
console dot log found the event like this and we'll jump into


15732
16:00:35,149 --> 16:00:38,329
our try catch and this trycatch is going to be basically us


15733
16:00:38,359 --> 16:00:41,659
doing all these asserts in here. So first we want to say const


15734
16:00:42,199 --> 16:00:48,349
recent winner equals await raffle dot get recent winner and


15735
16:00:48,349 --> 16:00:50,749
we're going to be checking just everything in this raffle right


15736
16:00:50,749 --> 16:00:53,119
we're gonna be checking that the recent winners right that that


15737
16:00:53,119 --> 16:00:55,519
the raffle state's been reset the players have reversed, you


15738
16:00:55,519 --> 16:00:59,239
know, players has been reset, etc, etc. So we'll say const


15739
16:00:59,689 --> 16:01:05,599
raffle state equals awaits raffle dot get raffle state


15740
16:01:06,799 --> 16:01:12,499
we'll say const. Ending timestamp equals await, raffle


15741
16:01:12,499 --> 16:01:17,539
dot get last timestamp. And let's start doing some asserts.


15742
16:01:17,569 --> 16:01:21,859
So first we should assert that this es players array has been


15743
16:01:21,889 --> 16:01:25,489
reset to zero. So if we call get number of players it should be


15744
16:01:25,519 --> 16:01:32,719
zero. So we can do const num players equals await raffle dot


15745
16:01:32,749 --> 16:01:39,289
get number of players like so. And we can do assert dot equal


15746
16:01:40,069 --> 16:01:45,289
nine players.to string is going to be zero. What else can we


15747
16:01:45,289 --> 16:01:52,279
assert? Well, we can assert dot equal raffle state should be


15748
16:01:52,279 --> 16:01:58,969
back to being open. So raffle state.to string should be zero,


15749
16:01:59,029 --> 16:02:04,459
we should assert that the ending timestamp is now greater than


15750
16:02:04,459 --> 16:02:09,649
the starting timestamp. Because the last timestamp should have


15751
16:02:09,649 --> 16:02:12,439
been updated. We also want to make sure our recent winner is


15752
16:02:12,439 --> 16:02:16,489
correct. But we'll do console dot log recent winner. Now we


15753
16:02:16,489 --> 16:02:20,389
can go to the VRF coordinator mock. And we could simulate this


15754
16:02:20,389 --> 16:02:22,939
and try to figure out who the random winner is to console dot


15755
16:02:22,939 --> 16:02:27,349
log accounts to. And then just to show a bunch of them, we'll


15756
16:02:27,349 --> 16:02:35,389
do 01 and three 