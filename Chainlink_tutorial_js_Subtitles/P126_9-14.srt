14694
14:50:34,490 --> 14:50:40,730
Let's add a little bit of natspec to make this look even more professional 
让我们添加一些自然语言规范("natspec")来让我们的合约更专业一些

14695
14:50:40,730 --> 14:50:43,040
and and give people who are reading our contract even more information. 
同时也为了给阅读我们合约的人们提供更多的信息

14696
14:50:43,040 --> 14:50:48,020
So let's add title here at title and we'll say a sample raffle contract 
让我们先添加一个标题 `@title A sample Raffle Contract` (“标题：一个抽奖合约示例”)

14697
14:50:48,230 --> 14:50:52,220
will say an author is going to be me Patrick Collins or 
然后是 `@author` (“作者”)也就是我 `Patrick Collins` 

14698
14:50:52,220 --> 14:50:55,400
you can put your own name there as well 
或者你也可以写你自己的名字

14699
14:50:55,400 --> 14:51:00,980
at notice. This contract is for creating and untampered orrible decentralized smart contract. 
`@notice This contract is for creating an untamperable decentralized smart contract`
(“说明：本合约旨在创建一个不可篡改的去中心化智能合约”)

14700
14:51:01,010 --> 14:51:05,900
And then we'll do add Dev, this implements chain link VRF v two, and chain link keepers. 
接下来是 `@dev This implements Chainlink VRF v2 and Chainlink Keepers`
(“对开发者：实现了 Chainlink VRF v2 以及 Chainlink Keepers”)

14701
14:51:05,900 --> 14:51:12,470
Alright, awesome. We've got our type declarations, 
非常好，我们已经有了 "Type declarations" (“类型声明”)

14702
14:51:12,470 --> 14:51:16,220
we've got our state variables, 
还有了 "State Variables"(“状态变量”)

14703
14:51:16,250 --> 14:51:19,250
we've got lottery variables, which are still state variables, 
还有了 "Lottery Variables"(“抽奖变量”)，它们也是状态变量的一部分

14704
14:51:19,250 --> 14:51:22,430
we've got our events. Now it's time for our functions. Afterwards, 
我们还已经有了 "Events"(“事件”)，现在该轮到我们的 "Functions"(“函数”)了

14705
14:51:22,430 --> 14:51:26,480
we've done a little bit of natspec, at least on our check upkeep. 
我们已经在这一部分写了一些 natspec 了，至少在 "checkUpkeep" 这里是的

14706
14:51:26,480 --> 14:51:29,360
If you want to add some more natspec on things like enter, raffle, perform upkeep, etc, 
如果你想要添加一些更多的 natspec 比如说 "enterRaffle", "performUpkeep" 等等

14707
14:51:29,360 --> 14:51:32,600
you can absolutely do so. And then down at the bottom, we have our views slash pure getter functions. 
当然是可以这样做的，先拉到下面，我们有一些 "View / Pure" 类型的 "getter" 函数

14708
14:51:32,600 --> 14:51:35,720
Let's see, do we want any other getter functions here? 
我们看一下，还需要别的 "getter" 函数么？

14709
14:51:35,720 --> 14:51:38,720
Well, we probably want to give people the chance to get a raffle state. 
我们应该还需要为人们提供一个获取抽奖状态的方法

14710
14:51:38,720 --> 14:51:41,540
So we'll do function, get raffle state, this will be a public, you returns a raffle state. 
所以创建一个 `function getRaffleState() public view returns (RaffleState)`

14711
14:51:41,540 --> 14:51:43,760
We'll say return s underscore raffle state, 
接着是 `return s_raffleState` 

14712
14:51:43,760 --> 14:51:50,270
we probably want to give people the chance to get the number of words. 
我们还需要给人们提供一个获取随机数数量的方法

14713
14:51:50,810 --> 14:51:57,440
And this is going to be a little bit interesting here
这件事其实还挺有意思的

14714
14:51:57,440 --> 14:52:00,080
running. So if we do function, get num words, public view returns, you went to the six 
开始吧 `function getNumWords() public view returns(uint256)`

14715
14:52:00,080 --> 14:52:03,020
return num words, you'll see something interesting happened here. 
`return NUM_WORDS` 你将会看到一些有趣的事发生

14716
14:52:03,290 --> 14:52:09,890
We pull up our compiler and run hh compile. 
我们打开编译器，运行 `hh compile`

14717
14:52:10,010 --> 14:52:15,380
Hopefully everything works here. 
希望一切运行正常

14718
14:52:15,380 --> 14:52:19,640
Oh, and everything doesn't work because I didn't import this correctly. 
哦，并没有正常运行，因为这里的导入不正确

14719
14:52:19,970 --> 14:52:24,260
Let's fix that. Let's try again. 
把它改正，再试一次

14720
14:52:24,260 --> 14:52:27,890
Oh, there's a couple things I missed. Let's fix es players.
哦，这里还有一些错误，把它改成 `s_players` 

14721
14:52:28,250 --> 14:52:30,470
This is why it's good to compile as you code  
这就是为什么最好要在编写代码的时候多进行编译

14722
14:52:31,520 --> 14:52:35,150
as players dot length. Let's try again. 
改成 "players.length" 再试一次

14723
14:52:35,240 --> 14:52:37,760
And I spelt interval wrong. 
"interval" 拼错了（笑）

14724
14:52:37,760 --> 14:52:42,320
I underscore inter vol strike to compile again, 
`i_interval` 再编译一次

14725
14:52:42,320 --> 14:52:47,420
see how many more spelling mistakes I made. And there it is. 
看一下还有没有其它拼写错误，是有的

14726
14:52:47,420 --> 14:52:51,560
I underscore in error go to paste that 
`i_in` 错误在这，粘贴上去

14727
14:52:51,800 --> 14:52:56,270
and we do get another error here. 
这里还有另外一处错误

14728
14:52:56,270 --> 14:52:59,210
Invalid type for argument in a function call 
函数调用中的参数类型无效

14729
14:52:59,210 --> 14:53:02,300
invalid implicit conversion from literal string to bytes called data requested. 
从字面字符串 "" 到 "bytes calldata" 的请求存在无效的隐式转换

14730
14:53:02,300 --> 14:53:06,020
Since we're passing this empty string here. And checkup keep needs a call data 
这是由于我们在这里传入了一个空字符串，而 "checkUpkeep" 需要的是一个 calldata

14731
14:53:06,020 --> 14:53:09,140
called data actually doesn't work with strings. 
calldata 不能使用字符串

14732
14:53:09,140 --> 14:53:12,590
So we need to make this bytes memory instead. And our compiler is now happy with us. 
所以我们需要把这里替换为 `bytes memory`，这下我们的编译应该可以通过了

14733
14:53:12,590 --> 14:53:15,650
And I spell it the timestamp wrong. That's a lowercase s 
这里的 "timestamp" 拼错了，应该是小写的 "s"

14734
14:53:15,650 --> 14:53:19,820
so and you might see some squiggles here on Check upkeep, 
你可能会注意到 "checkUpkeep" 这里有一些波浪线

14735
14:53:20,000 --> 14:53:23,210
we could make this a view function since we're not actually modifying any state. 
我们可以把它变成一个 "view" 函数，因为我实际上并没有修改任何状态

14736
14:53:23,210 --> 14:53:26,210
But I want to keep it public for reasons I'll show you a little bit later. 
但我仍然会把它设置为 public，原因我稍后会向你展示

14737
14:53:26,210 --> 14:53:29,330
But finally we get the the yellow squiggly that I was looking for here. 
最终我们还是得到了这些黄色的波浪线

14738
14:53:29,330 --> 14:53:32,360
And if we run hh compile, we should see a warning in our compiler as well.
如果我们运行 `hh compile`，应该会在编译器里看到这些警告

14739
14:53:32,360 --> 14:53:37,100
Okay, so we see all those yellow squigglies here. 
好的，我们在这里看到了所有的黄色波浪线

14740
14:53:37,220 --> 14:53:39,950
Unnamed return variable can remain unassigned. 
未命名的返回变量可以保持未分配状态

14741
14:53:39,950 --> 14:53:43,490
We need this bytes memory in here because that's what the keepers are looking for. 
我们需要保留这个 "bytes memory" 因为这是 Keepers 所需要的

14742
14:53:43,490 --> 14:53:46,250
Morning function state mutability can be restricted to view for our function checkup key. 
警告：函数的状态可变性可限制为 "view"，说的是我们的函数 "checkUpkeep"

14743
14:53:46,280 --> 14:53:49,310



14744
14:53:49,310 --> 14:53:52,520
You can make a view if you want, but I'm


14745
14:53:52,520 --> 14:53:54,890
going to keep it public for reasons I'll show you a little


14746
14:53:54,890 --> 14:53:58,160
bit later. And finally, function state mutability can be


14747
14:53:58,160 --> 14:54:01,880
restricted to pure this is what I wanted to show you since num


14748
14:54:01,880 --> 14:54:05,420
words is actually in the bytecode, since it's a constant


14749
14:54:05,420 --> 14:54:08,570
variable technically isn't reading from storage, and


14750
14:54:08,570 --> 14:54:13,250
therefore this can be a pure function. Returning num words


14751
14:54:13,280 --> 14:54:16,250
doesn't actually read in storage, it literally will go


14752
14:54:16,280 --> 14:54:20,900
and read the number one. So doing get num words in solidity


14753
14:54:20,930 --> 14:54:23,600
with num words being a constant variable, it's going to


14754
14:54:23,600 --> 14:54:27,110
literally be the exact same as saying get one and we would


14755
14:54:27,110 --> 14:54:29,450
return one here, we might also want to get the number of


14756
14:54:29,450 --> 14:54:34,100
players. So we'll create a function get number of players.


14757
14:54:35,510 --> 14:54:42,140
And this will be a public view, returns a un 256. Turn s


14758
14:54:42,140 --> 14:54:47,840
underscore players dot length. We're also probably going to


14759
14:54:47,840 --> 14:54:51,590
want the latest timestamp. So we'll do function get latest


14760
14:54:51,860 --> 14:54:58,610
timestamp. public view returns you in 256. And we're just going


14761
14:54:58,610 --> 14:55:05,270
to return s underscore last timestamp. And maybe we'll want


14762
14:55:05,270 --> 14:55:09,020
to do request confirmation. So we'll do function GET request


14763
14:55:09,380 --> 14:55:14,270
confirmations. Public pure since request confirmations is also a


14764
14:55:14,270 --> 14:55:19,790
constant function returns you went to you went to 56 Turn


14765
14:55:20,060 --> 14:55:25,430
request confirmations. All right, we've got some wonderful


14766
14:55:25,430 --> 14:55:28,940
getters here. Some views slash pure functions, we have a way to


14767
14:55:28,940 --> 14:55:32,870
get a random number we have a way in a decentralized context.


14768
14:55:33,080 --> 14:55:36,500
Automatic automatically execute. picking a random winner we have


14769
14:55:36,500 --> 14:55:40,340
a way for people to enter our raffle to enter this lottery.


14770
14:55:40,550 --> 14:55:46,340
And we have a bullet proof way to solve creating a truly fair


14771
14:55:46,370 --> 14:55:50,180
decentralized lottery. Oh my goodness. Let's do one more


14772
14:55:50,180 --> 14:55:54,380
compile for good measure H H compile. And these are just


14773
14:55:54,380 --> 14:55:57,560
warnings. So we're good to go here. Our code is compiling


14774
14:55:57,590 --> 14:56:03,620
successfully. 