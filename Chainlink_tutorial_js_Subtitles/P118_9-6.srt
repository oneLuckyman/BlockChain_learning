14018
14:09:51,440 --> 14:09:56,540
So we're going to create our function here called pick a random winner, 
现在我们要在这里把这个函数创建出来，名为 `pickRandomWinner`

14019
14:09:56,660 --> 14:09:59,150
this function is going to be called by the chain link keepers network 
这个函数将被 "Chainlink Keepers" 网络所调用

14020
14:09:59,150 --> 14:10:01,670
so that this can automatically run without us having to interact with it. 
这样它就可以自动运行而无需我们手动干预

14021
14:10:01,700 --> 14:10:04,490
And actually, while we're updating this, I want to add some some stars here 
不过，在我们更新这部分时，我想先在这里添加一些星号

14022
14:10:04,490 --> 14:10:07,340
saying view slash pure functions. 
注明一下 `/* View / Pure functions */

14023
14:10:07,340 --> 14:10:11,660
Now our pick random winner function, we're actually not going to make public we're going to make external, 
对于我们的 "pickRandomWinner" 函数，我们并不打算将其设置成 "public" 的，而是设置为 "external" 的

14024
14:10:11,660 --> 14:10:13,670
external functions are a little bit cheaper than public functions. 
"external" 函数会比 "public" 函数略微便宜一点

14025
14:10:13,670 --> 14:10:16,940
Because solidity knows that our own contract can call this, 
这是因为 Solidity 知道，只有我们自己的合约才能调用这个函数

14026
14:10:16,940 --> 14:10:19,670
we're actually going to change the name of this function, as well, very soon, but we'll get to that in a little bit. 
实际上，我们很快就会更改这个函数的名字，稍后我们再细说

14027
14:10:19,670 --> 14:10:22,250
So in order for us to pick a random winner, we actually have to do two things, 
所以，为了选出来一个随机的优胜者，我们实际上需要做两件事

14028
14:10:22,250 --> 14:10:25,130
we first have to request the random number. And then once we get it, do something with it. 
首先我们要请求随机数，然后一旦我们获得了随机数，就要用它做点什么

14029
14:10:25,130 --> 14:10:27,500
So chainlink VRF is a two transaction process. And this is actually intentional. 
因此 Chainlink VRF 包含两个交易过程，并且这是刻意为之的

14030
14:10:27,500 --> 14:10:30,500
Having random numbers in two transactions is actually also much better than having it in one. 
将随机数分为两个交易实际上要比只有一个交易要好得多

14031
14:10:30,560 --> 14:10:34,190
If it's just one transaction, then people could just brute force tries simulating calling this transaction and we'll learn how to simulate calls soon 
如果只有一个交易，人们就可以通过暴力尝试模拟调用这个交易，稍后我们会学习如何进行模拟调用

14032
14:10:34,190 --> 14:10:38,330
simulate calling these transactions to see what they can manipulate to make sure that they are the winner. 
模拟调用这些交易可以让他们查看自己能够操纵哪些内容，以确保自己能够成为优胜者

14033
14:10:38,330 --> 14:10:42,470
We want to make sure that this is absolutely fair.
我们要确保这个抽奖是绝对公平的

14034
14:10:42,470 --> 14:10:45,590
Nobody can manipulate our smart contract into having them be the winner of the lottery, 
不能让任何人通过操纵我们的智能合约，来使自己成为彩票赢家

14035
14:10:45,620 --> 14:10:48,380
this function is actually going to request it. 
这个函数会发起请求，

14036
14:10:48,380 --> 14:10:51,140
And then in a second func the random number is going to be returned. 
第二个函数将返回随机数

14037
14:10:51,140 --> 14:10:53,900
And in the transaction that we actually get the random number from the chain link network, 
然后在交易中，当我们从 Chainlink 网络中获取到随机数后

14038
14:10:53,900 --> 14:10:56,810
that's when we're going to actually send the money to the winner. 
我们才会实际给优胜者发送奖金

14039
14:10:56,810 --> 14:10:59,030
And if we go to the chain link documentation, the function that the chain link node calls is this function called fulfill random words, 
如果我们查看 Chainlink 的文档，会发现 Chainlink 节点所调用的是一个名为 "fulfillRandomWords" 的函数

14040
14:10:59,030 --> 14:11:01,700
this is going to be the requesting one, which we could even change this to request random winner to make it more clear, 
这个函数是发起请求的那一个，所以我们甚至可以把它改成 `requestRandomWinner`，使其更清晰一些

14041
14:11:01,730 --> 14:11:05,240
and then we'll make a function fulfill random words.
然后我们再创建一个函数 `fulfillRandomWords()`

14042
14:11:05,240 --> 14:11:07,880
And this is going to be an internal override, which we'll explain in a little bit, 
这个是一个 "internal override" 的函数，我们稍后会解释这是什么意思

14043
14:11:07,880 --> 14:11:10,850
now fulfill fulfill random words basically means we're fulfilling random numbers. 
"fulfillRandomWords" 基本上就是填充随机数的意思

14044
14:11:10,850 --> 14:11:13,640
The word comes from a computer science terminology, 
这个词的来源是一个计算机科学的术语

14045
14:11:13,640 --> 14:11:16,760
but you can basically just think of this as fulfill random numbers, because we can get multiple random numbers. 
但你基本上就可以将其理解为填充随机数的意思，因为我们可以从这获取多个随机数

14046
14:11:16,760 --> 14:11:19,460
Now in order to make our raffle contract VRF a bowl, we have to import the chain link code, 
现在，为了让我们的 "Raffle" 合约具备 VRF 功能，我们必须导入 Chainlink 的代码

14047
14:11:19,460 --> 14:11:21,830
we can go back to the documentation, and we're just going to grab this bottom line and we'll grab the top line in a second. 
我们回到文档，直接获取下面这一行，上面那一行要等一会儿再获取

14048
14:11:21,830 --> 14:11:24,710
So we're going to do import, I'm going to write it out. But if you want to copy paste, you can 
因此我要执行 `import`，我会亲自写，但你可以选择直接复制粘贴

14049
14:11:24,770 --> 14:11:27,080
at chain link slash contracts slash SRC slash V 0.8, slash V RF, consumer base, b two dot Sol. 
`@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol`

14050
14:11:27,080 --> 14:11:30,200
And since we're importing at chainlink, slash contracts, 
由于我们正在导入 "@chainlink/contracts"

14051
14:11:30,200 --> 14:11:35,330
we're gonna need to add that in by running yarn, add dash dash dev at chainlink slash contracts. 
所以我们需要把它们添加进来，运行 `yarn add --dev @chainlink/contracts`

14052
14:11:36,080 --> 14:11:38,900
And now that we have this in here, we should be able to import like so. 
现在我们已经添加好了，应该可以这样导入了

14053
14:11:38,900 --> 14:11:42,380
And we're going to need to make our raffle VRF consumer base double, 
我们还需要让我们的 "Raffle" 具备 "VRFConsumerBase" 的功能

14054
14:11:42,380 --> 14:11:45,620
we're gonna need to inherit VRF consumer base 
这就需要我们继承 "VRFConsumerBase"

14055
14:11:45,620 --> 14:11:47,780
go into our node modules at chain link src, V 08 VRF, consumer base V two, 
前往 "node_modules/@chainlink/src/v0.8/VRFConsumerBaseV2"

14056
14:11:47,780 --> 14:11:50,570
it comes with this function fulfill random words. 
"fulfillRandomWords" 就在这里

14057
14:11:50,570 --> 14:11:53,150
And you can see it's an internal virtual function, 
可以看到，这是一个 "internal virtual" 函数

14058
14:11:53,150 --> 14:11:57,140
virtual means it's expecting to be overwritten, 
"virtual" 意味着它预期会被“重写”("Overwritten")

14059
14:11:57,140 --> 14:11:59,690
the reason that it's in the sphere of consumer base V two 
"VRFConsumerBaseV2" 中之所以要这么做

14060
14:11:59,690 --> 14:12:02,930
is so that the VRF coordinator, which we'll use in a bit knows that it can call this fulfill random words function. 
是为了让我们之后会用到的 "vrfCoordinator" 知道，它可以调用这一个 "fulfillRandomWords" 函数

14061
14:12:02,930 --> 14:12:06,350
And this is the function that we're overriding. 
这个函数就是被我们重写的那个函数

14062
14:12:06,350 --> 14:12:09,140
So back in our raffle dot salt, we're going to inherit it by doing is VRF consumer base V two. 
回到我们的 "Raffle.sol"，我们让它继承自 "is VRFConsumerBaseV2"

14063
14:12:09,170 --> 14:12:15,950
And now if we scroll down to fulfill random words, we can add in the input parameters fulfilled pill random words,
现在，如果我们往下拉到 "fulfillRandomWords"，可以为它添加一些输入参数

14064
14:12:15,980 --> 14:12:20,420
which are going to be un 256, Request ID and un 256, a memory array random words. 
它们是 `uint requestId, uint256[] memory randomWords`

14065
14:12:20,420 --> 14:12:23,570
And if we hit Save Our linter will now notice, okay, this is what I'm expecting, 
如果我们点击保存，代码检查器现在就会注意到，“OK，这是我想要的”

14066
14:12:23,570 --> 14:12:28,700
I'm expecting us to override the Fill random words, which takes these parameters. 
我想要的是，重写这个 "fulfillRandomWords"，并接收这些参数

14067
14:12:29,810 --> 14:12:32,720
Now if we look in our docs in our constructor, we need to pass the VRF consumer base V TOS constructor and pass that VRF coordinator. 
现在，看一下我们的文档，在我们的构造函数中，我们需要传入 "VRFConsumerBaseV2"，并为其传入 "vrfCoordinator"

14068
14:12:32,720 --> 14:12:36,380
Again, this V RF coordinator is the address of the contract that does the random number verification. 
提醒一下，这个 "vrfCoordinator" 是一个负责随机数验证的合约的地址

14069
14:12:36,380 --> 14:12:39,980
So right next to our constructor will add the VRF consumer base V to constructor 
所以下一步，我们的构造函数要加上 "VRFConsumerBaseV2"

14070
14:12:39,980 --> 14:12:46,160
and we need to pass the VRF coordinator v2 address. 
并且我们还需要为其传入 "vrfCoordinator" 的地址

14071
14:12:46,160 --> 14:12:50,360
So in our main constructor, we'll add that as a parameter as well. 
所以在我们的构造函数内部，也要添加上这个参数

14072
14:12:50,390 --> 14:12:54,740
So we'll say address VRF core to Nate Torre v two, and then we'll pass this as a parameter for the VRF consumer basically till 
`address vrfCoordinator` 然后我们再把它作为参数输入进 "VRFConsumerBaseV2"

14073
14:12:54,770 --> 14:12:57,200
now that we have that we shouldn't see that little underscore anymore. 
现在我们应该就不会再看到那条小下划线了

14074
14:12:57,200 --> 14:13:00,410
And we should be able to run yarn aren't had compiled. 
并且我们应该可以运行 `yarn hardhat compile`

14075
14:13:00,410 --> 14:13:03,380
Awesome. And we can see compiled two files successfully and our code is working great. 
非常好，我们看到两个文件编译成功，我们的代码运行得非常好
("Compiled 2 Solidity files successfully")