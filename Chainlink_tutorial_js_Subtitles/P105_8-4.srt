12692
12:50:12,790 --> 12:50:15,730
So the title, of course, is going to be the Funmi app, 
标题当然就是 "Fund Me App"

12693
12:50:15,730 --> 12:50:19,180
which we see up here in the title section. 
我们可以在这里的标题部分看到它

12694
12:50:19,210 --> 12:50:22,270
So let's update this HTML, so that it has those buttons, 
让我们来更新一下这个 HTML，让它拥有那些按钮

12695
12:50:22,270 --> 12:50:25,210
and it can actually connect and work with our blockchain and work with any blockchain. 
这样它才能连接和使用我们的区块链以及任何区块链

12696
12:50:25,210 --> 12:50:27,910
Something else that you can do in HTML is you can actually write JavaScript inside your HTML. 
其实你可以直接在 HTML 里面写 JavaScript 

12697
12:50:27,910 --> 12:50:31,660
And the way we can do that is by doing this script tag, 
要想做到这一点，需要执行 `<script>`

12698
12:50:31,660 --> 12:50:35,440
and then we'll do a closing script tag. 
接着要闭合它 `</script>`

12699
12:50:35,440 --> 12:50:39,490
And anything inside here inside of our script tags is going to be JavaScript. 
在 "<script>" 标签内部的所有内容都是 JavaScript

12700
12:50:39,490 --> 12:50:42,910
So I could do something like 
所以我们可以这样做

12701
12:50:42,970 --> 12:50:46,390
console dot log, hi, with a bunch of exclamation marks, I'm going to save it. 
`console.log("Hi!!")，写一些感叹号，接着保存它

12702
12:50:46,390 --> 12:50:49,600
We'll go back to our front end, we're going to right click, we'll hit Inspect, 
我们回到前端，点击右键，选择“检查”("Inspect")

12703
12:50:49,600 --> 12:50:53,320
we'll go to the console. And we can see that Hi prints it out, 
前往“控制台”("Console")，接着我们可以看到 "Hi" 被打印了出来

12704
12:50:53,320 --> 12:50:56,380
we refresh, we can see the hi consistently printed out 
当我们刷新页面时，就可以看到 "Hi" 被持续打印出来

12705
12:50:56,380 --> 12:51:00,730
hi from script tag, we'll save it, 
"Hi from script tag!"，保存一下

12706
12:51:00,730 --> 12:51:04,000
we'll move back, we see hi from script tag printed out. 
回到前端，我们看到 "Hi from script tag!" 被打印了出来

12707
12:51:04,000 --> 12:51:08,680
I know it's a little bit small. So let me zoom in. Alright, great. 
这里有点小，我来放大一下，很好

12708
12:51:08,740 --> 12:51:12,220
So we can type our JavaScript in here, 
所以，我们可以在这里输入 JavaScript 代码

12709
12:51:12,220 --> 12:51:14,740
it's inside the script tag is where we're going to write our JavaScript to write the functions that 
在 "<script>" 标签内部编写 JavaScript 函数

12710
12:51:14,740 --> 12:51:17,830
our front end is going to interact with. 
用它们来与前端进行交互

12711
12:51:17,830 --> 12:51:21,670
Now, as we saw before, in this little console, we can check for window dot Etherium, 
就像我们之前见到过的，在这个小控制台("Console")中，我们可以使用 "window.ethereum" 进行检查

12712
12:51:21,700 --> 12:51:26,230
to see if Metamask or is installed. 
来查看是否安装了 MetaMask

12713
12:51:26,230 --> 12:51:28,300
And again, a lot of what we're working with is actually right in the Metamask documentation. 
再次重申，我们使用到的很多东西其实都在 MetaMask 的文档里有

12714
12:51:28,300 --> 12:51:31,840
If you go to their basic section, 
如果你前往他们的基础部分

12715
12:51:31,840 --> 12:51:34,450
they talk a little bit about the provider, 
他们会谈论一些关于 "Provider" 的内容

12716
12:51:34,450 --> 12:51:37,750
which is this window dot Aetherium, 
正是这个 "window.ethereum"

12717
12:51:37,750 --> 12:51:41,020
you can read how to actually interact directly with meta mask in the meta mask documentation as well. 
你也可以在 MetaMask 的文档中读到直接与 MetaMask 进行交互的方法

12718
12:51:41,020 --> 12:51:43,360
Now using window dot Aetherium is just one of the ways we're actually going to connect to the blockchain, 
使用 "window.ethereum" 只是我们连接区块链的方式之一

12719
12:51:43,360 --> 12:51:46,000
there's actually multiple ways
实际上还有很多其它方式

12720
12:51:46,000 --> 12:51:48,010
because there's multiple different kinds of wallets out there. 
因为还有很多其它种类的钱包存在

12721
12:51:48,010 --> 12:51:50,680
But for now, we're just going to pretend that window dot Aetherium and meta mask is the only extension out there. 
但现在，我们只假设 "window.ethereum" 和 MetaMask 就是唯一的扩展

12722
12:51:50,680 --> 12:51:54,070
So what we want to do is we want to check to see if this wind of that Aetherium exists. 
所以我们要做的就是检查这个 "window.ethereum" 是否存在

12723
12:51:54,070 --> 12:51:56,710
This is the first thing that we should be doing. 
这是我们应该做的第一件事

12724
12:51:56,710 --> 12:51:59,530
Because if this doesn't exist, this means that they can't connect to the blockchain, 
因为，如果它不存在，那就意味着它们无法连接到区块链上

12725
12:51:59,530 --> 12:52:02,320
one of the first things that we're going to want to do 
所以我们要做的第一件事就是

12726
12:52:02,350 --> 12:52:04,180
is we're going to want to check to see if that exists. 
要检查它是否存在

12727
12:52:04,180 --> 12:52:06,430
So we can do something like if we can say type of window that Aetherium does not equal, undefined. 
我们可以这样做 `if (typeof window.ethereum !== "undefined")

12728
12:52:06,430 --> 12:52:10,750
Then we'll do console dot log, I see a meta mask. 
接着是 `console.log("I see a metamask!")`

12729
12:52:10,750 --> 12:52:16,690
So now if we save, we come back to our front end, 
现在，如果我们保存，返回前端

12730
12:52:17,110 --> 12:52:23,800
we do see I see a Metamask. 
我们确实看到了 "I see a metamask!"

12731
12:52:23,800 --> 12:52:27,970
I've got a Google Chrome up without Metamask that
我有一个没安装 MetaMask 的 Google Chrome 浏览器

12732
12:52:27,970 --> 12:52:31,450
if we look in the console, and we hit refresh 
如果我们看一下控制台("Console")并点击刷新

12733
12:52:31,450 --> 12:52:35,680
it the same URL where our live server is running. 
这和我们的 "Live Server" 运行的是同一个 URL 

12734
12:52:35,680 --> 12:52:39,130
We don't see that I see a meta mask 
我们没有看到 "I see a metamask!"

12735
12:52:39,130 --> 12:52:42,550
because it doesn't see a meta mask. 
因为它确实没见到 MetaMask

12736
12:52:43,450 --> 12:52:49,090
We can do else. console dot log, no Metamask 
我们可以这样 `else {console.log("No metamask!")}

12737
12:52:49,090 --> 12:52:51,670
refresh, we still see ICD a meta mask where we have a meta mask. 
刷新，我们还是可以在有 MetaMask 的浏览器看到 "I see a metamask!"

12738
12:52:51,670 --> 12:52:54,940
You don't have to open up a browser without one 
你倒是不必非得打开一个没有 MetaMask 的浏览器

12739
12:52:54,940 --> 12:52:57,730
but we see no meta mask for Chrome because it doesn't see a meta mask. 
但我们可以在 Chrome 浏览器中看到 "No metamask!"，因为它并没有看到 MetaMask 

12740
12:52:57,760 --> 12:53:02,080
Now what we could do is We can automatically try to connect to meta mask 
现在我们可以尝试自动连接到 MetaMask

12741
12:53:02,080 --> 12:53:04,960
if we see that there is a meta mask, right? 
如果我们看到这里有 MetaMask 的话，对吧？

12742
12:53:04,960 --> 12:53:07,150
Remember how before, 
还记得之前怎么做的么

12743
12:53:07,150 --> 12:53:10,420
when we hit that connect button meta mask popped up and said, Are you sure you want to connect? 
当我们点击 "Connect" 按钮时 MetaMask 会弹出来，并询问你是否要进行连接

12744
12:53:10,420 --> 12:53:13,870
So what we can do is, and you can, again, 
所以我们该怎么做，再提醒一下

12745
12:53:13,870 --> 12:53:17,200
you can find this in the meta mask docs, we can run this eath request accounts method, 
你可以在 MetaMask 的文档找到我们要运行的这个 "eth_requestAccounts" 方法

12746
12:53:17,200 --> 12:53:22,240
which is basically going to be how we connect our Metamask. 
基本上它就是我们连接到 MetaMask 的方法

12747
12:53:22,240 --> 12:53:25,000
Now, this is specified by a new EIP 
现在，这是由一个新 EIP 进行规定的

12748
12:53:25,030 --> 12:53:27,940
and an older documentations. And in older tutorials, you might see Aetherium dot enable, 
在一些旧的文档和旧的教程中，你可能会看到 "ethereum.enable()"

12749
12:53:27,940 --> 12:53:31,840
which essentially does the exact same thing. 
它们基本上就是同一个东西

12750
12:53:31,840 --> 12:53:36,730
So what we could do here is we could say, a cerium, or excuse me, window dot Aetherium dot request. 
所以我们可以在这里说 `ethereum`，抱歉，应该是 `window.ethereum.request()`

12751
12:53:36,940 --> 12:53:43,360
And we could put method F request accounts. And we'll save that. 
我们可以在里面放入 `{method: "eth_requestAccounts"}`，我们保存一下

12752
12:53:43,360 --> 12:53:47,200
Now if we go back to our browser, we'll actually see, 
现在，如果我们返回浏览器，我们就能看到

12753
12:53:47,200 --> 12:53:50,800
you'll actually see Metamask, go ahead and pop up and say, let's connect 
你就可以看到 MetaMask 真的弹了出来，并让我们进行连接

12754
12:53:50,800 --> 12:53:54,820
so we can choose an account. And we'll hit Connect, 
我们可以选择一个账户，点击 "Connect" 

12755
12:53:54,820 --> 12:53:58,270
will automatically connect our meta mask to our website. 
它会自动把我们的 MetaMask 连接到我们的网站

12756
12:53:58,270 --> 12:54:01,030
And now if we look at our meta mask, we can see this little connected thing. 
现在看一下我们的 MetaMask，我们可以看到这么一个小的“已连接”("Connected")

12757
12:54:01,030 --> 12:54:04,510
It's saying that our account one is now connected to our website.
它说的是，我们的 Account1 已经连接到了我们的网站上

12758
12:54:04,780 --> 12:54:08,860
This means that the website can now make API calls to our meta mask, 
这意味着，这个网站可以对我们的 MetaMask 进行 API 调用了

12759
12:54:08,860 --> 12:54:12,280
we still have to be the ones to approve them. 
我们仍然需要自己批准它们

12760
12:54:12,280 --> 12:54:15,640
But it can go ahead and connect and try to run transactions, 
但它可以自行连接并尝试执行交易

12761
12:54:15,670 --> 12:54:18,310
which is awesome, which is what we want. 
很好，这正是我们想要的

12762
12:54:18,310 --> 12:54:20,890
If you want to disconnect, we can go ahead and click that little button and hit disconnect this account. 
如果你想要断开连接，可以点击这个小按钮并点击“断开此账户的链接”("Disconnect this account")

12763
12:54:20,890 --> 12:54:23,530
Well that we have our code currently is 
现在我们代码的情况是

12764
12:54:23,530 --> 12:54:25,930
anytime we hit refresh, this is going to pop up which is going to be really annoying. 
每次我们点击刷新，这个都会弹出来，真的是很烦人

12765
12:54:26,140 --> 12:54:29,440
So what we're going to do instead is 
所以我们要做的是

12766
12:54:29,440 --> 12:54:33,070
we're going to wrap this up into an asynchronous function, 
把这里封装成一个异步函数

12767
12:54:33,070 --> 12:54:35,530
the exact same as we've been doing, 
就和我们之前做的一样

12768
12:54:36,190 --> 12:54:40,330
we'll do we'll create an async function called Connect. 
我们来创建一个 `async function connect()`

12769
12:54:40,330 --> 12:54:43,570
And we'll wrap it up these curly braces here. 
并把这些内容包裹在这对花括号内

12770
12:54:43,570 --> 12:54:47,350
And then we'll just format this a little bit to make it look nicer. 
接着我们稍微调整一下格式化，让它看起来更好看一些

12771
12:54:47,410 --> 12:54:50,260
And now if we save, we go back to our website, and we refresh. And we go ahead and disconnect.
现在如果我们保存并刷新网站，然后断开连接

12772
12:54:51,550 --> 12:54:54,670
If we refresh Metamask won't keep asking us 
现在我们再次刷新，MetaMask 就不会一直再询问我们

12773
12:54:54,670 --> 12:54:56,110
Hey, do you want to connect Hey, do you want to connect here do you want to connect, 
是否要进行连接，是否要进行连接，是否要进行连接了

12774
12:54:56,110 --> 12:54:58,960
because we need to call this connect function 
因为我们还需要调用这个 "connect" 函数

12775
12:54:58,960 --> 12:55:01,960
where we can do that is we can add a little button here. 
我们可以在这里添加一个小按钮来实现这个功能

12776
12:55:01,990 --> 12:55:06,160
So right underneath our script tag, we're going to add a button tag. 
所以在我们的 "<script>" 标签下面，我们要添加一个 "<button>" 标签

12777
12:55:06,160 --> 12:55:08,950
So this is the opening button tag. And then here's the closing button tag. 
这个是 "<button>" 标签的开头，而这个是 "</button>" 标签的结尾

12778
12:55:08,950 --> 12:55:11,800
And inside the opening button tag declaration,
在这个开头的 "<button>" 标签声明内部

12779
12:55:12,040 --> 12:55:16,690
we'll give it an ID, which will be Connect button. 
我要给它一个 `id`，内容是 `connectButton`

12780
12:55:16,690 --> 12:55:23,440
And we'll say on click equals the Connect connects function. 
接着我们会说 `onclick="connect()"` 也就是 `connect()` 函数

12781
12:55:23,440 --> 12:55:25,930
And we'll call this button connect 
我们给这个按钮命名为 "Connect"

12782
12:55:25,930 --> 12:55:29,560
in between these little button tags, we'll call it connect 
在这两个 "<button>" 标签之间，我们把它称为 "Connect" 

12783
12:55:29,560 --> 12:55:32,950
will say when we click it will call the Connect function. 
当我们点击它的时候就是在调用 `connect()` 函数

12784
12:55:32,950 --> 12:55:35,320
So if we save, and we go back to our front end, 
所以如果我们保存一下，然后回到我们的前端

12785
12:55:35,620 --> 12:55:39,010
we can now see we have a little Connect button. 
现在我们可以看到一个小小的 "Connect" 按钮

12786
12:55:39,190 --> 12:55:43,930
And now if we press Connect, Metamask is going to pop up, 
现在如果我们按下 "Connect"，MetaMask 就会弹出来

12787
12:55:43,930 --> 12:55:47,950
we'll hit next and connect like that. And boom, now we are connected. 
我们点击“下一步”("Next")然后是“连接”("Connect")，嘭，现在我们已经连接上了

12788
12:55:47,980 --> 12:55:50,980
And we can even do a little await here so that we wait for this to finish before moving on. 
我们甚至可以在这里加一个 `await` 这样我们就可以等待它完成以后再继续后续操作

12789
12:55:50,980 --> 12:55:56,500
And then after we connect, we can say console dot log connected. 
然后，在我们连接上以后，我们可以说 `console.log("connected")

12790
12:55:56,500 --> 12:55:59,650
So let's actually go ahead and test this out, we'll go back to Metamask. we'll disconnect here, 
让我们来实际测试一下，回到 MetaMask 断开连接

12791
12:55:59,680 --> 12:56:03,730
try to never be on Main net if we don't have to be. 
如果没有必要，尽量不要使用主网络

12792
12:56:03,730 --> 12:56:07,510
And let's go ahead run connect, we'll hit Next connect.
让我们继续，运行 "Connect" 点击“下一步”("Next")，“连接”("Connect")

12793
12:56:07,720 --> 12:56:10,270
And now we see a little console dot log come out saying connected. Okay, great. 
现在我们看倒，一个小的 "console.log" 出来说 "connected"，OK 很好

12794
12:56:10,300 --> 12:56:13,660
We can also update our website accordingly. 
我们可以相应地更新我们的网站

12795
12:56:13,660 --> 12:56:16,870
So that we can let users know that we're connected.
这样我们就能让用户知道，我们已经连接上了

12796
12:56:17,110 --> 12:56:20,950
So we can grab the connect button element ID 
所以我们可以获取这个 "Connect" 按钮的元素 "ID"

12797
12:56:20,950 --> 12:56:24,220
and say that we're connected once we're connected. 
并且一旦连接成功，就说我们已经连接上了

12798
12:56:24,220 --> 12:56:30,370
So after we await to be connected, we can go ahead and do document dot get element by ID Connect button. 
所以在我们等待连接完成之后，我们可以执行 `document.getElementById("connectButton")

12799
12:56:30,940 --> 12:56:38,380
And then we'll say dot inner HTML equals connected like that. 
接着是 `.innerHTML = "Connected!"`

12800
12:56:39,220 --> 12:56:42,730
And then instead of saying no minimize down here, we'll do just the opposite. 
然后，这里就不再说 "No metamask" 了，我们要在这做相反的事

12801
12:56:42,730 --> 12:56:45,700
So we'll copy this line. 
所以我们复制这一行

12802
12:56:45,700 --> 12:56:51,280
And instead of connected, we'll say please install meta mask. 
替换掉 "Connected!"，我们说 "Please install metamask!"

12803
12:56:51,280 --> 12:56:55,630
And we'll save we'll go back to our front end, we'll hit connect. 
保存一下，然后回到前端，点击 "Connect"

12804
12:56:55,630 --> 12:56:58,780
And now if we're already connected, it'll just automatically go to connected. 
现在，如果我们已经连接过了，这里就会自动连接

12805
12:56:58,780 --> 12:57:01,150
If we're not connected, it'll pop up, we'll get connected. 
如果我们还没有连接，它就会弹出来，提示我们进行连接

12806
12:57:01,150 --> 12:57:03,550
And now we have this button that says connected, which is great. 
现在我们的按钮就会说 "Connected!"，非常好

12807
12:57:03,550 --> 12:57:06,700
So now we already know that we're connected. 
现在我们就知道我们已经连接成功了

12808
12:57:06,700 --> 12:57:12,790
So we've connected our Metamask to our front end. 
所以，我们已经把 MetaMask 连接到我们的前端上了

12809
12:57:12,790 --> 12:57:15,370
Now we want to actually go ahead and do some functions here. 
现在我们想要继续实现更多功能

12810
12:57:15,370 --> 12:57:18,010
And this is where we want to create some more functions and some more buttons 
这里就是我们要创建更多函数和按钮的地方

12811
12:57:18,010 --> 12:57:21,310
that are going to use ethers that package that we become so familiar with. 
这些函数和按钮将使用我们非常熟悉的 ethers 包

12812
12:57:21,370 --> 12:57:24,670
Now, as we code, 
现在，随着我们编写代码

12813
12:57:24,670 --> 12:57:27,790
our script section is going to get bigger and bigger and bigger. 
我们的 "<script>" 部分将会变得越来越大

12814
12:57:27,790 --> 12:57:31,240
So oftentimes, we actually want to put our code in a JavaScript file itself. 
因此实际上，我们往往会将代码放在一个独立的 JavaScript 文件中

12815
12:57:31,270 --> 12:57:34,270
So we're gonna go ahead, come over here, we're going to create a new file, 
所以我们继续，来这里，创建一个新文件

12816
12:57:34,270 --> 12:57:37,270
and we'll call it index dot j s. 
我们称它为 "index.js"

12817
12:57:37,330 --> 12:57:42,370
And instead of putting our JavaScript in these script tags, 
我们不会再把 JavaScript 代码都放到这里的 "<script>" 标签里了

12818
12:57:42,400 --> 12:57:46,360
we're going to put it in this index and then import this index file into our HTML. 
而是会放到这个 "index" 文件里，并将它导入到我们的 HTML 中

12819
12:57:46,390 --> 12:57:49,180
And the way that we're going to do that 
实现这个操作的方法是

12820
12:57:49,180 --> 12:57:51,580
is we're actually just going to grab this function.
我们先获取这里的函数

12821
12:57:52,360 --> 12:57:55,600
We're going to copy it, delete everything for now. 
把它复制下来，暂时先删掉这些内容

12822
12:57:55,600 --> 12:57:59,860
We're going to paste it into our end ext dot j s, 
然后粘贴到我们的 "index.js" 里来

12823
12:57:59,860 --> 12:58:05,890
and then in our index dot HTML, we're just going to tell our script tag to use index.js.
接着在我们的 "index.html" 里，直接让我们的 "<script>" 标签使用 "index.js"

12824
12:58:06,550 --> 12:58:10,240
So we're just going to say the source is going to be equal to dot slash index dot j s. 
所以这里要这么写 `src="./index.js"`

12825
12:58:10,270 --> 12:58:16,600
And then we're going to say, the type of this is going to be text slash JavaScript. 
接下来的内容是 `type="text/javascript"`

12826
12:58:16,600 --> 12:58:21,550
Now if we save that, and we save our index dot HTML, 
现在，我们保存一下我们的 "index.html"

12827
12:58:21,550 --> 12:58:25,150
we come back to our front end, we do a little refresh. 
回到我们的前端，稍微刷新一下

12828
12:58:25,150 --> 12:58:28,720
And we make sure that we go ahead and disconnect. 
并且确保我们是断开连接的状态

12829
12:58:29,320 --> 12:58:34,210
And we do another refresh, we can see 
再刷新一次，我们可以看到

12830
12:58:34,240 --> 12:58:38,740
that even with our index.js in a different file, 
即使我们的 "index.js" 是在一个不同的文件中

12831
12:58:38,740 --> 12:58:42,490
because we're doing src equals index.js, and we're importing it into our HTML, 
因为我们执行了 `src = index.js`，把它导入了我们的 HTML 中

12832
12:58:42,490 --> 12:58:46,120
when we hit Connect, it still calls our Connect function. 
所以当我们点击 "Connect" 的时候，它仍然会调用我们的 `connect()` 函数

12833
12:58:46,120 --> 12:58:49,900
That's how we can kind of separate our JavaScript into its own js file 
这样我们就可以将我们的 JavaScript 代码分离到一个独立的 JS 文件中

12834
12:58:49,900 --> 12:58:52,720
that we're a little bit more familiar with. 
这样的方式会让我们感到更加熟悉

12835
12:58:52,780 --> 12:58:55,000
Now, if you look in the GitHub repo associated with this course, 
现在，如果你查看一下课程关联的 GitHub 仓库

12836
12:58:55,000 --> 12:58:58,570
and you look in the index dot j s, 
并查看一下 "index.js" 

12837
12:58:58,570 --> 12:59:01,360
you'll see our Connect function, we've added some quality of life stuff,
你会看到我们的 "connect()" 函数添加了一些优化的内容

12838
12:59:01,720 --> 12:59:05,230
we've added some try catches just to make handling errors a little bit better, 
我们添加了一些 `try-catch` 语句，为了能够更好地处理错误情况

12839
12:59:05,230 --> 12:59:08,020
you can go ahead and add those try catches in yourself if you'd like. 
如果你想的话，可以自行添加这些 `try-catch` 语句

12840
12:59:08,020 --> 12:59:10,630
But I'm not going to demo them in this video here. 
但我就不在视频里做演示了