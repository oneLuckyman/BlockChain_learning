14114
14:15:27,500 --> 14:15:33,410
So now we need to actually have our request random winner function requests a random winner. 
现在我们就需要实际用我们的 "requestRandomWinner" 函数来请求一个随机的优胜者了

14115
14:15:33,410 --> 14:15:36,560
So let's go back to the documentation. And we'll see how to do that. 
让我们回到文档，看一下该怎么做

14116
14:15:36,560 --> 14:15:38,840
We can look at this function request random words and see exactly how it works. 
我们可以看一下这个 "requestRandomWords" 函数，并了解一下它是如何运作的

14117
14:15:38,840 --> 14:15:41,900
On the Vera of coordinator address. We go ahead and call this request random words function, 
在 VRF 的 "COORDINATOR" 地址上，我们调用了这个 "requestRandomWords" 函数

14118
14:15:42,020 --> 14:15:45,920
we're going to need to call this function on the coordinator contract 
我们需要在这个 "COORDINATOR" 合约上调用这个函数

14119
14:15:45,950 --> 14:15:48,800
to get the coordinator contract. We're going to use the Vera v2 coordinator interface and the Vir of coordinator address. 
要想获取 "COORDINATOR" 合约，我们要用到 "VRFCoordinatorV2Interface" 以及 "vrfCoordinator" 的地址

14120
14:15:48,830 --> 14:15:51,500
So we're going to want to keep track of those. 
所以，我们要跟踪这些信息

14121
14:15:51,530 --> 14:15:54,380
We can do that once again in Arkansas. factor, 
我们可以再次在构造函数中完成这个操作

14122
14:15:54,380 --> 14:15:57,590
we have the address being passed to our Bureau of consumer base. Let's also keep it as a state variable for us. 
我们把这个地址传入到了 "VRFConsumerBase" 中，让我们将其也保存为状态变量

14123
14:15:57,590 --> 14:16:00,230
First, let's get the interface so we can interact with that contract, 
首先，让我们获取接口，以便与合约进行交互

14124
14:16:00,230 --> 14:16:03,140
we can import that from chain link as well 
我们同样可以从 chainlink 中把它导入进来

14125
14:16:03,170 --> 14:16:06,020
by doing import at chain link slash contracts, slash SRC slash fees 0.8, slash inter faces slash VRF cord to mentor V to interface dot Sol. 
`@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol`

14126
14:16:06,020 --> 14:16:09,020
And now that we import this interface, same as we did with price feeds, 
现在我们导入了这个接口，就和喂价的操作一样

14127
14:16:09,050 --> 14:16:11,510
we can do VRF, coordinator v2, interface VRF coordinator. 
我们可以 `VRFCoordinatorV2Interface vrfCoordinator`

14128
14:16:11,510 --> 14:16:14,810
And then we can save the sphere of coordinator using the address 
然后我们可以用这个地址来保存 "vrfCoordinator"

14129
14:16:14,810 --> 14:16:24,440
so we can say VRF coordinator equals this address VRF coordinator veto.
我们可以说 `vrfCoordinator = VRFCoordinatorV2Interface`

14130
14:16:24,830 --> 14:16:30,500
And we're just going to wrap that address around the interface so that now we can work with this VRF coordinator contract. 
接着我们把地址放到接口里，这样我们就能使用这个 "vrfCoordinator" 合约了

14131
14:16:30,500 --> 14:16:34,550
Now we're only going to set our VRF coordinator one time right in our constructor. 
我们只在构造函数中对 "vrfCoordinator" 设置一次

14132
14:16:34,550 --> 14:16:40,070
So what's the best thing that we can do here, private, immutable, you Gosh, darn. Right, 
那我们此处最好的处理方式是什么？ "private immutable" 么？你说对了，就是这样

14133
14:16:40,070 --> 14:16:44,180
let's do private, immutable, you have coordinator and we'll change the name to I underscore the ref coordinator 
让我们加上 `private immutable vrfCoordinator` 并且把名字改成 `i_vrfCoordinator`

14134
14:16:44,210 --> 14:16:48,770
so that we know that your coordinator is indeed an immutable variable. 
这样我们就知道 "vrfCoordinator" 是一个 "immutable" 变量了

14135
14:16:48,860 --> 14:16:50,810
In order to request the random word, we need to give it a number of parameters, 
为了请求随机数，我们还需要提供几个参数

14136
14:16:50,810 --> 14:16:53,810
I'm gonna go ahead and copy this line into our contract just so that we can talk about exactly what's going on with it. 
我要把这几行复制到我们的合约里，这样我们才能详细讨论其中的内容

14137
14:16:53,810 --> 14:16:56,870
And we don't need the AES Request ID. 
但我们并不需要这个 "s_requestId"

14138
14:16:56,870 --> 14:16:59,900
And instead of coordinator we're going to do I underscore fear of coordinator. 
而且这里不是 "COORDINATOR" 而是 "i_vrfCoordinator"

14139
14:16:59,900 --> 14:17:03,140
So we're going to call request random words on that VRF coordinator contract, 
所以我们就是在 "i_vrfCoordinator" 上调用 "requestRandomWords"

14140
14:17:03,140 --> 14:17:06,800
and we need to pass it the key hash or the gasoline, I prefer calling it the gas lane, 
我们需要传入 "keyHash" 或者说 "gasLane" 我更喜欢叫它 "gasLane"(“gas 通道”)

14141
14:17:06,800 --> 14:17:10,730
we go to the chain link, Doc's go to contract addresses. 
我们前往 Chainlink 的文档，然后到 "Contract Addresses"

14142
14:17:10,760 --> 14:17:13,970
And we scroll down we can see different gas lanes a different configuration parameters for different networks 
往下拉，我们可以看到在不同的网络上有不同的 "gasLane" 配置参数

14143
14:17:14,000 --> 14:17:16,640
is key hash is going to be the gasoline of the key hash, 
这个 "keyHash" 也就是 "gasLane" 的 "Key Hash" 值

14144
14:17:16,640 --> 14:17:20,120
which tells the chain link node the maximum price you're willing to pay for your guests and way 
它告诉 Chainlink 节点你所能接受的以 wei 为单位支付的最高 gas 价格

14145
14:17:20,120 --> 14:17:22,820
if for example, gas prices skyrocket, and it's going to cost you a ton of money to get that random number setting a ceiling, we'll make it so that random number doesn't come back. 
比如说，gas 价格飙升，获取随机数将花费你大量的资金，通过设定上限，我们能确保随机数不会返回

14146
14:17:22,820 --> 14:17:26,090
For us to pick a gas lane, we're probably going to want to have this gas lane or this key hash stored somewhere. 
为了我们能够获取到 "gas lane"，我们会把 "gasLane" 或者说 "keyHash" 存储到某处

14147
14:17:26,090 --> 14:17:29,270
So let's go ahead and make that a parameter of our constructor as well. And we'll save that as a state variable. 
所以让我们继续，把它也作为构造函数的一个参数，并将其保存为一个状态变量

14148
14:17:29,270 --> 14:17:32,000
So we'll do comma bytes 32, gasoline or key hash or whatever you want to call it. And then we'll make a new state variable. 
`, bytes32 gasLane` 或者 "keyHash" 或者你想怎么叫都可以，接着我们创建一个新的状态变量

14149
14:17:32,000 --> 14:17:35,150
And we're only going to set this once. So we'll make this a private, immutable. I underscore gasoline, 
我们对它只设置一次，所以创建为 `private immutable i_gasLane`

14150
14:17:35,150 --> 14:17:39,230
and then we'll say gasoline equals gasoline. 
然后我们说 `i_gasLane = gasLane`

14151
14:17:39,230 --> 14:17:42,140
So now, we can just swap this out, or I underscore gasoline.
现在，我们把这里替换成 `i_gasLane`

14152
14:17:42,140 --> 14:17:44,660
Okay, what's next, we need a subscription ID, 
好，下一个是什么，我们需要一个 "subscriptionId"(“订阅 ID”)

14153
14:17:44,660 --> 14:17:47,900
the subscription ID is going to be the subscription that we need for funding our requests. 
"subscriptionId" 是我们用于资助请求的订阅

14154
14:17:47,930 --> 14:17:50,690
There's actually a contract on chain, which we can use to fund any subscription for any of these external data or external computation bits. 
实际上它是一个链上合约，我们可以使用它来为外部数据和外部计算的订阅提供资金

14155
14:17:50,690 --> 14:17:53,450
And in this contract, there's a list of these subscriptions for people to make requests to. 
在这个合约中，有一个列表列出了这些订阅，供用户发起请求

14156
14:17:53,450 --> 14:17:57,170
So we need the ID of the subscription that we're using to request our random numbers and pay the link Oracle gas, 
所以我们需要一个用于请求随机数并支付 "Oracle gas"(“预言机 gas”)所需 Link 的订阅 ID

14157
14:17:57,200 --> 14:17:59,270
the subscription ID is probably also going to be something we're going to pass as a parameter to our lottery. 
"subscription ID" 也是我们传给彩票合约的参数之一

14158
14:17:59,270 --> 14:18:02,300
So once again, let's scroll up to our constructor, we'll add a new parameter. 
所以，让我们再次回到构造函数，添加一个新的参数

14159
14:18:02,300 --> 14:18:04,850
And our subscription ID actually doesn't need to be a un 256, it can actually be a little bit smaller with a un 64. 
实际上 "subscription ID" 并不需要用到 uint256，它可以使用更小的 uint64

14160
14:18:04,850 --> 14:18:07,940
So we'll pass a un 64 sub scription ID, we'll make a UNT 64. 
所以我们传进去一个 `uint64 subscriptionId` 再创建一个 `uint64` 

14161
14:18:07,940 --> 14:18:10,670
Since we're only going to set this once we'll make this a private, immutable. I underscore sub scription ID 
因为只设置一次所以创建为 `private immutable i_subscriptionId`

14162
14:18:10,670 --> 14:18:13,220
down here and we'll say I subscription ID equals sub subscription ID. 
拉下来，我们写 `i_subscriptionId = subscriptionId`

14163
14:18:13,430 --> 14:18:18,350
Alright, awesome. So now we can change this to our subscription ID. 
很好，现在我们把这个改成 `i_subscriptionId`

14164
14:18:18,350 --> 14:18:20,750
Okay, what's next? Request confirmations 
OK，下一个是什么？ "requestConfirmations"

14165
14:18:21,890 --> 14:18:24,050
request confirmations is a un 16, which says how many confirmations the chain link node should wait before responding. 
"requestConfirmations" 是一个 uint16，它指的是 Chainlink 节点在响应前该等待多少“确认”

14166
14:18:24,050 --> 14:18:32,810
So if you make a request, and there's only one block confirmation, maybe you don't actually send it 
如果你发起了一个请求，然后只有一个区块确认，那么你可能并不会实际发送它

14167
14:18:33,860 --> 14:18:37,070
because you don't you're afraid of some type of blockchain reorganization or something, 
因为你会担心区块链重组之类的事情

14168
14:18:38,120 --> 14:18:42,020
we're not going to worry too much about this. And we're actually just going to make this a constant of three. 
我们不会过多操心这个问题，而是会直接将其设置为常数 "3" 

14169
14:18:42,140 --> 14:18:44,900
So we're not even going to have this be per amortizable we're gonna have this one be a constant. 
因此我们不会让它参数化，而是设置为一个 "constant"

14170
14:18:44,900 --> 14:18:47,210
So we'll say a you int 16 Private constant request, confirmations equals three, 
所以我们说 `uint16 private constant REQUEST_CONFIRMATIONS = 3`

14171
14:18:47,210 --> 14:18:50,060
and we're using the capslock and underscores for our constant variables here. 
我们用大写加下划线的组合来表示常量

14172
14:18:50,060 --> 14:18:53,360
And now we'll grab request confirmations and stick it in right here. 
现在我们获取 "REQUEST_CONFIRMATIONS" 并粘贴到这里

14173
14:18:53,360 --> 14:18:56,360
What's next callback gas limit 
下一个是什么？ "callbackGasLimit"

14174
14:18:56,360 --> 14:18:59,270
callback gas limit is going to be the limit for how much gas to use for the callback request your contracts fulfill random words, 
"callbackGasLimit" 是指回调你合约的 "fulfillRandomWords" 请求时对应的 gas 使用上限

14175
14:18:59,270 --> 14:19:02,900
this sets a limit for how much computation are fulfilled random words can be
它设置了一个 "fulfillRandomWords" 能够使用的计算量上限

14176
14:19:02,900 --> 14:19:06,230
this is a good way to protect ourselves from spending way too much gas. 
这是一个防止我们消耗过多 gas 的一个很好的方式

14177
14:19:06,230 --> 14:19:09,140
If, for example, we accidentally code our contract in a way where fulfill random words is incredibly gas expensive. 
举个例子，如果我们不小心为 "fulfillRandomWords" 编写了某种很昂贵的 gas 使用方式

14178
14:19:09,140 --> 14:19:12,710
It'll block the random number from responding. 
它就会锁定随机数的响应

14179
14:19:12,710 --> 14:19:15,350
We are going to make this parameter sizable because we want to change it depending on how we code our fulfill random word. 
我们会把它设置为参数化的，因为我们会根据 "fulfillRandomWords" 的具体编写形式来对它做出改变

14180
14:19:15,350 --> 14:19:18,290
So in our constructor, let's add one more, we'll add you int 32. Since the size of this is a un 32, 
所以在我们的构造函数中，来添加一个新的参数 `uint32`，因为它的大小就是 uint32

14181
14:19:18,290 --> 14:19:22,640
callback, gas limit, and we'll save the sub top as a UNT 32, private, immutable, I underscore call back. Yes limit. 
`callbackGasLimit`，保存后来到顶部 `uint32 private immutable i_callbackGasLimit`

14182
14:19:22,760 --> 14:19:28,100
And we'll save this. I call back gas limit equals call back Yes, limit. 
再保存一下 `i_callbackGasLimit = callbackGasLimit`

14183
14:19:28,340 --> 14:19:31,700
And then we'll take this, and we'll stick it here. 
接着获取它，并粘贴到这里

14184
14:19:31,700 --> 14:19:37,250
All right, we got one more number of words, 
好了，还剩最后一个 "numWords" 

14185
14:19:37,250 --> 14:19:42,980
this is going to be how many random numbers that we want to get, 
它代表我们想要获取的随机数数量

14186
14:19:43,520 --> 14:19:46,910
we only want one. So we're gonna go back up to the top, 
我们只想要一个，所以退回到顶部

14187
14:19:46,910 --> 14:19:50,780
we're going to create a you int 32. And we'll make this also a private constant. Num words equals one, because we only want one random number. 
我们创建一个 `uint32` 同样设置为 `private constant NUM_WORDS = 1` 因为我们只想要一个随机数

14188
14:19:50,780 --> 14:19:54,620
And then that'll be the last thing we need to add for our IVF coordinator dot request random words. 
然后是最后一件事，我们需要把它添加到我们的 "i_vrfCoordinator.requestRandomWords" 里

14189
14:19:54,620 --> 14:19:57,350
Now this request random words function returns a request ID a un 256 Request ID 
这个 "requestRandomWords" 函数会返回一个“请求 ID”，一个 uint256 的“请求 ID” 

14190
14:19:57,350 --> 14:20:00,350
a unique ID that defines who's requesting this and all this other information. 
它是一个独一无二的 ID，定义了请求的发起者以及其它一切信息

14191
14:20:00,350 --> 14:20:02,870
If we want to save it, we can do u and 256. Request ID IVF coordinator requests random words. 
如果我们想把它保存下来，可以这么做 `uint256 requestId = i_vrfCoordinator.requestRandomWords` 

14192
14:20:02,870 --> 14:20:05,300
Now for now, we are going to emit an event with this request ID. 
现在，我们就要用这个 "requestId" 触发一个事件

14193
14:20:05,330 --> 14:20:07,190
And we'll go over why we're going to do that a little bit later, 
稍后我们会解释为什么要这么做

14194
14:20:07,190 --> 14:20:09,950
create a new event at the top. And we're not going to follow the naming convention here. 
在顶部创建一个新的 `event`，我们这里先不遵循命名惯例

14195
14:20:09,950 --> 14:20:12,890
Because we're going to change the name of our functions a little bit, 
因为我们稍后还会修改函数的名字

14196
14:20:12,890 --> 14:20:17,840
we're going to call this requested raffle winner. 
我们把它命名为 `RequestedRaffleWinner`

14197
14:20:17,960 --> 14:20:24,530
And we're going to take a un 256 indexed Request ID. 
并且我们让它接收一个 `uint256 indexed requestId`

14198
14:20:24,560 --> 14:20:28,280
Down here, we're gonna do omit requested raffle winner Request ID. 
拉下来，这里写 `emit RequestedRaffleWinner(requestId)`

14199
14:20:28,280 --> 14:20:31,250
And now we have a function that we can use to request a random winner using chain link VRF. 
现在我们就有了一个函数，让我们能够使用 Chainlink VRF 请求一个随机的优胜者了

14200
14:20:31,280 --> 14:20:34,700
Now again, we're going to set this up so that the chain link keepers call this on an interval, but we'll do that in a little bit. 
我们还会为它配置 "Chainlink Keepers" 以便能定期调用，但这个要之后再说

14201
14:20:34,700 --> 14:20:37,580
For now, let's figure out what to do once we get that random number. 
现在，我们来看看获取到随机数之后该怎么做