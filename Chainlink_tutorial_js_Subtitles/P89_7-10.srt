10948
11:00:07,730 --> 11:00:13,610
Now we're about to jump in and level up our tests. 
现在我们要开始升级我们的测试了

10949
11:00:13,610 --> 11:00:16,430
But before we do that, 
但在此之前

10950
11:00:16,460 --> 11:00:19,130
we're going to clean up our Funmi contract a little bit to make it look a little bit more professional. 
我们将稍微整理一下 "FundMe" 合约以让它看起来更加专业

10951
11:00:19,130 --> 11:00:22,190
And I'm going to talk about some of the syntax and some of the reasons why some conventions exist. 
我会讲解一些语法以及一些惯例之所以存在的原因

10952
11:00:22,190 --> 11:00:25,520
We're not going to do this full force on all the projects moving forward. 
我们不会在之后的项目中往这方面投入很大的力气

10953
11:00:25,520 --> 11:00:28,970
But they are good to know and they are good to keep in mind
但了解并记住它们是很有益的

10954
11:00:29,210 --> 11:00:31,820
when moving forward and working with our contracts. 
尤其是在处理我们的合约的时候

10955
11:00:31,910 --> 11:00:35,330
While we go through this we're going to learn why some of these conventions exist 
在这个过程中，我们将了解这些惯例为什么会存在

10956
11:00:35,330 --> 11:00:37,640
including learning a little bit of low level solidity. 
而且会学习一些 Solidity 更底层的知识

10957
11:00:37,640 --> 11:00:40,460
So don't skip this part. 
因此，请不要跳过这部分

10958
11:00:40,460 --> 11:00:43,400
When we get to later sections. 
当我们抵达更靠后的章节时

10959
11:00:43,400 --> 11:00:46,460
We're going to be a little bit looser and not be as strict with the code style guides 
我们会变得稍微宽松一些，不会像代码风格指南那样严格

10960
11:00:46,460 --> 11:00:49,700
but That's basically what we're gonna go over now. 
但基本上，这就是我们现在要讨论的内容

10961
11:00:49,700 --> 11:00:52,400
And for now, you might see this event funded thing here, 
现在，你可能会看到这里有个 `event Funded`

10962
11:00:52,400 --> 11:00:55,250
please just ignore that for now, 
请暂时先忽略它

10963
11:00:55,250 --> 11:00:58,730
in an earlier take, I'd introduced the events much earlier. 
在较早版本的课程中，我比较早地介绍了 "event"

10964
11:00:58,730 --> 11:01:00,530
And now we're actually going to learn about events a little bit later in the course. 
但现在我们会在更靠后的课程中学习 "event"

10965
11:01:00,530 --> 11:01:04,070
So please ignore that event funded for now. 
所以请暂时忽略掉 `event Funded`

10966
11:01:04,070 --> 11:01:06,380
So let's go ahead and tweak a little bit of our contracts here. 
让我们继续，来稍微修改一下我们的合约

10967
11:01:06,380 --> 11:01:08,900
Now what I'm talking about tweaking this to make it look professional, a little bit more professional, 
我所说的优化我们的合约以让它看起来更专业的意思

10968
11:01:08,900 --> 11:01:11,240
I'm talking about the solidity style guide, 
指的就是 Solidity 的风格指南("Style Guide")

10969
11:01:11,240 --> 11:01:14,690
there are some conventions for naming and ordering 
有一些关于命名和排序的惯例

10970
11:01:14,690 --> 11:01:17,810
that we can follow to make our code look a little bit better. 
可以通过遵循它们以使我们的代码看起来更好

10971
11:01:17,810 --> 11:01:20,390
Now, like I said, this is going to be a little bit more optional, 
就像我说的，这是一个可选步骤

10972
11:01:20,390 --> 11:01:23,360
because it can be a little bit verbose. 
因为它可能会有些冗长

10973
11:01:23,510 --> 11:01:26,330
And it doesn't really make that big of a difference. 
而且它也不会带来特别大的差异

10974
11:01:26,330 --> 11:01:29,870
But it can increase readability of your contracts by a lot and make your code look a lot nicer. 
但它可以大大提高合约的可读性并让你的代码更好看

10975
11:01:29,870 --> 11:01:33,350
So if you want, you can go through this style guide to learn more about 
因此，如果你想的话，可以通过阅读这个风格指南

10976
11:01:33,380 --> 11:01:36,800
what kind of makes solidity look nice, and what makes it not look nice. 
来了解更多有关哪些做法会让 Solidity 看起来更好，而哪些不会

10977
11:01:36,800 --> 11:01:39,290
But well, that's some of these style guides in here, 
但这里我们只是介绍一些风格指南

10978
11:01:39,290 --> 11:01:41,360
we're not going to follow the style guide exactly to a tee. 
并不会严格遵循风格指南的每一处细节

10979
11:01:41,360 --> 11:01:44,090
But we are going to make some best efforts to make our code follow the style guide, 
不过我们还是会尽力让我们的代码遵循风格指南

10980
11:01:44,090 --> 11:01:47,060
we've got a link to the style guide in the GitHub repository for this section, 
我们在 GitHub 仓库的这一部分提供了风格指南的链接

10981
11:01:47,060 --> 11:01:50,150
we can read some more about the layout. 
我们可以读到许多关于布局的内容

10982
11:01:50,150 --> 11:01:53,210
But the main thing we want to look at is this order of the layout, 
但我们主要看的是布局的顺序

10983
11:01:53,210 --> 11:01:55,700
we want to start with our imports with our pragma statement, our imports, interfaces, libraries, and then contracts. 
我们要从版本声明开始("Pragma statement")，然后是导入("Import")、接口(Interfaces)、库(Libraries)、然后是合约(Contracts)

10984
11:01:55,700 --> 11:01:59,180
And then inside each contract 
接着在合约内部，我们按照

10985
11:01:59,210 --> 11:02:02,450
type declarations, state variables, events, modifiers, and functions. 
类型声明(Type declarations)、状态变量(State variables)、事件(Events)、修饰器(Modifiers)、以及函数(Function)的顺序编写

10986
11:02:02,450 --> 11:02:05,480
So let's go back here and make sure that we're up to speed, 
让我们回到这里，确保可以跟上进度

10987
11:02:05,510 --> 11:02:08,990
we want our pragma first. 
首先是编译器版本声明

10988
11:02:08,990 --> 11:02:12,530
Alright, awesome, we did exactly that, 
很好，我们已经是这样做的了

10989
11:02:12,530 --> 11:02:16,610
then we want our imports. Okay, awesome, we have those too. 
接着是导入，很好，我们有这两个

10990
11:02:16,640 --> 11:02:19,460
Something that's not in the style guide is going to be error codes, 
样式指南中没有提到报错代码(Error Codes)

10991
11:02:19,460 --> 11:02:22,820
which we definitely want next. 
我们要把它放在下一个位置

10992
11:02:22,820 --> 11:02:27,140
So next is going to be error codes. 
所以下一个就是报错代码

10993
11:02:27,140 --> 11:02:30,410
Now this is where we're going to bump into one of our first updates here. 
这里是我们遇到的第一处更新

10994
11:02:30,410 --> 11:02:34,400
As of recent, it's sort of becoming a best practice to 
最近，有一种写法已经逐渐成为主流

10995
11:02:34,400 --> 11:02:37,820
add the name of your contract, some underscores, and then the name of your error.
即，添加你的合约名称，一些下划线，然后是你错误类型的名称

10996
11:02:38,000 --> 11:02:40,580
Whenever you're running into an error. 
这样每当你遇到报错时

10997
11:02:40,610 --> 11:02:43,970
This makes it a lot easier to understand which contract is throwing the error.
都可以更容易地理解是哪个合约引发了错误

10998
11:02:44,030 --> 11:02:48,350
So for this, we're going to say error Funmi, two underscores not owner, 
具体来说，我们要这么写 `error FundMe__NotOwner`

10999
11:02:48,350 --> 11:02:52,190
then we're going to scroll down to the our revert and set it like this. 
然后我们拉到下面找到 `revert` 语句，并设置成这样

11000
11:02:52,490 --> 11:02:56,120
This way, when if we ever run into this error, 
这样的话，只要我们遇到这个报错

11001
11:02:56,120 --> 11:02:59,240
we know that the error is coming from the Funmi contract,
就能知道报错来源于 "FundMe" 合约

11002
11:02:59,480 --> 11:03:01,940
not from the aggregator v3 interface, 
而不是 "AggregatorV3Interface"

11003
11:03:01,940 --> 11:03:05,090
or the price converter or some other contract. 
或是 "PriceConverter" 又或者其它合约

11004
11:03:05,090 --> 11:03:07,820
So that's how we want to write our error codes here. 
这就是我们编写报错代码的方式

11005
11:03:07,820 --> 11:03:11,720
If we had any interfaces or libraries not imported, we would add them here. 
如果我们有任何未导入的接口或库，都会在这里添加

11006
11:03:11,750 --> 11:03:15,050
But then finally, we add our contracts. 
接着在最后，添加我们的合约

11007
11:03:15,050 --> 11:03:18,950
In this file, we only have one contract here. 
在这个文件中，我们只有一个合约

11008
11:03:18,950 --> 11:03:21,590
It's our Funmi contract. Awesome. 
就是我们的 "FundMe" 合约，很好

11009
11:03:21,590 --> 11:03:26,810
Now the next thing we want to learn about as far as style guides go is this thing called natspec. 
现在，我们要学习的下一个有关风格指南的内容是 "NatSpec"

11010
11:03:26,810 --> 11:03:30,500
natspec stands for Etherium natural language specification format. 
"NatSpec" 表示以太坊自然语言规范格式("Ethereum Natural Language Specification Format")

11011
11:03:30,530 --> 11:03:34,490
And it's basically a way of documenting our code inspired by Doxygen 
它是一种受到 "Doxygen" 启发的一种文档化代码的方式

11012
11:03:34,490 --> 11:03:38,270
uses Doxygen style comments and tags to help document our code, 
它使用 "Doxygen" 风格的注释和标签来帮助文档化我们的代码

11013
11:03:38,270 --> 11:03:41,270
you can click the link here in the solidity documentation to learn more about Doxygen. 
你可以点击 Solidity 文档这里的链接来了解更多有关 "Doxygen" 的内容

11014
11:03:41,270 --> 11:03:43,880
If we scroll down in the documentation, here, 
如果我们把文档往下拉

11015
11:03:43,880 --> 11:03:47,330
we can see an example of using natspec. 
就可以看到一个使用 "NatSpec" 的示例

11016
11:03:47,330 --> 11:03:50,450
Whenever we have a contract or a function that needs documentation, 
每当我们有需要文档化的合约或函数时

11017
11:03:50,450 --> 11:03:53,750
we can add some syntax that looks like this to it. 
就可以添加类似这样的语法

11018
11:03:53,750 --> 11:03:57,470
So for example, if we wanted to add this to our code, 
举个例子，如果要在我们的代码中添加的话

11019
11:03:57,500 --> 11:04:00,560
we could add a comment explaining this funding contract 
我们可以添加一个注释来解释一下这个 "FundMe" 合约

11020
11:04:00,590 --> 11:04:05,210
to start a piece of natspec, you can do three backslashes, 
要开始一个 "NatSpec" 部分，你可以使用三个 "/" (反斜杠)

11021
11:04:05,870 --> 11:04:09,350
or one backslash, two stars, and then another ending star here. 
或一个 "/"，两个 "*" (星号)，以及另外一个用于结尾的 "*"

11022
11:04:09,350 --> 11:04:12,200
Everything we put inside of this comment section basically gets turned into a comment. 
所有我们放进这个注释部分的内容都属于注释

11023
11:04:12,200 --> 11:04:15,590
For the start of our contract, we'll do the Add sign title 
对于合约的开头，我们将添加标记 `@title`

11024
11:04:15,590 --> 11:04:18,050
to explain basically, what this contract is, 
基本上就是在解释，这是个什么合约

11025
11:04:18,050 --> 11:04:20,270
it's fun, we contract is going to be a contract for crowdfunding, 
对于我们的 "FundMe" 合约，它是“一个用于众筹的合约”
("A contract for crowd funding")

11026
11:04:20,390 --> 11:04:27,980
we'll add another star. And we can add the author of it, 
再加一个 "*"，我们可以添加它的“作者”("author")

11027
11:04:27,980 --> 11:04:31,610
which is going to be your name, I'm going to put Patrick Collins, of course, 
也就是你的名字，而我要写的是 "Patrick Collins"，这是当然了

11028
11:04:31,640 --> 11:04:35,030
then we'll add a notice, which is just kind of a note to people 
接着我们添加一个“注意”("notice")，就是用来提示他人的

11029
11:04:35,030 --> 11:04:39,800
we can say this contract is is to demo a sample funding contract. 
我们可以说“该合约是一个众筹合约的示例”
("This contract is to demo a sample funding contracts")

11030
11:04:39,800 --> 11:04:46,250
And we can also add apt Dev,
我们还可以添加 `@dev`

11031
11:04:46,670 --> 11:04:49,820
which is a note specifically to developers. 
这是一个专门针对开发者的说明

11032
11:04:50,120 --> 11:04:54,770
And we can say this implements price feeds as our library. 
我们可以说“该合约使用了喂价的库实现”
("This implements price feeds as out library")

11033
11:04:54,770 --> 11:04:58,850
The reason that we want to add these tags here 
我们之所以在这里添加这些标签

11034
11:04:58,850 --> 11:05:02,360
is actually because we can use the natspec to automatically create documentation for us 
是因为我们可以使用 "NatSpec" 来自动为我们创建文档

11035
11:05:02,360 --> 11:05:06,350
if we download so we can actually run solc dash s user doc dash dash dev doc, 
如果我们下载了 "solc" 则可以运行 `solc --userdoc --devdoc`

11036
11:05:06,350 --> 11:05:10,220
and the name of our file to automatically generate documentation. 
以及我们想要的文件名称，来自动生成文档

11037
11:05:10,220 --> 11:05:13,820
So this is also really helpful for automatically creating documentation for other developers who interact with the protocol later on. 
因此，这对于以后要进行协议交互的其他开发人员生成文档也很有帮助

11038
11:05:13,820 --> 11:05:16,370
You can use this natspec For as many or as few functions as you'd like. 
你可以根据需要尽可能或多或少的用一点这个 "NatSpec" 的功能


11039
11:05:16,370 --> 11:05:20,300
Most of us probably aren't going to be making documentation. 
我们中的大多数人可能并不会去编写文档

11040
11:05:20,300 --> 11:05:23,090
So we really just want to follow those guidelines 
所以我们只需要遵守这个指南

11041
11:05:23,090 --> 11:05:26,120
if we think some function or some section of our code is a little bit tricky for other developers. 
如果我们认为某些函数或部分的代码对其他开发者来说比较棘手的话

11042
11:05:26,120 --> 11:05:29,300
Now that we're inside of contract, 
现在我们到了合约内部

11043
11:05:29,300 --> 11:05:32,240
we can follow the order of our contract. 
可以按照这个顺序来进行

11044
11:05:32,240 --> 11:05:34,910
We're first going to start with type declarations 
我们首先要从，“类型声明”("Type Declarations")开始

11045
11:05:34,910 --> 11:05:39,110
which we don't really have any except for the fact 
我们其实没有任何类型声明

11046
11:05:41,870 --> 11:05:43,790
that we're using our price converter for the UN 256 type. 
除了这个 `PriceConverter for uint256`

11047
11:05:43,790 --> 11:05:48,410
Okay, great. You Next, after our type declarations, 
很好，下一个，在 "Type declarations" 之后

11048
11:05:48,650 --> 11:05:51,140
we're going to do state variables. 
我们要处理“状态变量”("State variables")

11049
11:05:51,170 --> 11:05:54,380
And in this state variables section, 
在这个状态变量部分

11050
11:05:54,380 --> 11:05:57,410
this is where we're actually going to change the name of some of our state variables. 
我们需要更改一些状态变量的名称

11051
11:05:57,410 --> 11:06:00,170
So we'll do a little common here state variables. 
我们在这里做一个注释 "State Variables!"

11052
11:06:00,170 --> 11:06:04,370
Now in the solidity style guide, kind of adhere to the naming styles, 
在 Solidity 风格指南中，我们要遵循它的命名风格

11053
11:06:04,400 --> 11:06:08,780
we use upper and lowercase, 
我们要使用大小写混合

11054
11:06:08,810 --> 11:06:12,080
we use total caps with underscores here. 
带有下划线的要全部大写

11055
11:06:12,080 --> 11:06:14,750
However, these naming variables are going to change in the future in this section. 
然而，这个部分的这些变量的命名将来会发生改变

11056
11:06:14,750 --> 11:06:16,820
And if you're following along with the GitHub repo associated with this course,
如果你正在关注本课程关联的 GitHub 仓库

11057
11:06:17,180 --> 11:06:19,340
these are going to be actually a little bit different than what you see. 
就会发现那里和你现在看到的有些不同

11058
11:06:19,340 --> 11:06:22,400
However, for now, we're going to leave them as they are,
但现在，我们暂时保持原样

11059
11:06:22,400 --> 11:06:24,710
because the reason why we're going to change them isn't going to be quite clear yet. 
因为我们还不是很清楚要更改它们的原因

11060
11:06:24,710 --> 11:06:27,980
Don't worry. So these names are going to change soon, but not yet. 
别着急，这些名称很快就会更改，但不是现在

11061
11:06:27,980 --> 11:06:31,310
Alright, after state variables comes events, and modifiers. 
好的，在状态变量之后是“事件”("Events")和“修饰器”("Modifiers")

11062
11:06:31,310 --> 11:06:34,940
We don't have any events, but we do have a modifier. 
我们没有任何事件但有一个修饰器

11063
11:06:34,940 --> 11:06:39,560
So we'll copy this. And actually, we'll delete this comment here. 
所以我们要复制它，然后删除这里的注释

11064
11:06:39,560 --> 11:06:46,850
And we'll paste our modifier here. 
接着把我们的修饰器粘贴到这里

11065
11:06:46,850 --> 11:06:50,120
Oh, and it looks like looks like we're not auto formatting here. 
哦，看起来这里没有被自动格式化

11066
11:06:50,450 --> 11:06:52,820
So we're going to uncomment immutable actually, 
我们把这里的 "immutable" 解除注释

11067
11:06:52,880 --> 11:06:55,160
so that it automatically auto formats. 
这样它就会进行自动格式化

11068
11:06:55,160 --> 11:06:57,440
Okay, great. We're out of formatting now. And Cool. 
很好，现在已经是格式化的了，酷~

11069
11:06:57,440 --> 11:07:01,100
Alright, so now we have our modifiers. Next, 
好的，现在我们已经处理好了修饰器，下一个

11070
11:07:01,100 --> 11:07:05,030
we have right here, and then we have all of our functions. Great. 
我们现在位于这里，接下来要处理我们所有的函数，很好

11071
11:07:05,030 --> 11:07:08,390
We actually want to group our functions in this order that I just print here. 
我们打算按照这个顺序来对我们的函数进行分组，我已经打在这里了

11072
11:07:08,390 --> 11:07:11,720
So we want the constructor which we have 
先是“构造函数”("constructor")，我们有

11073
11:07:11,720 --> 11:07:14,570
received and fall back, we do have fall back and receive. 
然后是 "receive" 和 "fallback"，我们也确实有 "fallback" 和 "receive"

11074
11:07:14,570 --> 11:07:20,690
So we're going to actually copy those and delete this comment. 
所以我们要把它们复制下来，删掉这里的注释

11075
11:07:20,690 --> 11:07:24,110
We're gonna stick those veterans Heath here looks like receive goes first. So we'll put that here. 
把它们粘贴到这里来，看起来 "receive" 要放在前面，把它放到这里

11076
11:07:24,110 --> 11:07:28,460
Then external functions, then public, internal, private.
接下来是 "external" 函数，再接下来是 "public", "internal", "private"

11077
11:07:29,180 --> 11:07:32,480
So we have public public. And that's it. And then we can delete this part down here. Okay. Cool. 
我们有 "public", "public" 就是这样，然后删除下面这部分，很好，酷~ 

11078
11:07:32,480 --> 11:07:36,680
And if we want, we can do that syntax up here from the net spec for our functions. 
如果我们愿意，可以对我们的函数使用 "NatSpec" 的语法

11079
11:07:36,680 --> 11:07:39,920
For example, for fund it, we could even just copy paste, 
举个例子，对于 "fund()"，我们可以直接复制粘贴

11080
11:07:40,490 --> 11:07:44,060
we would remove title, we would remove author, 
删除 "title"，删除 "author"

11081
11:07:44,060 --> 11:07:48,710
and we just say add, notice, this function, funds this contract. 
只需要保留 "notice"，“该函数为本合约吸纳资金”
("This function funds this contract")

11082
11:07:48,710 --> 11:07:55,640
And we can even leave a little dev thing here to talk about it. 
我们也可以保留一个 "dev" 内容做点说明

11083
11:07:55,640 --> 11:07:58,850
Now if we have parameters, you can do apt puram. 
如果我们有一些参数，你可以添加 "@param"

11084
11:07:58,850 --> 11:08:02,660
And say like what the parameter is. 
并描述相应的参数

11085
11:08:02,660 --> 11:08:06,470
And then if we have returns, we can say returns, 
如果有返回值，则可以添加 "@return"

11086
11:08:06,470 --> 11:08:10,400
or returns and then what it returns for the documentation. 
来说明返回值是什么

11087
11:08:10,400 --> 11:08:13,400
Since this doesn't have any parameters in here, and doesn't return anything, 
因为它这里并没有任何参数，也不返回任何内容

11088
11:08:13,400 --> 11:08:15,980
we can just leave it like this. 
所以我们可以就保持这样

11089
11:08:15,980 --> 11:08:18,680
And great, we've just revamped our contract here to make it a little bit more nicely formatted. Great job. 
很好，我们已经重新整理了我们的合约，并使其格式更加整洁，干得好

11090
11:08:18,680 --> 11:08:21,560
Now, like I said, 
正如我所说的

11091
11:08:21,560 --> 11:08:24,710
we actually are going to change the names of our state variables, 
我们实际上还要更改状态变量的名称

11092
11:08:24,710 --> 11:08:26,900
and we're going to add some functions in here and a little bit. 
并在这里添加一些函数

11093
11:08:26,900 --> 11:08:29,300
So if we're following with the GitHub repo,
如果你正在关注 GitHub 仓库

11094
11:08:29,330 --> 11:08:31,940
the state of the contract right now is going to look a little bit different. 
会发现合约的状态会与这里看到的有些不同

11095
11:08:31,940 --> 11:08:34,670
But it'll make sense why change this up in a little bit.
稍后我们会解释为什么要做出这些改变