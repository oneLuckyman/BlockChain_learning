10842
10:52:48,530 --> 10:52:54,500
So we are going to show us doing this on a test net on Rinkeby. 
现在我们要展示如何在测试网络  Rinkeby 上进行操作

10843
10:52:54,500 --> 10:52:57,740
But before we actually test it on Rinkeby, 
但是在我们实际到 Rinkeby 上测试之前

10844
10:52:57,740 --> 10:53:00,530
I'm going to add a little bit of the auto verification piece in here as well, 
我要在此处添加一些有关自动验证的内容

10845
10:53:00,530 --> 10:53:03,440
because we did that in the last lesson. 
我们在上节课中也做过这个

10846
10:53:03,440 --> 10:53:06,290
And we wanted to show how to do it in hard hat deploy as well. 
现在我们要展示一下如何在 "hardhat deploy" 中进行这个操作

10847
10:53:06,290 --> 10:53:09,770
So right after we deploy our Funmi, we can do something similar here, 
因此，在我们部署过 "FundMe" 之后，我们可以做一些相似的事

10848
10:53:09,770 --> 10:53:13,100
we'll say, if developer chains includes network dot name, 
我们之前写的是如果 `developmentChains` 包含 `network.name`

10849
10:53:13,100 --> 10:53:17,150
we'll say if developer chains doesn't include network dot name, 
现在我们要写如果 `developmentChains` 不包含 `network.name` 

10850
10:53:17,150 --> 10:53:19,670
because we don't want to verify on a local network. 
因为我们不想在本地网络上进行验证

10851
10:53:19,700 --> 10:53:25,010
So we'll say if not development chains dot includes network dot name, 
所以我们写下 `if(!developmentChains.includes(network.name))`

10852
10:53:25,010 --> 10:53:28,670
the exclamation mark, aka the bang 
感叹号，或者说 "bang"

10853
10:53:29,000 --> 10:53:32,690
means not when we're talking about booleans. 
表示布尔值中 "非"

10854
10:53:32,960 --> 10:53:36,080
So we're saying, if the name of the network isn't a development chain, 
所以我们的意思就是，如果 `network` 的 `name` 不是一个 `developmentChains`

10855
10:53:36,080 --> 10:53:41,450
we want to go ahead and verify and same as last time. 
我们就会继续并且进行验证，就和上次一样

10856
10:53:41,450 --> 10:53:45,170
And if process dot e NV dot ether scan API key,
并且，如果 `process.env.ETHERSCAN_API_KEY` 存在

10857
10:53:46,490 --> 10:53:50,270
then we're going to go ahead and verify. 
我们就继续执行验证操作

10858
10:53:50,270 --> 10:53:53,450
Now before we had our verify code, right in our deploy code, 
现在，在我们往部署代码中添加验证代码之前

10859
10:53:53,450 --> 10:53:56,450
we're gonna do something a little bit different here. 
我们要做一点不同的事情

10860
10:53:56,450 --> 10:53:59,810
Instead of having our verify code in our deploy scripts here, 
这次我们不再把验证代码放进我们的部署脚本中

10861
10:53:59,810 --> 10:54:04,250
we're actually going to create a new folder called utils, which stands for utilities. 
而是创建一个新的文件夹，名为 "utils"，表示实用程序("utilities")

10862
10:54:04,250 --> 10:54:07,010
And this is where we're going to add different scripts that 
我们要在这里添加一些不同的脚本

10863
10:54:07,010 --> 10:54:09,200
we can use across different deployments. 
以便在不同的部署中使用

10864
10:54:09,200 --> 10:54:12,320
Because let's say we have 50 Deploy scripts, 
假设我们有 50 个部署脚本

10865
10:54:12,320 --> 10:54:15,350
we're not going to make 50 Deploy functions, 
我们不太可能去创建 50 个 "deploy" 函数

10866
10:54:15,470 --> 10:54:19,460
we're just going to add them to our utils folder, 
更常用的方法是把它们放到 "utils" 文件夹中

10867
10:54:19,580 --> 10:54:23,270
and in our utils folder, or create a new file called verify dot j s, 
在我们的 "utils" 文件夹中，我们要创建一个新文件名为 "verify.js"

10868
10:54:23,270 --> 10:54:26,540
we're going to add that code from our last project in here. 
我们要把上一个项目中的代码添加过来

10869
10:54:26,540 --> 10:54:30,200
So if you want, you can go ahead copy paste from our last project over to this one, 
如果你想的话，可以直接把上一个项目中的代码复制粘贴到这里

10870
10:54:30,200 --> 10:54:33,320
or you can pause the video to type it out yourself. 
或者你可以暂停视频，手动输入代码

10871
10:54:33,320 --> 10:54:38,810
Since we're using the run command here, we're gonna do const run equals require RT hat. 
由于我们在这里使用了 `run` 命令，所以我们添加 `const {run} = require("hardhat")`

10872
10:54:38,810 --> 10:54:47,750
And then at the bottom, we're going to do module exports. Exports equals verify.
而在底部，我们要添加 `module.exports = { verify }`

10873
10:54:48,470 --> 10:54:53,180
Now that we have a verify script in our utils folder, 
现在我们就在 "utils" 文件夹中有了一个 "verify" 脚本了

10874
10:54:53,180 --> 10:54:59,090
back in our deploy Funmi we're going to say 
回到我们的 "deploy-fund-me" 我们写下

10875
10:54:59,090 --> 10:55:04,970
const. Verify equals require dot dot slash utils. Slash verify. 
`const {verify} = require("../utils/verify")`

10876
10:55:05,000 --> 10:55:08,540
And since now in our verified Jas, we have a lot of this trycatch stuff in here, 
由于我们的 "verify.js" 文件中有许多 `try-catch` 代码

10877
10:55:08,540 --> 10:55:15,140
we can just do a wait. Verify 
所以我们可以使用 `await verify`

10878
10:55:15,140 --> 10:55:18,320
and a verify once again takes a contract address and a list of arguments. 
`verify` 函数接收一个 `contractAddress` 和一个 `args` 列表

10879
10:55:18,350 --> 10:55:24,680
We'll say await verify, fund me dot address and then the list of arguments. 
所以就是 `await verify(fundMe.address, )` 然后是 "args" 列表

10880
10:55:24,680 --> 10:55:27,740
To make the list of arguments easier to put in. 
为了让我们的 "args" 列表更易输入

10881
10:55:27,740 --> 10:55:32,540
You can go const args, equals and then we'll just stick our eth USD price feed in here 
你可以这样做 `const args = ` 然后我们直接把 `ethUsdPriceFeedAddress` 放到这里

10882
10:55:32,540 --> 10:55:37,640
and then replace this with args 
接着把这里替换成 `args`

10883
10:55:37,640 --> 10:55:42,410
and then take this args and pop it on down into the second parameter here. 
然后把 `args` 放到这里，作为它的第二个参数

10884
10:55:42,410 --> 10:55:48,560
All right, great. 
干的非常好