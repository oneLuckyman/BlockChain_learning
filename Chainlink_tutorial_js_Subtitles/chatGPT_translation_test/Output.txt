现在，还有几项任务非常有帮助。
在我手动删除工件和缓存之前，你可以运行“yarn Hardhead, clean”来完成这项工作。
这将删除工件文件夹并清除缓存。
我们已经知道如何编译，但 Hardhead 特别适合运行测试。
尽管到目前为止我们还没有运行测试，但运行测试对于智能合约的开发至关重要。
在未来，我们将花费大量的时间编写非常好的测试。
编写测试非常重要的原因是我们希望确保我们的代码恰好按照我们希望的那样执行。
特别是在 defy 和分散的智能合约世界，我们所有的代码都将是开源的，任何人都可以与之交互并有可能利用它。
像 req dot news 等网站会对以前的大量黑客攻击进行审查，以及这些攻击发生的智能合约中发生了什么。
因此，编写强大的测试始终是我们的第一道防线。
我们有一个名为 sample test.js 的样本测试文件，它是 Hardhat 的基本包中默认包含的。
但是，我们将对其进行重命名和修改。
我们将其重命名为 test deploy dot j s，并删除其中的所有内容并从头开始。
我们希望能够在本地测试我们的所有 solidity 代码，以便于我们确切地知道它在执行什么操作。
我们可以通过编程方式确保我们的代码按照我们的意愿执行。
所以，让我们为我们的简单存储合约编写一个基本测试，以便我们确认它的确按照我们所期望的执行。
Hardhat。
