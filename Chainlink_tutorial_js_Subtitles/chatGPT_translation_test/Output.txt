现在，还有几个任务非常有用。
你会发现，我之前手动删除了 artifacts 和 cache，但其实你也可以运行 "yarn Hardhat clean" 来实现这个功能，这会删除 artifacts 文件夹并清理缓存。
我们已经知道了编译的作用，但 Hardhat 最适合的就是运行测试了。
虽然到目前为止我们还没有运行测试，但是测试绝对是你智能合约开发旅程中至关重要的一环。
我们会花费很多时间编写非常好的测试。
编写测试非常重要的原因是，我们想要确保我们的代码完全符合我们的要求，尤其在 defy 和去中心化智能合约的世界中，所有的代码都会对任何人开放，也可能被利用。
例如 req dot news 等网站就列举了许多以前的黑客事件以及它们是如何被黑进去的，以及智能合约中发生了什么，从而使这些黑客攻击得以发生。
因此，编写非常强大的测试始终是我们的第一道防线。
我们有一个默认包含在 Hardhat 基本包中的样本 test.js，但是正如你可能已经知道的，我们将对此进行重命名和更改。
我们将把它重命名为 "test-deploy.js"，并删除里面的所有内容，从头开始。
我们希望可以在本地测试所有的 Solidity 代码，以便了解其确切的作用。
并且我们可以以编程方式确保我们的代码执行我们想要的操作。
因此，让我们为我们的简单存储合约编写一个基本测试，以便我们可以确保它正在按照我们的要求进行操作。
Hardhat
