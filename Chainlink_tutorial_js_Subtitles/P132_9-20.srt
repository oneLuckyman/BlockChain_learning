15298
15:31:24,470 --> 15:31:32,060
Let's now go ahead and test to make sure that we can't enter the raffle whenever this raffle is not open or it's calculating. 
让我们来测试一下，确保我们在未开放或是计算状态下确实是无法进入抽奖的

15299
15:31:32,060 --> 15:31:35,300
So we'll say it doesn't allow entrance, when raffle is Cal cumulating. 
所以我们写 `it("doesnt allow entrance when raffle is calculating")`

15300
15:31:35,300 --> 15:31:39,200
And this will be an async function. 
这里还是 `async function`

15301
15:31:39,560 --> 15:31:46,580
And first we'll enter will say await raffle dot enter raffle value is raffle entrance fee. 
首先我们要写 `await raffle.enterRaffle({ value: raffleEntranceFee })`

15302
15:31:46,580 --> 15:31:51,890
Now what we want to do we want to get this raffle into a closed state. 
现在我们要让抽奖进入到关闭状态

15303
15:31:51,890 --> 15:31:55,040
So we want to get it out of its open state. 
也就是我们想让它脱离开放状态

15304
15:31:56,600 --> 15:32:03,140
Well, how do we move this raffle from raffle dot open to raffle dot closed 
那么我们该如何才能把抽奖从 "Raffle.OPEN" 转移到 "Raffle.CLOSE" 呢

15305
15:32:03,140 --> 15:32:07,370
in perform upkeep, remove the raffle from raffle that open to raffle dot calculating 
在 "performUpkeep" 中，我们把抽奖从 "Raffle.OPEN" 转移到了 "Raffle.CALCULATING" 上

15306
15:32:07,370 --> 15:32:10,730
but perform upkeep can only be called if check upkeep returns true. 
但 "performUpkeep" 只有在 "checkUpkeep" 返回 true 时才会被调用

15307
15:32:10,730 --> 15:32:14,540
Otherwise, it'll revert with raffle upkeep not needed.
否则它就会使用 "Raffle__UpkeepNotNeeded" 进行回滚

15308
15:32:14,540 --> 15:32:18,350
So what we need to do is we need to make check upkeep return true. 
所以我们需要做的就是让 "checkUpkeep" 返回 true 

15309
15:32:18,380 --> 15:32:22,430
And we will pretend to be the channeling keeper network 
接着我们假装是 "Chainlink Keeper" 网络

15310
15:32:22,430 --> 15:32:26,150
to keep calling checkup keep waiting for it to be true. 
去对 "checkUpkeep" 保持调用并等待它返回 true 

15311
15:32:26,300 --> 15:32:29,660
And once we make it true, then we'll pretend to be the channeling keepers and call perform upkeep 
一旦我们获得了 true，我们就假装成 "Chainlink Keepers" 去调用 "performUpkeep" 

15312
15:32:29,660 --> 15:32:33,590
to put this contract in a state of calculating. 
并把合约的状态改为 "CALCULATING"

15313
15:32:33,590 --> 15:32:36,080
Now how do we actually do that? 
那我们该怎么做呢？

15314
15:32:36,080 --> 15:32:38,480
Well, in order for checkup keep to be true, we first need to see that we are indeed open, 
嗯，为了让 "checkUpkeep" 为 true，首先就需要确保我们处于开放状态

15315
15:32:38,480 --> 15:32:42,140
which we are. 
我们也的确是的

15316
15:32:42,170 --> 15:32:48,350
The next thing that we need to do though, is we need to do this time passed bit. 
下一个需要做的是满足 "timePassed" 的要求

15317
15:32:48,350 --> 15:32:51,350
We need to actually wait that 30 seconds for time to pass. 
我们需要等待 30 秒以通过这个时间

15318
15:32:51,350 --> 15:32:54,590
Now, that kind of sounds awful. 
但这听起来有点扯啊

15319
15:32:54,590 --> 15:32:57,890
Do we have to wait 30 seconds for all of our tests? 
难道我们必须要在所有测试中都等待 30 秒么？

15320
15:32:57,890 --> 15:33:02,540
What if our interval was 10 days 
如果我们的 "interval" 是 10 天呢？

15321
15:33:02,540 --> 15:33:05,840
when we have to wait 10 days to run our tests? 
我们就真在运行测试的时候等 10 天？

15322
15:33:05,840 --> 15:33:09,860
It sounds ridiculous. 
这就有点搞笑了

15323
15:33:09,860 --> 15:33:13,820
Well, hard hat actually comes built in with a ton of functions for us to manipulate our blockchain to do literally whatever we want it to do. 
实际上 hardhat 内置了大量的函数，让我们可以控制区块链以达到我们想要的目的

15324
15:33:13,820 --> 15:33:17,390
In the hard hat documentation. 
在 hardhat 的文档中，

15325
15:33:17,390 --> 15:33:20,810
There's a section called Hard Hat Network reference inside the Hard Hat Network section. 
有一个名为 "Hardhat Network Reference" 的部分，它在 "Hardhat Network" 部分里

15326
15:33:20,810 --> 15:33:23,390
And in here, there's a ton of information about how the hard hat network actually works and different configs that we can do with it. 
这里有大量有关 Hardhat 网络如何运作以及我们能做哪些配置的信息

15327
15:33:23,390 --> 15:33:26,210
If we scroll down low enough, we can see the JSON RPC methods that we can use on this blockchain, 
如果我们往下拉，就可以看到我们在链上用到的 "JSON-RPC methods" 

15328
15:33:26,240 --> 15:33:29,570
we can do eath accounts block number call chinetti. We can do all these RPC methods that a normal blockchain has. 
我们可以使用 "eth_accounts, blockNumber, call, chainId" 等所有一般区块链都具有的 "RPC" 方法

15329
15:33:29,630 --> 15:33:32,030
Additionally, we can do even more than that, 
不止于此，我们还能做到更多的事情

15330
15:33:32,030 --> 15:33:35,210
we can use these things called Hard Hat Network methods. 
我们还能使用这种被称为 "Hardhat network methods" 的方法

15331
15:33:35,210 --> 15:33:38,780
Since this is our local Hard Hat Network. 
由于我们用的是本地的 Hardhat 网络

15332
15:33:38,780 --> 15:33:41,240
And we're using this for testing, we want to be able to test any scenario. 
我们用它来进行测试，并且希望它可以在任何场景中进行测试

15333
15:33:41,240 --> 15:33:44,090
And it's these methods that give us the ability to do that, 
而正是这些方法赋予了我们这样的能力

15334
15:33:44,090 --> 15:33:47,870
you can go through this and play around and see all the different things you can do. 
你可以浏览一下这里，看一看都可以用到哪些不同的方法

15335
15:33:47,870 --> 15:33:51,350
One of them in particular is going to be set storage set 
其中一个比较特殊的是这个 "setStorageAt" 

15336
15:33:51,350 --> 15:33:53,600
where you can set storage at any place, which is really fun. 
通过它你可以把 "storage" 设置在任何地方，是一个很有趣的功能

15337
15:33:53,600 --> 15:33:57,230



15338
15:33:57,230 --> 15:34:00,530



15339
15:34:00,530 --> 15:34:02,990



15340
15:34:02,990 --> 15:34:05,300



15341
15:34:05,300 --> 15:34:07,910



15342
15:34:07,940 --> 15:34:10,490
But some of the special testing debugging


15343
15:34:10,490 --> 15:34:14,780
methods are going to be EVM increase time, and EVM. Mine


15344
15:34:14,810 --> 15:34:17,990
increased time allows us to automatically increase the time


15345
15:34:18,020 --> 15:34:22,820
of our blockchain and EVM. Mine allows us to mine or create new


15346
15:34:22,820 --> 15:34:26,030
blocks, because if we increase the time, it doesn't do anything


15347
15:34:26,060 --> 15:34:29,810
unless there's a new block mined. So what we can do is we


15348
15:34:29,810 --> 15:34:34,550
can run a wait network, and we'll import network from Hard


15349
15:34:34,550 --> 15:34:45,110
Hat Network await network dot provider that send EVM in crease


15350
15:34:46,130 --> 15:34:49,370
time, comma, we can send a list of parameters to send with it,


15351
15:34:49,370 --> 15:34:54,770
which for us are just going to be our interval.to number. And


15352
15:34:54,770 --> 15:34:57,350
then we'll do plus one. Now right now, our interval isn't


15353
15:34:57,350 --> 15:34:59,510
stored globally, so we're probably going to want to do


15354
15:34:59,510 --> 15:35:03,560
that. So let's go ahead and do interval. And then in our before


15355
15:35:03,560 --> 15:35:09,110
each, we'll do interval equals await, raffle dot raffle dot get


15356
15:35:09,110 --> 15:35:11,840
interval, I'm just going to copy this and we're going to delete


15357
15:35:11,840 --> 15:35:15,740
this whole line. Wait raffle dot get interval. Since now we're


15358
15:35:15,740 --> 15:35:18,350
just going to call it interval at a global level, since we're


15359
15:35:18,350 --> 15:35:20,780
going to use it a lot. Now we're gonna say interval that to


15360
15:35:20,780 --> 15:35:24,470
number plus one. So we want to increase the time by whatever


15361
15:35:24,470 --> 15:35:27,800
our interval is to make sure that we can actually get that


15362
15:35:27,800 --> 15:35:30,410
checkup keep to return true. So additionally, we're going to


15363
15:35:30,410 --> 15:35:39,320
want to do a weight network dot provider. Dot send EVM mine with


15364
15:35:39,470 --> 15:35:42,410
an empty array just because we just want to mine it one extra


15365
15:35:42,410 --> 15:35:46,730
block. You can also do network dot provider that request with


15366
15:35:46,730 --> 15:35:49,400
an await here, these two would be basically the same, but this


15367
15:35:49,400 --> 15:35:51,710
one's a little quicker, right? So we've increased the time of


15368
15:35:51,710 --> 15:35:55,070
our blockchain. We've mined a block to move forward. It should


15369
15:35:55,070 --> 15:35:58,760
be open time has passed. Do we have a player? We do indeed,


15370
15:35:58,760 --> 15:36:01,070
because we've entered the raffle. We should have a balance


15371
15:36:01,070 --> 15:36:03,710
because we've entered the right Apple, check upkeep should now


15372
15:36:03,710 --> 15:36:07,010
return true. So we should be able to call perform upkeep and


15373
15:36:07,010 --> 15:36:09,020
pretend to be a chain lock keeper. So we're going to


15374
15:36:09,020 --> 15:36:13,040
pretend to be a chain the keeper and call await raffle dot


15375
15:36:13,040 --> 15:36:18,230
perform upkeep. And we're going to pass this some empty call


15376
15:36:18,230 --> 15:36:22,460
data just by passing a blank array like that. And now this


15377
15:36:22,460 --> 15:36:26,120
should be in a calculating state. So now that it's in a


15378
15:36:26,120 --> 15:36:30,230
calculating state, we can say our enter raffle reverts


15379
15:36:30,230 --> 15:36:34,280
correctly if the raffle isn't open. So now we'll say await,


15380
15:36:34,610 --> 15:36:41,540
expect raffle dot enter, raffle. And we'll send it value of


15381
15:36:41,930 --> 15:36:47,330
raffle entrance fee. We're expecting this.to dot b dot


15382
15:36:47,330 --> 15:36:55,700
reverted with that raffle underscore underscore not open


15383
15:36:55,850 --> 15:37:02,270
error. Okay, let's try just this in our tests now. So we'll run


15384
15:37:02,270 --> 15:37:07,400
Hardhead test dash dash grep. Put this in quotes. And perfect


15385
15:37:07,430 --> 15:37:08,660
that passes as well.