6872
06:46:14,020 --> 06:46:19,840
All of our code basically is going to be inside of this async function main, 
我们所有的代码基本上都在这个异步函数 main 中

6873
06:46:19,840 --> 06:46:22,270
which is going to be our main script for deploying our simple storage dot soul 
它将成为我们用于部署 "SimpleStorage.sol" 的主要脚本

6874
06:46:22,270 --> 06:46:25,900
store deploy script is going to replicate exactly what goes on in remix,
storage 部署脚本将精准再现 Remix 中发生的事

6875
06:46:25,900 --> 06:46:29,350



6876
06:46:29,410 --> 06:46:32,320
in remix, what was the first thing that we always did? 
在 Remix 中，我们总要做的第一件事是什么？

6877
06:46:32,320 --> 06:46:35,830
Well, the first thing that we would do is actually compile all of our code. 
其实就是编译我们所有的代码，对吧？

6878
06:46:35,830 --> 06:46:38,860
So we're going to want to compile our code in our JavaScript project as well. 
所以我们同样要在这个 JavaScript 项目中先编译我们的代码

6879
06:46:38,860 --> 06:46:42,040
In order for us to compile our simple storage contract, 
为了编译我们的 SimpleStorage 合约

6880
06:46:42,040 --> 06:46:45,520
we're going to use a tool called Silk Jas, 
我们将使用一个名为 "solcjs" 的工具

6881
06:46:45,550 --> 06:46:48,670
and JavaScript actually has a way 
并且 JavaScript 有一个现成的方法

6882
06:46:48,670 --> 06:46:52,090
to install projects directly into our setups and into our folders. 
可以直接安装项目到我们的配置和文件夹中

6883
06:46:52,090 --> 06:46:55,450
If we scroll down this silk Jas is exactly what we're looking for. 
如果我们往下拉，这个 solcjs 正是我们要找的东西

6884
06:46:55,450 --> 06:46:58,390
Because it has a way to compile a contract that imports other contracts via relative paths, 
因为它有种方法能编译通过相对路径导入其它合约的合约

6885
06:46:58,390 --> 06:47:02,620
you can see a section in this readme 
你可以在 "README"(自述文件) 中看到有这么一部分

6886
06:47:02,620 --> 06:47:05,080
and most documentation will have something like this,
并且大多数文档都会有这样的内容

6887
06:47:05,110 --> 06:47:09,220
if it's JavaScript compatible. For Node js usage, 
只要它与 JavaScript 兼容并且是供 Node.js 使用的

6888
06:47:09,220 --> 06:47:11,980
it says to use the latest stable version of the solidity compiler via Node js, 
它说的是，为了通过 Node.js 使用最新稳定版本的 Solidity 编译器 

6889
06:47:11,980 --> 06:47:17,860
you can install it via NPM npm install. So 
你可以通过 npm 来安装它 "npm install solc"

6890
06:47:17,860 --> 06:47:22,330
NPM is what's known as a package manager. 
npm 就是所谓的包管理器("package manager")

6891
06:47:22,330 --> 06:47:26,650
And we actually installed NPM just by installing no Jess, right, 
其实我们已经在安装 Node.js 的时候安装过 npm 了，是吧？

6892
06:47:26,650 --> 06:47:30,700
if we do no dash dash version, 
如果我们可以输出 "node --version"

6893
06:47:30,700 --> 06:47:33,310
you should also be able to do NPM dash dash version. 
那么就应该也可以输出 "npm --version"

6894
06:47:33,310 --> 06:47:36,730
Another tool that it comes with is something called core pack. 
另一个要用到的工具名字是 "Corepack"

6895
06:47:36,730 --> 06:47:40,990
And you can type core pack dash dash version, 
你可以输入 "corepack --version" 来确认

6896
06:47:40,990 --> 06:47:44,590
now we can install with NPM using npm install silk, 
现在我们就可以通过 npm 来执行 "npm install solc" 了

6897
06:47:44,620 --> 06:47:47,950
however, I like the yarn package manager a little bit better. 
但我其实更喜欢用 "yarn" 包管理器

6898
06:47:47,950 --> 06:47:51,190
So we're actually going to install the yarn package manager instead to do all of our package management. 
所以我们还需要安装 yarn 包管理器作为我们总的包管理器

6899
06:47:51,190 --> 06:47:54,610
If you go to the installation page, 
如果你去到安装页面就可以看到

6900
06:47:54,640 --> 06:47:58,390
the newer way to install yarn is just by running core pack enable. And the older way is to install with NPM. 
较新版本的安装只用运行 "corepack enable"，而旧版本还要使用 npm

6901
06:47:58,420 --> 06:48:01,600
If you go ahead and run core pack enable after that finishes, 
运行 "corepack enable" 并等待其完成后

6902
06:48:01,600 --> 06:48:07,150
you should be able to run yarn dash dash version. 
你应该就可以运行 "yarn --version" 了

6903
06:48:07,210 --> 06:48:12,850
Alternatively, you can just run NPM i dash g core pack, and then you can run core pack enable.
或者，你需要先运行 "npm i -g corepack" 然后再运行 "corepack enable"

6904
06:48:13,000 --> 06:48:17,440
The last option you have is you can run NPM i dash g yarn. 
最后一种方法是运行 "npm i -g yarn"

6905
06:48:17,860 --> 06:48:21,850
This will install yarn globally for your system. 
这会为你的系统全局安装 yarn

6906
06:48:21,850 --> 06:48:25,720
But this is considered the outdated way to install yarn. 
但这是一种过时的安装 yarn 的方式

6907
06:48:25,720 --> 06:48:29,560
And ideally you run core pack enable. 
理想情况下你应该运行 "corepack enable"

6908
06:48:29,590 --> 06:48:31,960
But in any case, after you run those, 
但无论如何，在你运行完那些之后

6909
06:48:31,960 --> 06:48:35,380
if you run yarn dash dash version, you should get something that looks like this. 
如果你运行 "yarn --version"，都应该得到类似这样的东西

6910
06:48:35,380 --> 06:48:39,580
Now that we have yarn, we can actually use yarn to install all of our projects, instead of NPM.
现在我们有了 yarn 就能用它来安装所有的项目了，而不是用 npm

6911
06:48:39,940 --> 06:48:44,440
Back in silk Jas where it says npm install soak, 
回到 solcjs，它说的是 "npm install solc"

6912
06:48:44,440 --> 06:48:48,550
we can do the yarn equivalents of NPM install sock, 
我们可以用 yarn 达到完全相同的效果

6913
06:48:49,240 --> 06:48:55,330
which is going to be yarn, add sock, 
具体做法就是 "yarn add solc"

6914
06:48:55,330 --> 06:48:58,990
this will actually go ahead and install solc to our project. 
这就能为我们的项目安装 solc 了

6915
06:48:59,020 --> 06:49:01,930
If we open up our folders, you'll actually see that this added a couple of different folders, 
打开我们的文件夹，可以看到这里已经添加了一些不同的文件夹

6916
06:49:01,930 --> 06:49:06,010
it first added a package dot JSON 
首先是这个 "package.json" 文件

6917
06:49:06,040 --> 06:49:09,610
package dot JSON is a file that tells us a lot about our project and the dependencies that it works with.
"package.json" 是一个描述我们的项目以及它的依赖关系的文件

6918
06:49:09,640 --> 06:49:14,920
For example, we've installed the soap package of 0.8 point 13.
举个例子，我们安装了 "solc" 包 0.8.13 版本

6919
06:49:15,130 --> 06:49:18,880
Our yarn dot lock tells us the exact version of all the different packages of our project. 
而 "yarn.lock" 可以告诉我们项目所使用的所有不同的包的确切版本

6920
06:49:18,880 --> 06:49:22,840
For example, the reason this is so important too, 
举个例子，这个东西之所以重要

6921
06:49:22,840 --> 06:49:25,840
is solc has a ton of dependencies as well. 
是因为 solc 自己也有大量的依赖项("dependencies")

6922
06:49:25,840 --> 06:49:29,800
So yarn dot lock tells us exactly what version of solc 
所以 "yarn.lock" 能告诉我们 solc 的确切版本

6923
06:49:30,010 --> 06:49:32,380
and all the different dependencies of solchen. Any other project that we add. 
以及我们添加的所有 solc 所依赖的项目的版本

6924
06:49:32,380 --> 06:49:36,310
This is autogenerated file, don't edit the file directly. 
这一个自动生成的文件，不要直接编辑本文件

6925
06:49:36,340 --> 06:49:39,910
The final bit is we got this node modules folder. 
最后一点是我们得到了这个 "node_modules" 文件夹

6926
06:49:39,910 --> 06:49:43,960
This node modules folder is going to be where all the installed code that we just downloaded is, 
这个文件夹就存放着我们刚刚下载的所有代码

6927
06:49:44,020 --> 06:49:47,950
for example, if we look at node modules, we can see there's a sock folder. 
比如如果我们查看 "node_modules"，能看到一个 solc 文件夹

6928
06:49:47,950 --> 06:49:51,010
And inside this sock folder 
而在这个 solc 文件夹里的

6929
06:49:51,010 --> 06:49:55,570
is all the code associated with this soap package that we just installed.
就是我们刚刚下载的这个 solc 包的所有相关代码

6930
06:49:55,600 --> 06:49:59,290
And since we're working with zero point 8.7 of slowly, 
因为我们正在使用的是 0.8.7 版本的 Solidity

6931
06:49:59,350 --> 06:50:03,370
we actually want to install that specific version. 
所以我们实际要安装这个的特定版本

6932
06:50:03,370 --> 06:50:06,670
So we're going to do yarn add solc at zero point 8.7 Dash fixed 
我们要做的就是 "yarn add solc@0.8.7-fixed"

6933
06:50:06,670 --> 06:50:17,230
and you'll see in our package dot JSON 
现在你可以在 "package.json" 里看到

6934
06:50:17,230 --> 06:50:21,910
you can now see zero point 8.7 Dash fixed in our dependencies section for sulk. 
solc 的依赖项部分变成了 "0.8.0-fixed"

6935
06:50:21,910 --> 06:50:25,780
Normally you can just add your salt version like yarn add zero point 8.7 
一般来说你添加的会是 "yarn add 0.8.7" 这样的版本号

6936
06:50:25,780 --> 06:50:29,530
But there was an issue with zero point 8.7 
但 0.8.7 版本存在一些问题

6937
06:50:29,530 --> 06:50:33,100
So we had to do zero point 8.7 Dash fixed.
所以我们不得不使用 "0.8.7-fixed" 版本

6938
06:50:33,460 --> 06:50:35,140
You can find the different releases and the different versions 
你可以找到不同发行版("Releases")和不同版本

6939
06:50:36,430 --> 06:50:38,200
if you go to sulk Jas releases and then to tags
就在 solcjs 的 "Releases" 里接着选择 "Tags"

6940
06:50:38,200 --> 06:50:41,740
Alright, great. Now that we have sold, we have the ability to actually compile our contracts, 
很好，现在我们有了 solc 就能够编译我们的合约了

6941
06:50:42,940 --> 06:50:45,730



6942
06:50:45,730 --> 06:50:50,590
we could either compile them in our code 
我们可以在我们的代码中一并编译它们

6943
06:50:50,590 --> 06:50:54,190
and have it automatically run whenever we hit Deploy, 
并在部署时自动运行

6944
06:50:54,190 --> 06:51:00,130
or, or we could compile them separately. 
或者是分别编译它们


6945
06:51:00,130 --> 06:51:03,310
If you want to go back after this section 
如果你想在本节之后进行拓展学习

6946
06:51:03,310 --> 06:51:07,120
is an example in the sculpt Jas repository that shows you how to actually compile silk right in your code. 
可以参考 solcjs 仓库中的示例，它向你展示了如何在代码中一并编译 solc

6947
06:51:07,150 --> 06:51:09,790
We are actually going to compile them separately using a soap Jas command. 
这里我们选择使用 solcjs 的命令分别编译它们

6948
06:51:09,790 --> 06:51:14,020
The yarn command is both used to install dependencies and it can be used to run scripts. 
yarn 命令既可以用来安装依赖库，也可以用来运行脚本

6949
06:51:14,020 --> 06:51:17,740
If you go to sulk Jas and you scroll down, 
如果你去到 solcjs 并往下拉

6950
06:51:17,770 --> 06:51:21,910
it says in order to use the command line, you actually need to install it globally. 
它提示为了在命令行中使用，你需要进行全局安装

6951
06:51:21,910 --> 06:51:24,370
If you want to install this globally 
如果你要进行全局安装的话

6952
06:51:24,370 --> 06:51:27,580
using yarn Global Add solc at zero point 8.7 Dash fixed 
使用 "yarn global add solc@0.8.7-fixed"

6953
06:51:27,580 --> 06:51:33,250
you can absolutely go ahead. 
当然你可以选择这么做

6954
06:51:33,250 --> 06:51:36,850
However, since we're inside of this folder here, 
但是，因为我们所在的这个文件夹里

6955
06:51:36,850 --> 06:51:40,450
which has the yarn dot lock the package json and the node modules 
它已经有了 "yarn.lock", "package.json" 以及 "node_modules"

6956
06:51:40,450 --> 06:51:44,230
yarn will be smart enough to know i You're looking for the soak in this folder. 
yarn 足够智能因此知道你正在这个文件夹中寻找 solc

6957
06:51:44,230 --> 06:51:48,250
So we can actually go ahead and compile our contract using yarn and solc Jess 
所以我们可以直接继续并使用 yarn 和 solcjs 编译我们的合约

6958
06:51:48,250 --> 06:51:52,300
if you want to see all the different commands soak Jas allows 
如果你想查看 solcjs 的所有命令

6959
06:51:52,300 --> 06:51:55,540
we can just run yarn. So Jas dash dash help, 
我们可以运行 "yarn solcjs --help"

6960
06:51:55,540 --> 06:52:00,970
and you'll see it'll spit out a list of all the different options that soft Jas has. 
你可以看到它返回了一个包含 solcjs 所有选项的列表

6961
06:52:00,970 --> 06:52:06,340
You can also run yarn, so Jas dash dash version 
你也可以运行 "yarn solcjs --version"

6962
06:52:06,340 --> 06:52:11,200
to just make sure that we're on the correct version, 
以确保我们是在正确的版本上

6963
06:52:11,200 --> 06:52:14,200
which is indeed zero point 8.7. 
版本确实是 0.8.7

6964
06:52:14,740 --> 06:52:18,130
Now to actually compile our simple storage at soul, 
现在准备实际编译一下我们的 "SimpleStorage.sol"

6965
06:52:18,130 --> 06:52:23,710
let's run the compliation command 
让我们来运行编译命令

6966
06:52:23,710 --> 06:52:29,380
we will run yarn, so JS, dash dash bin since we want the binary 
我们要运行的是 "yarn solcjs --bin" 因为我们想要的是二进制文件

6967
06:52:29,380 --> 06:52:37,090
dash dash ABI since we also want the ABI 
"--abi" 因为我们同样想获得 ABI

6968
06:52:37,150 --> 06:52:41,290
dash dash include path node modules. 
"--include-path node_modules/" 

6969
06:52:41,290 --> 06:52:43,870
Since we want to include any contracts or files in our node modules, 
因为我们想包含 "node_modules" 中的所有合约或文件

6970
06:52:43,870 --> 06:52:46,870
we aren't using any for this project, 
本次项目并没有用到其中的全部

6971
06:52:47,530 --> 06:52:52,330
but in the future, you will need to include this dash dash include path node modules 
但未来，你一定会有需要使用 "--include-path node_modules/" 的时候

6972
06:52:52,330 --> 06:52:56,260
do dash dash base path of period, this period means that the base path is going to be this folder 
"--base-path ." 这个句号(".")表示起始路径就是现在这个文件夹

6973
06:52:56,260 --> 06:53:00,640
dash O period, which means we're going to output the compiled binary and ABI to this folder. 
"-o ." 表示编译出来的二进制文件和 ABI 也输出到现在这个文件夹

6974
06:53:00,670 --> 06:53:05,410
And then finally, simple storage dot soul. Since this is the contract that we want to compile, 
最后是 "SimpleStorage.sol" 因为这就是我们想要编译的合约

6975
06:53:05,410 --> 06:53:08,680
auto completed it from simple storage to simple storage. So 
我把 "SimpleStorage" 自动补全为了 "SimpleStorage.sol"

6976
06:53:08,680 --> 06:53:11,770
by typing simple, and then hitting Tab, 
通过输入 "Simple" 再按 "Tab" 键

6977
06:53:12,520 --> 06:53:15,310
but let's go ahead and hit enter, 
让我们继续，敲击回车

6978
06:53:15,310 --> 06:53:19,870
you'll see it's running this command to compile this contract. 
你可以看到它正在运行这个命令来编译这个合约

6979
06:53:19,870 --> 06:53:24,370
And you'll see two files get output. 
并且你可以看到有两个文件输出了出来

6980
06:53:24,400 --> 06:53:27,850
One called Simple Storage soul underscore simple storage that API 
其中一个名为 "SimpleStorage_sol_SimpleStorage.abi"

6981
06:53:27,880 --> 06:53:31,660
in simple storage Sol underscore simple storage dot bin, 
以及 "SimpleStorage_sol_SimpleStorage.bin"

6982
06:53:31,660 --> 06:53:35,920
the ABI is obviously the ABI of this contract, which will need in the future. 
这个 abi 文件很明显就是这个合约的 ABI，之后我们会用到它

6983
06:53:35,920 --> 06:53:39,670
And then the bin is going to be the binary, or the really low level of this code 
然后 bin 文件就是二进制文件，或者说是这个代码真正的底层文件

6984
06:53:39,670 --> 06:53:42,520
back and remix. If you compile simple storage, that soul, 
回到 Remix 如果你编译 "SimpleStorage.sol"

6985
06:53:42,520 --> 06:53:46,570
you can actually look at compliation details, 
其实就可以查看这些编译细节

6986
06:53:46,570 --> 06:53:51,850
like the ABI which we just got, 
比如说我们刚刚得到的 ABI 

6987
06:53:51,850 --> 06:53:59,080
or the bytecode, which if you look at this object 60806 
或者是字节码，如果你看这个 '"object": "60806"' 

6988
06:53:59,110 --> 06:54:02,140
That's the same as the binary here 60806. 
就会发现它和二进制文件里的一样，这里也是 60806

6989
06:54:02,320 --> 06:54:05,890
Alright, great. So now we've compiled our contracts here. 
太好了，所以我们在这里已经编译好了我们的合约

6990
06:54:05,890 --> 06:54:09,640
Now, obviously, now if you hit up on your keyboard, you can actually cycle through your most recent terminal commands. 
现在如果你按键盘上的 "↑"键(上方向键)，可以浏览最近运行的终端命令

6991
06:54:09,640 --> 06:54:12,520
And if you hit up enough, we can see this command that we just ran
如果你按的次数足够，就可以看到我们刚刚运行的这个命令

6992
06:54:12,550 --> 06:54:15,580
typing this out or hitting up a whole bunch every single time,
每次重新编译的时候都输入这个或是再次输入这么一大堆东西

6993
06:54:15,790 --> 06:54:18,820
it's going to be really annoying to do anytime we want to recompile. 
真的会让人感觉很烦躁

6994
06:54:18,850 --> 06:54:22,840
So what we can do 
所以我们可以这样做

6995
06:54:22,840 --> 06:54:26,680
is we can add a script section in our package dot JSON 
在 "package.json" 里添加一个 "scripts" 部分

6996
06:54:26,680 --> 06:54:29,530
to shorten some yarn scripts for us. 
以缩短一些 yarn 运行脚本时的命令长度

6997
06:54:29,530 --> 06:54:33,970
So what we'll do is back in our package, dot JSON, a lot of comma, 
所以我们要进入 "package.json"，加一个逗号

6998
06:54:34,000 --> 06:54:37,000
and we'll add a section called scripts, add the colon and the brackets. 
并且添加一个名为 "scripts" 的部分，别忘了冒号和花括号

6999
06:54:37,000 --> 06:54:42,340
And in here, we'll say anytime we say compile, we will run this long command. 
在这里告诉它，每当我们运行 "compile" 时运行的都是这一长段命令

7000
06:54:42,340 --> 06:54:46,390
So I'd compile we'll put some quotes. And we'll paste that in there. 
所以我们输入引号，并把这些全部粘贴进去

7001
06:54:46,390 --> 06:54:49,660
So now instead of typing that whole thing out, 
现在就不用再输入那一大堆东西了

7002
06:54:49,660 --> 06:54:54,340
as long as we're in the same folder that our package json is in, 
只要我们和这个 "package.json" 处在同一文件夹下就行

7003
06:54:54,340 --> 06:54:57,880
we can run yarn compile. And this will run that whole script for us 
我们可以运行 "yarn compile"，然后它就会运行整个脚本

7004
06:54:57,880 --> 06:55:00,550
without us having to type the whole thing out 
并且我们不用再输入这堆东西了

7005
06:55:00,580 --> 06:55:03,760
scripts are a really useful way to make it easier for us to run long commands. 
"scripts" 是一种非常实用的方法，可以让我们轻松地运行长命令

7006
06:55:03,760 --> 06:55:07,270
All right, great. Now we have our code compiled, 
很好，非常棒，现在我们已经编译好了我们的代码

7007
06:55:07,270 --> 06:55:10,300
this is going to be equivalent to US hitting this compile button 
这和我们点击这个 "Compile" 按钮是等价的

7008
06:55:10,300 --> 06:55:10,780
for us to actually go ahead and deploy.
现在来让我们部署一下它