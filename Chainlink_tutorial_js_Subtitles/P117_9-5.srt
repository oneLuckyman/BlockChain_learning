13875
14:02:30,710 --> 14:02:33,620
So in its minimalistic sense, we essentially have a way for people to enter our raffle. 
从最简化的角度来看，我们已经为用户基本上提供了参与我们抽奖的途径了

13876
14:02:33,620 --> 14:02:37,070
Now we need a way to pick the random winner. And this is where we're going to need chain link VRF and chain link keepers. 
现在我们需要一个方法来选出一名随机的优胜者，这里就要用 Chainlink VRF 以及 Chainlink Keepers 了

13877
14:02:37,100 --> 14:02:40,040
So let's again, watch some sub lessons about learning about chain link VRF. And learning about chain link keepers. 
所以让我们再次观看一些子课程，来学习一下 Chainlink VRF 以及 Chainlink Keepers

13878
14:02:40,040 --> 14:02:43,310
We've made some videos about these before. So we're just going to play these videos. 
我们之前已经制作了一些相关视频，所以我们会直接播放这些视频

13879
14:02:43,340 --> 14:02:46,550
So you can learn about how taling VRF version two works, and also how chain link keepers works, 
你可以学到关于 Chainlink VRF 版本二还有 Chainlink Keepers 的工作原理

13880
14:02:46,550 --> 14:02:49,340
then we're going to come back and we're going to add them into our contracts here. 
然后我们会回到这里，并将它们添加到我们的合约中来

13881
14:02:49,340 --> 14:02:51,440
If you're already familiar, and you already played with them, feel free to skip those sections. 
如果你已经很熟悉，并且使用过它们了，那么你可以自由跳过这些部分

13882
14:02:51,440 --> 14:02:54,320
And we'll just get to building them here.
然后我们会直接开始构建它们

13883
14:02:54,350 --> 14:02:56,870
Hi, my name is Steven fluid. And today we're going to be taking a look at chain links VRF. version two, 
大家好，我是 Stephen Fluin，今天我们要来看一下 Chainlink VRF 版本二

13884
14:02:56,870 --> 14:02:59,090
version two has a few different mental models that we should be aware of. 
VRF 版本二具有一些不同的思维模式，我们应当注意到这一点

13885
14:02:59,090 --> 14:03:01,340
And I want to show you what it feels like to be using it. 
并且我要向你们展示一下它的使用体验是什么样的

13886
14:03:01,340 --> 14:03:03,710
The big important thing to know about Vera version two is that instead of the Vera one model 
VRF 版本二和版本一的模式相比有一个重要的差别需要知道

13887
14:03:04,160 --> 14:03:06,680
where you'd be funding your contract with Link, instead, you're going to be funding a subscription, 
那就是你不再是通过 Link 向你的合约输入资金，而是资助一个订阅

13888
14:03:06,680 --> 14:03:10,160
which is basically an account that allows you to fund and maintain balance for multiple consumer contracts. 
它基本上就是一个允许你为多个用户合约提供资金和维持余额的账户

13889
14:03:10,160 --> 14:03:12,890
Let's dive into the docs and see what using Vera fie two looks and feels like. 
让我们深入到文档中，看一下 VRF 版本二的样子以及它的使用体验

13890
14:03:12,890 --> 14:03:15,440
In order to show this off a little bit. I'm going to dive right into the get a random number guide in the chain link documentation. 
为了展示这一点，我要深入到 Chainlink 文档中的 "Get a Random Number" 指南

13891
14:03:15,440 --> 14:03:18,620
And so it's going to go through a few the requirements of some of the technology we're going to use today. 
它会介绍我们今天要使用的一些技术的一些要求

13892
14:03:18,620 --> 14:03:21,200
And the first thing it's going to ask us to do is to make sure that we are on the Rinkeby test net. 
首先我们要做的是，确保我们已经连上了 Rinkeby 测试网

13893
14:03:21,200 --> 14:03:24,380
So let's go ahead and jump over to Rinkeby. Make sure my meta mask is unlocked here. 
所以让我们先连上 Rinkeby，解锁我的 MetaMask

13894
14:03:24,620 --> 14:03:27,170
And now that I'm on Rinkeby, great, 
现在我已经在 Rinkeby 上了，非常好

13895
14:03:27,170 --> 14:03:31,550
I should be able to use the VIP version to test net. 
我应该能够在测试网上使用 VRF 版本二

13896
14:03:31,550 --> 14:03:34,760
Now we're going to jump over to subscription manager. 
现在我要进入“订阅管理”("Subscription Manager")

13897
14:03:34,760 --> 14:03:37,730
And the subscription manager is where we're going to manage our subscription account. 
"Subscription Manager" 是我们管理订阅账户的地方

13898
14:03:37,730 --> 14:03:40,700
Basically, this is the place that you put the funds in order to be able to use it across a bunch of different chains. 
基本上，这就是你放置资金的地方，以便你能够进行跨链使用

13899
14:03:40,700 --> 14:03:43,160
So we're going to go ahead and connect our wallet here in order to use the subscription app. 
我们继续，连接我们的钱包以使用订阅应用

13900
14:03:43,160 --> 14:03:44,870
And then we're going to go ahead and create a new subscription. 
接着我们来创建一个新的订阅("Create subscription")

13901
14:03:44,870 --> 14:03:47,630
So we'll just use my address as the subscription address here. 
这里我直接用我的地址作为订阅地址

13902
14:03:47,630 --> 14:03:50,120
I'll approve the creation. 
同意创建

13903
14:03:50,120 --> 14:03:53,720
And as soon as that transaction is confirmed, our subscription should be created. 
一旦交易确认，我们的订阅应该也就创建好了

13904
14:03:54,200 --> 14:03:57,890
Alright, now we have a subscription. Basically, this is the account where we're going to fund it. 
好的，现在我们有了一个订阅，也就是我们要注入资金的账户

13905
14:03:58,220 --> 14:04:02,420
And then we can use that account for all of our random Miss requests. 
接着我们就可以用这个账户来进行我们所有的随机数请求

13906
14:04:02,420 --> 14:04:05,630
So I'm gonna go ahead and just put in 10 link here, you can put in however much you want. 
我这里只放入 10 个 "LINK"，你们可以投入任意数额

13907
14:04:05,630 --> 14:04:07,580
The price and link of every random number you request, it's going to be based on the current gas rates on a given chain, as well as the gasoline that you've chosen. 
每次你请求随机数所要花费的价格和 Link 都取决于给定链上当前的 gas 费率，以及你选择的 gas 量

13908
14:04:07,640 --> 14:04:10,370
On our funds have been added, let's go ahead and add a consumer contract. 
好了，资金已添加完毕("Funds added")，让我们开始添加用户合约吧

13909
14:04:10,370 --> 14:04:13,130
So it's asking us for consumer address, we don't actually have a consumer address yet. 
它要求我们提供用户地址，我们其实还没有用户地址

13910
14:04:13,130 --> 14:04:16,010
So let's go ahead and jump over to the documentation and create a contract that is going to request a number. 
所以让我们前往文档并创建一个请求数字的合约

13911
14:04:16,010 --> 14:04:20,090
So if you scroll down, you're going to see this Vera fee to consumer that soul contract 
如果你往下滑，就会看到这里的 "VRFv2Consumer.sol" 合约

13912
14:04:20,150 --> 14:04:22,760
that we can open it in remix, let's just jump right there. 
我们可以直接在 Remix 中打开它，让我们现在转到那里

13913
14:04:22,760 --> 14:04:27,200
We're gonna notice a few different things in this contract 
我们注意到，合约中有这么几个不同的东西

13914
14:04:27,200 --> 14:04:29,420
at the top, we've got some input. So now you've got VRF, consumer base version two, we've got an interface for the VRF coordinator, 
在顶部，我们有一些 "import"，这样你就有了 "VRFConsumerBaseV2" 以及 "VRFCoordinator" 的接口

13915
14:04:29,420 --> 14:04:33,230
and then also a reference to the link token interface. 
并且还同时引用了 "LinkTokenInterface" 

13916
14:04:33,230 --> 14:04:35,300
So all of those are specified for you on the Rinkeby network here in the example code. 
所有这些都为你指定好了 Rinkeby 网络上的信息，这里是代码示例

13917
14:04:35,510 --> 14:04:38,990
And then you can refer to the documentation for whatever chain you're going to be deploying to. 
你可以参考你要部署到的链的文档，以获取这些信息

13918
14:04:38,990 --> 14:04:42,140
And then you're going to see a few new options here. 
在这里你还能看到一些新的选项

13919
14:04:42,140 --> 14:04:46,880
So the key hash option is the way that you specify that gasoline that was described in the documentation. 
"KeyHash" 选项是你在文档中描述指定 gas 使用量的方式

13920
14:04:46,880 --> 14:04:49,520
So depending on the key hash you choose for the given chain you're on the gas limit will be set differently for your random number requests. 
根据给定链上你的 "KeyHash" 选择不同，请求随机数时的 gas 限制的设置也会有所不同

13921
14:04:49,550 --> 14:04:54,320
So for example, on a theory main net, we have a 200 way key hash 500 Wiki hash and 1000 graykey hash. 
举个例子，在以太坊主网上，我们有 "200 gwei KeyHash"，"500 gwei KeyHash" 以及 "1000 gwei KeyHash"

13922
14:04:54,320 --> 14:04:57,320
You can also see in our contract Hear that we have a callback estimate that you're in charge of. So 
你还可以看到，在我们合约中有一个负责 "callbackGasLimit" 的选项

13923
14:04:57,320 --> 14:05:00,290
depending on how much gas you're willing to spend in the fulfill random number, 
它取决于你在生成随机数的过程中愿意花费多少的 gas 

13924
14:05:00,290 --> 14:05:02,780
you should set this value appropriately. 
你应当适当地设置这个值

13925
14:05:02,780 --> 14:05:06,380
Next up is request confirmations. 
下一个是 "requestConfirmations"

13926
14:05:06,380 --> 14:05:09,560
So this was something in verify would be one that you could not control. 
在 VRF 中，这是一个我们不希望受你控制的一个量

13927
14:05:09,560 --> 14:05:12,320
But here now, depending on the chain you're on, depending on the request and the type nature of the request you want to make, 
但根据你所在的链，根据你想要发起的请求的类型和性质

13928
14:05:12,320 --> 14:05:14,960
you can actually change this number. 
你实际上是可以更改这个数字的

13929
14:05:14,990 --> 14:05:18,290
And then one of the most important and useful features that gives you a lot more flexibility and control of your VRF 
接下来是一个最重要且最有用的功能，它能为你的 VRF 提供更高的灵活性和可控性

13930
14:05:18,290 --> 14:05:20,870
is you can actually specify the number of random numbers you want. 
那就是你可以指定你想要的随机数的数量

13931
14:05:20,870 --> 14:05:23,720
And so you specify the number words, and then that will specify how many random you went to 56 as you get back from the network. 
你可以通过指定 "numWords"，进而指定从网络返回多少个 uint256 

13932
14:05:23,720 --> 14:05:27,320
All right here in the constructor, 
这里是构造函数 "constructor"

13933
14:05:27,320 --> 14:05:30,530
we're gonna see a address for the coordinator and address for the link token. 
我们可以看到 "Coordinator" 的地址以及 "LinkToken"

13934
14:05:30,530 --> 14:05:33,620
And then you'll see that the subscription ID is going to be created as we deploy the contract. 
还有我们部署合约时要创建的 "subscriptionID"

13935
14:05:33,620 --> 14:05:35,570
And so I'm gonna go ahead and get that. 
我们继续，获取它

13936
14:05:35,570 --> 14:05:39,620
So if you remember when we created the subscription after we found it, and we see this subscription ID, 
不知道你是否还记得，在我们资金到位后创建订阅时，我们会看到这个 "Subscription ID"

13937
14:05:39,620 --> 14:05:43,190
and now when I deploy this, I'm going to use that subscription ID. 
当我部署它时，就需要用到那个 "subscription ID"

13938
14:05:43,190 --> 14:05:46,370
And we've got two methods that should look very familiar, 
这里有两个方法，应该看起来很熟悉

13939
14:05:46,370 --> 14:05:49,640
we've got fulfill randomness method that takes in randomness is going to be fulfilled by the Bureau of Oracle, 
我们有一个 "fulfillRandom"，它接收一个随机数作为参数，并由预言机的 VRF 完成

13940
14:05:49,640 --> 14:05:53,480
as well as you got request random words, which is how we're actually going to initiate the request to the Oracle. 
还有一个 "requestRandomWords"，它就是我们向预言机发起请求的方法

13941
14:05:53,480 --> 14:05:56,510
So I think we're actually are already ready to go ahead and deploy this. 
我认为我们已经准备好部署它了

13942
14:05:56,510 --> 14:06:00,680
So let's jump to the deploy screen here 
所以让我们转到这里的部署窗口

13943
14:06:00,680 --> 14:06:03,410
and select the right contract, which in our case, is your FB to consumer. 
选择正确的合约，也就是我们的 "VRFv2Consumer"

13944
14:06:03,410 --> 14:06:06,290
And I'm going to make sure that I am on injected web three so that we can actually deploy to the Rinkeby network. 
确保选中的是 "Injected Web3" 这样我们才能把它部署到 Rinkeby 网络上

13945
14:06:06,290 --> 14:06:09,530
And I'm going to paste in the subscription ID here. And I'm going to deploy, 
我要把 "Subscription ID" 粘贴到这里，然后就可以开始部署了

13946
14:06:09,530 --> 14:06:13,640
let's go ahead and pay for that transaction.
让我们继续，支付这笔交易

13947
14:06:13,640 --> 14:06:15,950
And as soon as that is confirmed by the network will show up here, 
一旦网络确认，它就会在这里显示出来

13948
14:06:15,950 --> 14:06:18,050
and we'll be able to copy this address, and then add that as a consumer and authorize this contract to use my subscription account. 
接着我就能复制这个地址，然后将其添加为用户，授权此合约使用我的订阅账户

13949
14:06:18,050 --> 14:06:20,600
So let's go ahead and authorize this with them another Metamask transaction. 
使用 MetaMask 继续进行授权操作

13950
14:06:20,600 --> 14:06:24,200
Alright, we can have your subscription, we can see how much link we funded it with. And we can see our consumer contract. 
好了，现在我们可以查看你的订阅情况，以及我们存入了多少 Link 资金，还可以查看我们的用户合约

13951
14:06:24,200 --> 14:06:26,600
So now by doing this, we've authorized our consumer contract to make requests for randomness. 
通过这些操作，我们已经授权用户合约可以发起随机数请求了

13952
14:06:26,600 --> 14:06:30,350
So let's go ahead and make a request for randomness here. 
所以让我们继续，在这里发起一个随机数请求

13953
14:06:30,350 --> 14:06:34,010
So we're gonna go back to our contract that we deployed here. 
我们回到这里部署的合约

13954
14:06:34,010 --> 14:06:36,800
And we're just gonna use the remix interface here to keep things simple. 
简单起见，我们这里直接使用 Remix 的接口

13955
14:06:36,800 --> 14:06:42,560
And I'm going to request some randomness. 
我将请求一些随机数

13956
14:06:42,560 --> 14:06:45,800
So obviously, this is going to use all of the configuration that I specified in my contract, 
显然，它将使用我在合约中指定的所有配置

13957
14:06:45,800 --> 14:06:48,380
just kind of hard coded here. So we're gonna get to words of random is here. 
都是硬编码的，所以我们会获得 2 个随机数

13958
14:06:48,380 --> 14:06:50,810
So we're gonna hit request randomness, confirm the Rigby transaction. 
点击请求随机数，确认 Rinkeby 的交易

13959
14:06:50,810 --> 14:06:54,260
And then as soon as that transaction comes back, we should notice that we actually have a request. 
一旦交易返回，我们就会注意到有一个请求

13960
14:06:54,260 --> 14:06:56,330
And then what we'll be doing is we'll be waiting for the Oracle to call fulfill random words on our contract. 
然后我们就要等待预言机在我们的合约上调用 "fulfillRandomWords"

13961
14:06:56,330 --> 14:06:59,060
And then we'll be storing all of those random words in this s random words, storage variable. 
接着我们会把这些随机数存到这个 "s_randomWords" 里，它是一个 storage 变量

13962
14:06:59,060 --> 14:07:01,520
Let's go ahead and check to see if our random numbers come back from the Oracle. 
让我们来检查一下预言机是否已经返回了随机数

13963
14:07:01,520 --> 14:07:05,000
So I'll go in here into random words. And let's request the zeroeth item of the array 
来到这里的 "s_randomWords"，并请求数组的第 "0" 个元素

13964
14:07:05,000 --> 14:07:07,940
looks like we've got a random number there. 
看起来我们已经获取到随机数了

13965
14:07:07,940 --> 14:07:10,970
And because we requested two random numbers, we should also have an item in index one. 
因为我们请求的是两个随机数，所以我们还可以把选项设置为 "1" 

13966
14:07:10,970 --> 14:07:13,130
All right, we we've got our randomness there. 
很好，我们获取到了相应的随机数

13967
14:07:13,130 --> 14:07:15,830
And if we go back to the subscription manager app, 
如果我们回到 "Subscription Manager" 这里

13968
14:07:15,830 --> 14:07:18,620
you're going to see that there's actually an event history item here, 
你会看到这里有一个 Events 历史记录("History")

13969
14:07:19,010 --> 14:07:21,800
we'll see that we spent about point three, three link to get those two random numbers, 
可以看到请求两个随机数花费了大约 "0.33" Link 

13970
14:07:21,800 --> 14:07:24,800
we've just taken a journey to see what it looks like and feels like to use Veera version two, 
我们已经完成了对 VRF 版本二以及它使用体验的探索

13971
14:07:24,800 --> 14:07:26,900
now that we've learned a little bit more about chainlink VRF, 
现在我们已经对 Chainlink VRF 有了一些更多的了解

13972
14:07:27,770 --> 14:07:29,990
I hope that you took some time to go to doxa chain link and play around with it a little bit 
希望你可以前往 "docs.chain.link" 并且花一些时间体验和使用一下它

13973
14:07:29,990 --> 14:07:33,140
so that you understand what's really going on, 
这样你才能真正理解它是如何运作的

13974
14:07:35,870 --> 14:07:38,660
we're going to use this sample contract in here to create our function that's going to pick our random winner.
我们将使用这里的示例合约来创建一个函数，用它来选出我们的随机优胜者

13975
14:07:38,660 --> 14:07:41,690
This is an on chain contract that coordinates with a verifiably random chain link node to give us a random number, 
这是一个链上合约，它与可验证的随机 Chainlink 节点协作，为我们提供随机数

13976
14:07:41,690 --> 14:07:45,860
you could look at the code directly on chain, or you can come right to the chain link GitHub and 
你可以直接在 "chain" 上查看代码，或是来到 Chainlink 的 GitHub 

13977
14:07:45,860 --> 14:07:51,830
look at all the code for how this is actually happening provably and randomly. 
查看所有代码，以了解它是如何可验证和随机的

13978
14:07:51,830 --> 14:07:52,790
And we'll have a link to this in the GitHub repo associated with this course. 
我们会在课程关联的 GitHub 仓库中提供这个链接