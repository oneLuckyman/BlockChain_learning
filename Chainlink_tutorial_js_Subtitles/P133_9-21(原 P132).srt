15386
15:37:11,210 --> 15:37:13,880
Now if we run Hardhead test, let's just test everything together right now. 
现在如果我们运行 `hh test` 直接测试所有的内容

15387
15:37:13,880 --> 15:37:17,510
And everything is passing. Oh, this is wonderful. 
哦~ 全都通过了，真是太爽了

15388
15:37:17,510 --> 15:37:20,690
Awesome. Let's keep it going. 
好极了，让我们继续前进

15389
15:37:20,690 --> 15:37:24,380
And if we run Hardhead coverage, we'll see our coverage is bumping up, 
如果我们运行 `hh coverage` 就会看到覆盖率正在提高

15390
15:37:24,410 --> 15:37:27,740
we are already drastically better than where we were before. 
目前的覆盖率已经远远超过了之前的水平

15391
15:37:27,740 --> 15:37:31,130
Let's keep going well, let's go ahead and test our check upkeep now. 
现在让我们继续前进，测试一下我们的 "checkUpkeep" 

15392
15:37:31,130 --> 15:37:34,970
So we'll do describe, check upkeep. And this will be an async function, 
我们执行 `describe("checkUpkeep")` 这里是一个 `async function`

15393
15:37:34,970 --> 15:37:35,570
where we'll say it returns false. If people have been sent an E, E, 
这里面写 `it("returns false if people haven't sent any ETH")

15394
15:37:36,230 --> 15:37:44,990
it's been a sync function.
这里是一个 "async function" 

15395
15:37:45,560 --> 15:37:49,790
So we'll have everything in here be true except for the fact that nobody's entered yet. 
这里的所有内容都是 true 不过事实上并没有人参与

15396
15:37:49,970 --> 15:37:53,630
So we'll do a weight network dot provider dot send EVM increase time, comma interval.to number plus one
所以我们执行 `await network.provider.send("evn_increaseTime", [interval.toNumber() +1])

15397
15:37:53,630 --> 15:37:57,920
will do a weight network dot provider. That send UVM mine. No parameters. 
再执行 `await network.provider.send("evm_mine")` 没有参数