6387
06:17:01,480 --> 06:17:04,780
All right, this is fantastic. At this point, you should be set up with Visual Studio Code no Jas and get. 
太好了，真是太棒了。现在，你应该已经配置好了 Visual Studio Code, node.js 以及 Git。

6388
06:17:04,780 --> 06:17:09,520
And I'm going to be working out of a folder called Hard Hat Free Code Camp 
并且我将在一个名为 Hard Hat Free Code Camp(hh-fcc) 的文件夹下进行工作

6389
06:17:09,520 --> 06:17:12,550
at this point, you should have 
现在，你应该已经有了 

6390
06:17:12,550 --> 06:17:18,700
node, dash dash version, get dash dash
node --version 以及 git --version

6391
06:17:18,700 --> 06:17:22,930
And if you're using Windows, 
如果你使用的是 Windows

6392
06:17:22,930 --> 06:17:26,050
this should say WsL or your boon to or something like that. 
这里应该显示 WSL 或者 Ubuntu 或者其他类似的东西

6393
06:17:26,080 --> 06:17:29,650
And if you have all that, that means we're ready to go. 
如果这些你都有了，那就表示我们已经准备好了

6394
06:17:29,650 --> 06:17:33,340
Now a quick note something that you'll see me do a lot. And you can do this as well. 
现在我会对我经常做的一些操作做一个快速的解释，你也可以这样做

6395
06:17:33,490 --> 06:17:36,130
Oftentimes, when my terminal gets really, really big, or there's a ton of commands in here 
通常，当我的终端变得非常非常大，或者是有成吨的命令放在这里时

6396
06:17:36,130 --> 06:17:39,160
gets a little bit overwhelming for me. 
会让我感到有些困扰

6397
06:17:39,160 --> 06:17:42,580
So one thing that you can do is you can type clear, and hit Enter to clear it. 
你可以做的一个操作是输入 "clear"，并按回车以清除它们

6398
06:17:42,580 --> 06:17:47,560
Or what you can do is you can hit Command K, if you're on a Mac, 
你也可以按 "Command + k"，如果你是在 Mac 上

6399
06:17:47,560 --> 06:17:52,300
or Ctrl K, if you're on a Linux or a Windows, 
或者是 "Ctrl + k"，如果你是在 Linux 或 Windows 上

6400
06:17:52,300 --> 06:17:54,550
and it's one of my favorite keyboard shortcuts that I use all the time. 
这是我最喜欢的快捷键之一，我经常会使用它

6401
06:17:54,550 --> 06:17:58,930
Additionally, the trash can and the X here are very different. 
另外，这里的终止键和X键是非常不同的

6402
06:17:58,930 --> 06:18:02,590
If I go to a couple of enters here, and we're down here, 
比如说我在这里按几次回车，我们现在处于这个位置

6403
06:18:02,590 --> 06:18:06,280
if I hit the trashcan, and then pull my terminal back up,
如果我点击关闭，然后再把我的终端打开

6404
06:18:06,580 --> 06:18:10,090
by doing the toggle, or by doing terminal new terminal, 
通过切换，或是通过“终端-新建终端”

6405
06:18:10,090 --> 06:18:13,870
you'll see all those lines are still here. 
你可以看到这些行仍然还在这里

6406
06:18:14,260 --> 06:18:17,320
But if I hit the trashcan, and then pull the terminal back up, 
但如果我点击终止按钮，再把终端打开回来

6407
06:18:17,320 --> 06:18:22,090
you'll see it actually refreshes mine a special command that prints stuff out. 
你会看到它刷新了我的一个特殊指令，打印这些东西

6408
06:18:22,090 --> 06:18:24,400
trashing your terminal is basically deleting whatever's running in it, 
终止你的终端基本上就是删除其中运行的所有东西

6409
06:18:24,400 --> 06:18:29,380
and the x is just hiding it. 
而X键只是暂时隐藏它

6410
06:18:29,380 --> 06:18:32,170
And as hitting Ctrl tilde or toggling our terminal or whatever command it is on your environment, 
无论是使用 "Ctrl + ~" 还是切换我们的终端，或是你环境中的任何此类命令

6411
06:18:32,170 --> 06:18:35,470
that's equivalent to hitting the hide, not the trash. 
它都相当于点击隐藏而不是终止

6412
06:18:35,470 --> 06:18:38,860
So if we want to remove and start a terminal over, 
所以，如果我们想删除并重新启动一个终端

6413
06:18:38,860 --> 06:18:42,670
we hit the trashcan, and then we pull it back up. 
我们需要点击终止，然后再把它打开

6414
06:18:42,670 --> 06:18:44,980
Alright, so now we're gonna start working with ethers. 
好了，现在我们就要开始使用 ethers

6415
06:18:44,980 --> 06:18:48,670
And we're going to start learning to code, our transactions and our contract deployments 
我们将开始学习代码，交易，合约部署

6416
06:18:48,670 --> 06:18:51,730
and everything programmatically at a relatively low level. 
以及一切以编程形式存在的相对底层的东西

6417
06:18:51,730 --> 06:18:54,460
And we're gonna learn how to deploy and interact with the contracts using the ethers JS package. 
我们将学习如何使用 ethers.js 包部署合约并与之交互

6418
06:18:54,460 --> 06:18:58,030
Now to get started,
现在让我们开始吧

6419
06:18:58,060 --> 06:19:00,670
I'm going to recommend you create a folder 
我建议你新建一个文件夹

6420
06:19:00,670 --> 06:19:02,740
where you're going to put all of your projects in it, 
并把你所有的项目都放到这个文件夹里

6421
06:19:02,740 --> 06:19:07,960
I'm going to create a new directory called H H. hyphen, FCC, 
我现在就新建一个文件夹名字叫 "hh-fcc" 

6422
06:19:07,960 --> 06:19:11,110
which stands for hard hat Free Code Camp. 
表示 "Hardhat Free Code Camp" 

6423
06:19:11,110 --> 06:19:15,520
And once we run that command, we can cd into hh FCC. 
运行完这个命令，我们就可以使用 "cd" 进入 "hh-fcc"

6424
06:19:15,520 --> 06:19:18,430
And this is where we'll create all of our projects for this course moving forward, so that we have them all in one place. 
这里就是我们这门课程用来创建所有项目的地方，它们全部放在这一个地方

6425
06:19:18,430 --> 06:19:21,640
Now to get started, whenever you create a new project, 
现在开始，每当你创建一个新项目时

6426
06:19:21,640 --> 06:19:25,210
you always want to create a new folder. 
你都要想着创建一个新文件夹

6427
06:19:25,210 --> 06:19:28,450
So to create a new folder, we're going to do MK dir, 
要想新建一个文件夹，我们输入 "mkdir"

6428
06:19:28,450 --> 06:19:35,950
and we're going to call this ethers, simple storage, like that. 
并把它叫做 "ethers-simple-storage" 就像这样

6429
06:19:35,950 --> 06:19:40,900
And now, if you type ls, you'll see that there is one folder named ethers, simple storage. 
现在，如果你输入 "ls"，你就会看到一个文件夹，名字是 "ethers-simple-storage"

6430
06:19:40,930 --> 06:19:45,670
ls is how you list all the contents of your folder. 
"ls" 就是你用来显示文件夹内所有内容的方法

6431
06:19:45,850 --> 06:19:49,450
You might have a lot of other folders in here, 
也许你这里还有很多其它文件夹

6432
06:19:49,450 --> 06:19:52,210
I only have the one since I created this new folder for this. 
而我这只有一个，因为这是我新建一个的文件夹

6433
06:19:52,210 --> 06:19:57,490
Now what you can do, you can type code, ethers simple.
现在你能做的是，可以输入 "code ethers-simp"

6434
06:19:57,880 --> 06:20:01,690
And then if you hit tab, it should autocomplete for you. 
这时如果你按下 "tab" 键，它应该会自动为你补全

6435
06:20:01,690 --> 06:20:06,940
And if you enter, Visual Studio code should open up 
按下回车，Visual Studio Code 就会给你打开

6436
06:20:06,940 --> 06:20:12,700
a new Visual Studio code for you. 
一个新的 Visual Studio Code

6437
06:20:13,060 --> 06:20:16,060
That is inside of either simple storage 
它位于 "ethers-simple-storage" 里面

6438
06:20:16,060 --> 06:20:19,240
if you open up your terminal now, 
如果你现在打开终端

6439
06:20:19,240 --> 06:20:23,020
your home directory for this workspace is going to be through simple storage as this is what pops up. 
你所处的工作区目录就是 "ethers-simple-storage"  就和这里弹出来的这个一样

6440
06:20:23,020 --> 06:20:28,900
If that doesn't work for you, we can also do is you can hit File, Open folder 
如果你的情况不是这样的，我们也可以通过点击 "文件-打开文件夹"

6441
06:20:28,900 --> 06:20:32,530
and then open the folder that you just created or that you want to open 
并打开你刚刚创建的文件夹或是你想打开的其他文件夹

6442
06:20:32,530 --> 06:20:35,680
this again we'll open up VS code. And if we open up our terminal 
这将再次打开 VS Code，并且如果我们打开终端

6443
06:20:35,680 --> 06:20:38,980
we see we're inside of ether simple storage. 
能看到我们就在 "ethers-simple=storage" 里面

6444
06:20:38,980 --> 06:20:40,030
This is so powerful because as we create files
这一点非常强大，因为当我们创建文件时

6445
06:20:41,560 --> 06:20:45,760
we'll be able to See those files in our Explorer here, 
我们能在这里的资源管理器中直接看到它们

6446
06:20:45,760 --> 06:20:48,850
this button here stands for the Explorer. 
这个按钮表示资源管理器

6447
06:20:48,850 --> 06:20:51,220
If we click it, we can see the different files in here. 
如果我们点击它，可以在这里查看不同的文件

6448
06:20:51,220 --> 06:20:54,700
And I'm going to go ahead and actually delete this file dot txt, because we're not actually going to use that. 
我要把这个 "file.txt" 删除掉，因为我们其实并不会用到它

6449
06:20:54,700 --> 06:20:57,430
Now it's this part of the course, where we're actually going to start jumping into some JavaScript. 
现在开始的这部分课程，我们要讲一些 JavaScript 的知识

6450
06:20:57,430 --> 06:21:01,180
Since this course is in JavaScript course, 
因为本课程是一门基于 JavaScript 的课程

6451
06:21:01,180 --> 06:21:04,270
if you're unfamiliar with JavaScript, 
如果你不太熟悉 JavaScript

6452
06:21:04,270 --> 06:21:07,630
it might be a little bit tricky. 
可能会感到有些棘手

6453
06:21:07,630 --> 06:21:10,000
If you want to come into this with a better understanding of JavaScript and Node js, 
如果你想进一步更好地理解 JavaScript 和 Node.js

6454
06:21:10,000 --> 06:21:14,230
there is a Free Code Camp YouTube video teaching No, Jas for beginners. 
这里有一个 Free Code Camp 的 YouTube 视频，为初学者教授 Node.js 

6455
06:21:14,230 --> 06:21:17,530
And a link to this will be in the GitHub repo associated with this course. 
链接就在课程关联的 GitHub 仓库内

6456
06:21:17,530 --> 06:21:20,800
There's also a JavaScript  video 
同样还有一个 Free Code Camp 的 JavaScript 视频

6457
06:21:20,800 --> 06:21:23,680
that I'm also going to put in the description for this course, 
我会把它也一并放到本课程的描述中去

6458
06:21:23,680 --> 06:21:26,770
keep in mind that JavaScript and Node js are slightly different. 
请记住 JavaScript 和 Node.js 还是有一些不同的

6459
06:21:26,770 --> 06:21:29,710
And we are going to go over some of the differences as we code along here. 
我们在写代码的时候会讲到这些不同之处

6460
06:21:29,710 --> 06:21:33,190
But for the most part,
但在绝大多数情况下

6461
06:21:33,190 --> 06:21:35,680
learning one means you've learned the majority of the other. 
学会其中一个就意味着你也学会了另一个的绝大部分

6462
06:21:35,680 --> 06:21:38,590
So if you want to pause and go through these videos, before continuing here, 
所以你要是打算现在暂停下来，并在继续之前先去看一下这些视频的话

6463
06:21:38,590 --> 06:21:42,280
please feel free to do so 
请按照你的需求自行决定吧

6464
06:21:42,310 --> 06:21:45,910
you don't have to, you can absolutely continue on with the course as is. 
这也不是必须的，你完全可以接着继续本课程的学习

6465
06:21:45,910 --> 06:21:50,470
And if you get confused or stuck on some JavaScript piece,
如果你对某些 JavaScript 的内容感到困惑

6466
06:21:50,620 --> 06:21:54,100
feel free to pause, Google it and come back. 
随时暂停，Google 一下然后再回来

6467
06:21:54,100 --> 06:21:56,170
But just to reiterate, you can check out the JavaScript programming full course. 
不过重申一下，你可以先查看 JavaScript 编程的完整课程

6468
06:21:56,170 --> 06:22:00,130
And also the Node js full course, as those are both going to help you. 
当然还有 Node.js 的完整课程，因为它们都能对你有所帮助

6469
06:22:00,130 --> 06:22:03,400
Like I was saying before, Node js is a JavaScript runtime. 
正如我之前所说的，Node.js 是 JavaScript 运行的 

6470
06:22:03,400 --> 06:22:08,230
So it's not exactly JavaScript. 
所以它并不完全是 JavaScript

6471
06:22:08,230 --> 06:22:10,990
But we're going to write our code in JavaScript. 
但我们要用 JavaScript 来编写代码

6472
06:22:10,990 --> 06:22:14,230
And if that's confusing, just don't worry about it right now. 
如果这让你感到困惑，请暂时不要担心这个

6473
06:22:14,230 --> 06:22:17,110
And as we go through this course, I'll show you where the differences are.
当我们完成这门课时，我会告诉你它们的区别在哪

6474
06:22:17,440 --> 06:22:20,320
But basically, you can think of no Jas and JavaScript kind of being the same thing. 
但基本上来说，你可以认为 Node.js 和 JavaScript 就是同样的东西

6475
06:22:20,320 --> 06:22:23,800
The big thing about Node js is it allows us to write JavaScript code in the back end, 
Node.js 最重要的一点是它允许我们在后端编写 JavaScript 代码

6476
06:22:23,800 --> 06:22:27,970
as opposed to running JavaScript on the front end, 
而不是在前端运行 JavaScript

6477
06:22:28,000 --> 06:22:31,090
JavaScript is made to be a browser run language, 
JavaScript 是一种运行在浏览器上的语言

6478
06:22:31,090 --> 06:22:35,200
like running inside of, you know, Chrome, brave Firefox, etc. 
比如说运行于 Chrome，Brave，Firefox 等等

6479
06:22:35,200 --> 06:22:40,780
No, Jas allows it to become a a scripting language, a back end language, 
Node.js 允许它成为一种脚本语言，后端语言

6480
06:22:40,780 --> 06:22:43,840
which is why the syntax between the front end JavaScript and the back end JavaScript 
这就是为什么前端 JavaScript 和后端 JavaScript

6481
06:22:43,840 --> 06:22:46,930
or the no JS JavaScript are going to be a little bit different. 
或 Node.js JavaScript 的语法之间会有一些不同

6482
06:22:46,930 --> 06:22:49,330



6483
06:22:49,330 --> 06:22:52,120
Additionally, as we go along in this code, 
此外，当我们编写代码的时候

6484
06:22:52,120 --> 06:22:56,290
if you're familiar with TypeScript, 
如果你更熟悉 TypeScript 的话

6485
06:22:56,290 --> 06:22:59,200
all of our code is going to come with a TypeScript edition. 
所有的代码都附带了一个 TypeScript 版本

6486
06:22:59,200 --> 06:23:03,340
TypeScript is what's known as a statically typed version of JavaScript. 
TypeScript 就是所谓的 JavaScript 的静态类型版本

6487
06:23:03,340 --> 06:23:05,650
And it'll be it'll be this one. It'll be TypeScript, not TypeScript edition. 
是 typescript 这个，而不是 typescript-edition 这个

6488
06:23:05,650 --> 06:23:08,440
I'll go ahead and fix that and remove this one to make it clear. 
我会修改一下，把这个去掉，让它更清晰一些

6489
06:23:08,440 --> 06:23:11,260
TypeScript is a type safe version of JavaScript, 
TypeScript 是 JavaScript 的一种安全版本

6490
06:23:11,290 --> 06:23:14,350
which is that's confusing, don't worry too much about that. 
如果你暂时搞不明白，也不要太担心

6491
06:23:14,350 --> 06:23:17,110
But we are going to do all of our programming in JavaScript. 
我们在编程过程中使用的是 JavaScript

6492
06:23:17,110 --> 06:23:20,170
And then if the code is different enough, 
但如果代码的差异足够大

6493
06:23:20,170 --> 06:23:22,600
I'll show you how to do it in TypeScript as well.
我也会展示一下 TypeScript 应该怎么做

6494
06:23:22,690 --> 06:23:24,460
However, for most of them, we're not going to show you the TypeScript editions, 
然而，它们其中的大多数，我们都不会展示 TypeScript 版本的过程

6495
06:23:24,460 --> 06:23:26,950
because it's going to be really similar.
因为它们实在是太相似了

6496
06:23:27,040 --> 06:23:30,250
But you can always refer back to the GitHub repository to see all the code for the TypeScript. 
但你可以随时参考 GitHub 仓库以查看完整的 TypeScript 代码

6497
06:23:30,250 --> 06:23:32,980
Now, if you're new to this space, 
如果你是这个领域的新手

6498
06:23:32,980 --> 06:23:36,850
I actually do recommend you go ahead and start with JavaScript 
那我真的非常建议你从 JavaScript 开始学起

6499
06:23:36,850 --> 06:23:40,180
and learn how to do TypeScript later on. 
并在那之后学习如何使用 TypeScript

6500
06:23:40,180 --> 06:23:45,430
TypeScript actually catches bugs early on, 
TypeScript 可以让你更早地捕捉到 bug

6501
06:23:45,460 --> 06:23:48,820
making it a lot easier to code your projects in the long run. 
从长远来看，这使得项目代码的编写变得更加容易

6502
06:23:48,820 --> 06:23:52,330
However, it does take a lot of extra typing. 
然而，它确实需要大量额外的输入

6503
06:23:52,330 --> 06:23:55,600
And it can be a little bit frustrating learning how types work for beginners, 
并且对初学者来说，学习 Type 如何运作的过程可能是令人沮丧的

6504
06:23:55,600 --> 06:23:59,080
JavaScript is a little bit more loose as a language 
JavaScript 作为一种语言比较宽松，我们可以做任何想做的事

6505
06:23:59,080 --> 06:24:01,840
and lets us kind of do whatever we want, but it can cause a headache later on. 
但之后会让人头疼

6506
06:24:01,840 --> 06:24:04,870
So if you do run into some issues, and you do run into some bugs, 
所以如果你确实遇到了一些问题，确实遇到了一些 bug

6507
06:24:04,870 --> 06:24:08,380
it might be a good idea to try TypeScript on for size, and see how that fares. 
那么尝试一下 TypeScript 可能是一个好主意，看看结果如何

6508
06:24:08,380 --> 06:24:11,290
Well. Let's go ahead and begin working on our local development environment 
好了，让我们开始在我们的本地开发环境中工作

6509
06:24:11,290 --> 06:24:14,710
and getting set up to do everything in ethers Jas and in JavaScript. 
并准备好在 ethers.js 和 JavaScript 中要做的所有事

6510
06:24:14,710 --> 06:24:17,710
Oops. And I actually went and renamed this folder to ether symbol storage dash, FCC. 
哦，其实我把这个文件夹重命名成了 "ethers-simple-storage-fcc"

6511
06:24:17,710 --> 06:24:22,750
Reason I added this dash FCC 
之所以我添加了这个 "-fcc"

6512
06:24:22,750 --> 06:24:26,500
is all the GitHub repositories associated with this course, 
是因为与本课程关联的所有 Github 仓库

6513
06:24:26,500 --> 06:24:30,220
all the GitHub repos that have this dash FCC 
这些 GitHub 仓库都有这个 "-fcc"

6514
06:24:30,220 --> 06:24:33,160
to know that it is part of this hard hat JavaScript course.
这是为了让大家知道这是 JavaScript Hardhat 课程的一部分

6515
06:24:33,250 --> 06:24:36,550
Awesome. Let's jump in. Let's start working with solidity and our smart contracts 
太棒了，让我们出发吧，让我们开始在我们的智能合约中使用 solidity

6516
06:24:36,550 --> 06:24:39,970
locally in Visual Studio code, 
并且是在本地的 Visual Studio Code 中

6517
06:24:39,970 --> 06:24:43,870
as you can probably tell by the name of this folder. 
可能从这个文件夹的名字就可以看出来

6518
06:24:43,870 --> 06:24:46,960
And of course, if you looked at the code, 
如果你来查看代码

6519
06:24:46,960 --> 06:24:51,970
this project is going to be our simple storage project, 
就会发现这个项目就是我们的 "simple storage" 项目

6520
06:24:52,000 --> 06:24:54,820
but developed locally using ethers. 
但这次是在本地的 ethers 上开发的

6521
06:24:54,820 --> 06:24:57,760
So the first thing that we want to do is want to get in that smart contract code. 
所以我们要做的第一件事就是进入智能合约的代码

6522
06:24:57,760 --> 06:25:01,900
So what we can do is make sure we have the Explorer selected, 
我们要做的就是选中资源管理器

6523
06:25:01,930 --> 06:25:09,490
we can go ahead and right click and select new file 
继续右键单击并选择 "新建文件(New File)"

6524
06:25:10,270 --> 06:25:13,060
and do simple storage. So just close this for now. 
并输入 "SimpleStorage.sol"，暂时先关闭这个

6525
06:25:13,060 --> 06:25:14,350
And we can copy paste our simple storage code from our last section into VS code.
然后我们可以把上节课的 simple storage 代码复制到 VS Code 中

6526
06:25:15,670 --> 06:25:18,640
If you closed remix or you forgot where it is, 
如果你已经把 Remix 关了或是忘记把代码放到哪里了

6527
06:25:18,640 --> 06:25:23,230
you can just go to the ethers simple storage FCC repo, 
那你可以去 "ethers-simple-storage-fcc" 仓库

6528
06:25:23,230 --> 06:25:27,760
it's simple storage dot Sol, and we can just copy all the code in here 
找到 "SimpleStorage.sol" 并复制这里的所有代码

6529
06:25:27,760 --> 06:25:31,840
and then come back over select Symbol storage that Saul and paste it in. 
然后返回这里，选中 "SimpleStorage.sol" 粘贴进去

6530
06:25:31,840 --> 06:25:35,560
Now an important note about Visual Studio code 
现在要讲一个关于 Visual Studio Code 的重要说明

6531
06:25:35,560 --> 06:25:39,430
is that when you see this little white.up here, 
就是当你在这里看到一个小白点时

6532
06:25:39,460 --> 06:25:45,610
it means that this file isn't saved 
它的意思是这个文件还没有被保存

6533
06:25:45,610 --> 06:25:50,680
to save your Git file. To save, and it'll go away like that. 
要想保存的话你可以点击 "文件(File)-保存(Save)"，然后它就会消失不见了

6534
06:25:51,340 --> 06:25:55,840
Or what you can do is you can hit command S or Ctrl S, depending on if you're on a Windows, Mac, or Linux. 
或者你可以按 "Command + S" 或 "Ctrl + S"，取决于你用的是 Windows，Mac 或者 Linux

6535
06:25:55,840 --> 06:25:58,540
Now you'll see here that this code is a little bit hard to read the simple storage dot salt, 
正如你所见的，这个代码有些不便阅读，就是这个 "SimpleStorage.sol"

6536
06:25:58,540 --> 06:26:01,660
it doesn't have the syntax highlighting that we saw in remix. 
它并没有我们在 Remix 里见到过的那种语法高亮

6537
06:26:01,660 --> 06:26:04,420
So we want to go ahead and add a Visual Studio Code extension 
所以我们现在要添加 Visual Studio Code 的扩展(Extension)

6538
06:26:04,420 --> 06:26:08,830
to give this syntax highlighting. 
以提供语法高亮功能

6539
06:26:08,830 --> 06:26:11,830
So what we can do 
我们该怎么做呢

6540
06:26:11,830 --> 06:26:14,830
is come over to this bar over here looks like this. 
到这里的这一栏来，就是这一个

6541
06:26:14,830 --> 06:26:17,560
And if you don't see it on the left hand bar, 
如果你在左侧栏里没有看到它

6542
06:26:17,560 --> 06:26:20,950
you should click these three dots, and it should be in here. 
那你需要点击这三个小点，它应该就在这里

6543
06:26:20,950 --> 06:26:27,010
But we'll go ahead and click Extensions. And what we're going to do is we're going to look up, solidity plus hard hat. 
继续点击扩展，我们要做的就是向上看，输入 "solidity + hardhat"

6544
06:26:27,790 --> 06:26:30,940
And we're going to install this solidity plus hard hat extension. For VS code. 
然后为 VS Code 安装这个 "solidity + hardhat" 扩展

6545
06:26:30,940 --> 06:26:35,080
Now that we have this installed, 
现在我们已经安装好了

6546
06:26:35,080 --> 06:26:38,830
if we go back over to our simple storage dot sole, 
如果我们回到我们的 "SimpleStorage.sol"

6547
06:26:38,830 --> 06:26:42,670
you'll see that all the highlighting is back in. 
你就会看到所有高亮都已经出现了

6548
06:26:42,850 --> 06:26:45,220
And now it's much easier to read. 
现在明显更容易阅读了

6549
06:26:45,220 --> 06:26:49,570
Right? So this is good. We have our code in here we have our syntax highlighting. 
很好，我们已经有了代码，还有了语法高亮

6550
06:26:49,570 --> 06:26:52,810
Now let's add an auto format or or default format or 
现在让我们添加一个自动格式化或者说默认格式化的程序

6551
06:26:52,810 --> 06:26:57,730
right now our code is pretty good with the way that it's formatted. 
现在我们的代码的格式化程度已经很不错了

6552
06:26:57,730 --> 06:27:05,170
But what if we, we accidentally do some stuff like this or like this, 
但如果我们，我们不小心做了一些类似这样或这样的事

6553
06:27:05,170 --> 06:27:08,830
or maybe even like this, we add a ton of new lines, etc, 
甚至可能是这样，我们添加了成吨的空行，等等

6554
06:27:08,830 --> 06:27:12,610
our code can start to look pretty gross. 
我们的代码现在看起来很恶心

6555
06:27:12,610 --> 06:27:15,760
And even though the code itself is fine, 
即使这个代码本身并没有什么问题

6556
06:27:15,760 --> 06:27:18,520
and it'll run the exact same way, with all this extra whitespace, 
它也确实会按照正确的方式运行哪怕是有这些额外的空白区域

6557
06:27:18,520 --> 06:27:22,660
it doesn't look very good, right. 
但它看起来就是不太好，对吧

6558
06:27:22,720 --> 06:27:26,230
And due to that, it can be a little bit hard to read. What we want to do, then, we want to open up our settings and adjust our vias code so that it auto formats whenever we


6559
06:27:26,230 --> 06:27:30,580
save, so whenever we save, so that whenever it goes from the


6560
06:27:30,580 --> 06:27:34,120
little white dot here to no white dot, this whole thing gets


6561
06:27:34,150 --> 06:27:38,740
automatically formatted to some looks really nice. Okay. So what


6562
06:27:38,740 --> 06:27:42,970
we can do is we can open up our command palette to open up our


6563
06:27:42,970 --> 06:27:46,930
command palette, you can hit View command palette, and we'll


6564
06:27:46,930 --> 06:27:50,050
get a little pop up that looks like this. Another way to open


6565
06:27:50,050 --> 06:27:52,870
up your command palette is you're gonna hit Command, Shift


6566
06:27:52,900 --> 06:27:57,040
P, or Ctrl, Shift P, depending on your Mac, or Linux or


6567
06:27:57,040 --> 06:28:00,370
Windows. And what we want to do is we want to type in settings,


6568
06:28:00,400 --> 06:28:03,490
and we're going to open Settings JSON, we don't want to open the


6569
06:28:03,490 --> 06:28:07,690
default settings JSON. We don't want to touch these. But we want


6570
06:28:07,690 --> 06:28:10,360
to open our JSON settings. You'll also notice there are


6571
06:28:10,360 --> 06:28:13,720
user settings and workspace settings. These are pieces that


6572
06:28:13,720 --> 06:28:16,960
we can adjust as well. But we're going to just go right into the


6573
06:28:16,960 --> 06:28:20,470
JSON settings. So So I already have some stuff in here, but


6574
06:28:20,470 --> 06:28:23,500
yours might be blank. Or you might have some stuff in here as


6575
06:28:23,500 --> 06:28:25,750
well. So what we're going to do is if you have stuff in here


6576
06:28:25,750 --> 06:28:29,320
already, we're going to add a comma, then we're going to do


6577
06:28:29,350 --> 06:28:36,820
quotes, solidity. Close the brackets, we're gonna do a


6578
06:28:36,820 --> 06:28:39,610
little colon and something like this. This means that we're


6579
06:28:39,610 --> 06:28:43,000
going to apply some settings to our Visual Studio Code. Whenever


6580
06:28:43,000 --> 06:28:45,790
we're working with solidity, one of the things we're going to add


6581
06:28:45,790 --> 06:28:50,260
in here is going to be an editor, Doc's default, for


6582
06:28:50,260 --> 06:28:55,660
matter. And you might even get a pop up that tells you some


6583
06:28:55,660 --> 06:28:58,570
different things that we can use for a default format or our


6584
06:28:58,570 --> 06:29:03,670
default format, or is going to be Nanak, foundation, dot hard


6585
06:29:03,670 --> 06:29:09,070
hat, hyphens solidity. This will mean that any time we go to


6586
06:29:09,070 --> 06:29:13,660
format our code, it'll use the hard hat solidity plug in, as


6587
06:29:13,660 --> 06:29:18,160
its default format, or the hard hat solidity plugin comes with


6588
06:29:18,190 --> 06:29:22,810
some formatting, and a lot of other really useful tools for us


6589
06:29:22,810 --> 06:29:26,080
writing our code. So now that we have this part in, the next


6590
06:29:26,080 --> 06:29:29,530
thing we're going to do is add format on Save. If we haven't


6591
06:29:29,530 --> 06:29:33,370
already, we could add it in here in our JSON, but I'm going to


6592
06:29:33,370 --> 06:29:36,760
add it not in the JSON file, I'm going to add it in the overall


6593
06:29:36,760 --> 06:29:40,930
file. So if we open that command palette back up, and we type in


6594
06:29:40,930 --> 06:29:45,280
settings, open user settings, this is another really good


6595
06:29:45,280 --> 06:29:48,940
place where we can look in add settings with the UI. So these


6596
06:29:48,940 --> 06:29:51,790
two do essentially the same thing. It's just that this one


6597
06:29:51,790 --> 06:29:54,730
has dials and a little bit more context versus settings that


6598
06:29:54,730 --> 06:29:57,850
JSON just says Okay, give me the raw code for it. This tells us a


6599
06:29:57,850 --> 06:30:00,220
little bit more. So you can use either one. But we're going to


6600
06:30:00,220 --> 06:30:05,350
look for format, on save. And you're going to want this


6601
06:30:05,380 --> 06:30:09,040
checked if you haven't already. This means that every time we


6602
06:30:09,040 --> 06:30:14,020
save VS code is going to try to format our code for us. So now


6603
06:30:14,020 --> 06:30:16,960
that we have this checked, we have settings dot JSON added in.


6604
06:30:16,960 --> 06:30:19,270
And remember, we want to save this. Remember, if you see this


6605
06:30:19,270 --> 06:30:21,730
white dot, that means not saved. So you're gonna want to save it


6606
06:30:22,600 --> 06:30:25,990
and close it out. Let me close this out too. If we come back in


6607
06:30:25,990 --> 06:30:28,870
here and we add a bunch of random new spaces or whatever,


6608
06:30:28,870 --> 06:30:31,390
you want to make it look a little bit ugly, and then we


6609
06:30:31,390 --> 06:30:36,550
save it. It should automatically reformat to look much nicer,


6610
06:30:36,580 --> 06:30:40,180
right. So if we do something like this, we'd save it


6611
06:30:40,180 --> 06:30:43,030
reformats it to look much nicer this one make them more readable


6612
06:30:43,030 --> 06:30:46,240
for you, and more readable for anybody else who looks at your


6613
06:30:46,240 --> 06:30:50,650
code. And it's just really nice. And this line of code for your


6614
06:30:50,650 --> 06:30:54,040
settings dot JSON is located in the full blockchain study


6615
06:30:54,040 --> 06:30:57,340
course.js. So you can also just copy paste it, we are going to


6616
06:30:57,340 --> 06:31:01,870
end up overriding that default format or with another format


6617
06:31:01,870 --> 06:31:05,770
are called prettier pretty soon. But it's great to have a default


6618
06:31:05,770 --> 06:31:08,830
format or so that if you don't feel like adding the prettier


6619
06:31:08,830 --> 06:31:12,130
code sometime in the future, you can just rely on your default


6620
06:31:12,130 --> 06:31:16,030
formatter. Awesome. While we're doing formatting, let's also add


6621
06:31:16,030 --> 06:31:19,480
a default format or for our JavaScript code. And just to


6622
06:31:19,480 --> 06:31:22,480
test it out, let's go ahead and create our new file, we'll call


6623
06:31:22,480 --> 06:31:27,550
it deploy dot Jas. And in here, we can do something like


6624
06:31:28,120 --> 06:31:29,470
function Hi,


6625
06:31:30,910 --> 06:31:37,630
console dot log, hi, and then just add and then just make it


6626
06:31:37,630 --> 06:31:40,570
look kind of gross, maybe something like this. If you hit


6627
06:31:40,570 --> 06:31:43,990
save, and it does some auto formatting, that's great, you


6628
06:31:43,990 --> 06:31:46,390
can actually turn that off by going back to your command


6629
06:31:46,390 --> 06:31:51,490
palette, and saying, Save without formatting. And that way


6630
06:31:51,490 --> 06:31:54,190
it will be saved and not formatted. The way we can add


6631
06:31:54,190 --> 06:31:56,980
some other formatting here is we're gonna install another


6632
06:31:56,980 --> 06:32:01,330
extension, this one is going to be called prettier. So we can


6633
06:32:01,330 --> 06:32:04,780
just look up prettier and extensions here. And you'll want


6634
06:32:04,780 --> 06:32:08,260
to install this prettier code formatter. So we're gonna go


6635
06:32:08,260 --> 06:32:11,620
ahead and install this. And great, now it's installed


6636
06:32:11,680 --> 06:32:15,370
prettier is a form is a code format, or that works for many


6637
06:32:15,370 --> 06:32:18,790
languages like Python, JavaScript, and even solidity.


6638
06:32:19,000 --> 06:32:22,180
And pretty soon we're going to use prettier for both JavaScript


6639
06:32:22,270 --> 06:32:25,240
and solidity. But for now, we're just going to use prettier for


6640
06:32:25,240 --> 06:32:28,600
JavaScript, we can enable this by opening back up our command


6641
06:32:28,600 --> 06:32:32,740
palette, we'll go to preferences, open Settings. And


6642
06:32:32,740 --> 06:32:36,550
the same way we added a solidity section, we're going to add a


6643
06:32:36,550 --> 06:32:41,080
JavaScript section. So we're going to add a comma here, some


6644
06:32:41,080 --> 06:32:45,850
quotes, brackets, we're going to type in JavaScript, close that


6645
06:32:46,750 --> 06:32:50,980
colon brackets. And we're going to do the same thing at the door


6646
06:32:51,010 --> 06:32:58,720
dot default, or matter. Net we're going to do and then in


6647
06:32:58,720 --> 06:33:04,870
here, we're going to do e s BENP, that prettier, hyphen VS


6648
06:33:04,870 --> 06:33:08,590
code. And this will make prettier the default editor for


6649
06:33:08,590 --> 06:33:11,320
JavaScript. Now, like I said, pretty soon, we're going to have


6650
06:33:11,350 --> 06:33:15,370
prettier override both of these for solidity and JavaScript. And


6651
06:33:15,370 --> 06:33:18,040
we're going to give prettier some parameters so that no


6652
06:33:18,040 --> 06:33:21,940
matter who uses your code, they will always have the exact same


6653
06:33:21,970 --> 06:33:25,000
formatting. But now that we have prettier in here as the default


6654
06:33:25,000 --> 06:33:28,990
editor, if we come back to deploy dot j s, and we hit save,


6655
06:33:29,410 --> 06:33:32,710
it should format to look a little something like this. Now,


6656
06:33:33,100 --> 06:33:36,640
we go ahead and we do something like this. If we go ahead and do


6657
06:33:36,640 --> 06:33:39,370
something like this, it'll reformat to look like look like


6658
06:33:39,370 --> 06:33:43,360
that. And then additionally, if you want to go back to the


6659
06:33:43,360 --> 06:33:47,680
command palette, open user settings, not in JSON mode, and


6660
06:33:47,680 --> 06:33:52,000
we go to default format, or you can actually even select the


6661
06:33:52,000 --> 06:33:56,230
default format or for all languages, if you want to use


6662
06:33:56,230 --> 06:33:59,560
prettier for all formatters. Feel free to go ahead. Alright,


6663
06:33:59,560 --> 06:34:02,950
great, got our JavaScript format, or in as well, let's


6664
06:34:02,950 --> 06:34:05,020
start writing some JavaScript code.
