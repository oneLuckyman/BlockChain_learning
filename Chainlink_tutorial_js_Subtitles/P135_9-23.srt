15423
15:39:54,590 --> 15:40:00,620
Well, and let's also test that it returns false. If raffle isn't open. 
嗯，让我们继续测试 `it("returns false if raffle isn't open")

15424
15:40:00,620 --> 15:40:06,860
This will be an async function. 
这里是一个 `async function`

15425
15:40:07,100 --> 15:40:12,230
And we'll do everything except and we'll do everything in here. But we'll make the raffle in the calculating state. 
我们就在这里处理所有内容，不过我们会先让抽奖处于 "CALCULATING" 状态

15426
15:40:12,230 --> 15:40:15,680
So do a weight, raffle dot enter, raffle value, raffle entrance fee 
所以执行 `await raffle.enterRaffle({value: raffleEntranceFee})`

15427
15:40:15,680 --> 15:40:19,520
await network dot provider that send 
`await network.provider.send()`

15428
15:40:19,520 --> 15:40:28,250
and I'm just going to copy these two lines here. 
然后我要复制这两行

15429
15:40:29,090 --> 15:40:33,650
Because we're going to go ahead and do those.
因为我们下面就是要执行这些内容

15430
15:40:33,650 --> 15:40:36,710
We're also going to do a weight, raffle dot perform upkeep. 
我们还要执行 `await raffle.performUpkeep`

15431
15:40:36,770 --> 15:40:42,230
And another way to send a blank bytes object is to do a string like 0x 
另一种发送空字节对象的方式是写一个字符串 "0x"

15432
15:40:42,230 --> 15:40:45,650
hardhat is smart enough to know that this should be transformed into just kind of a blank bytes object. 
hardhat 足够智能，它会把这个东西转换为一个空字节对象

15433
15:40:45,650 --> 15:40:49,700
So either one of these should work. 
这两种方式中的任何一个都是可以的

15434
15:40:49,730 --> 15:40:53,360
Now we're do const, raffle state equals await, raffle dot get raffle state 
现在我们执行 `const raffleState = await raffle.getRaffleState`

15435
15:40:53,360 --> 15:40:56,750
and we'll Get upkeep needed. 
接下来我们要获取 "upkeepNeeded"

15436
15:40:56,780 --> 15:41:01,940
So we'll say const. upkeep needed, 
所以我们要执行 `const {upkeepNeeded}`

15437
15:41:01,940 --> 15:41:05,180
we'll do exactly what we did above raffle dot call static dot check upkeep. 
然后就和我们上面做的一样 `raffle.callStatic.checkUpkeep`

15438
15:41:05,180 --> 15:41:11,060
Let's say excuse me a weight, raffle dot call static.
抱歉，应该是 `await raffle.callStatic`

15439
15:41:11,090 --> 15:41:16,640
Now we can do assert dot equal, say raffle state is going to be, or excuse me raffle state.to string, 
现在我们就可以执行 `assert.equal(raffleState.toString)

15440
15:41:16,910 --> 15:41:22,250
it's going to be calculating, 
它应该为“计算中”

15441
15:41:22,520 --> 15:41:25,850
and I started dot equal upkeep needed, it's going to be false. 
接下来是 `assert.equal(upkeepNeeded, false)`

15442
15:41:25,850 --> 15:41:30,320
Let's run a GREP on that. 
让我们运行一下 `grep`

15443
15:41:30,320 --> 15:41:38,900
And perfect. That's also working correctly. 
完美，同样运行正常

15444
15:41:38,900 --> 15:41:41,900
Great. Now I'm going to skip over these next two tests, 
好的，现在我们要跳过接下来的两个测试

15445
15:41:41,900 --> 15:41:44,660
because we haven't really learned anything from them. 
因为我们还没有了解过它们

15446
15:41:44,660 --> 15:41:47,570
So I'm just going to copy paste them from the GitHub,
我会直接从 GitHub 上把它们复制粘贴过来

15447
15:41:47,600 --> 15:41:50,870
we're going to return false if enough time hasn't passed. 
它们是 `returns false if enough time hasn't passed`
(如果时间还没达到要求就返回 false)

15448
15:41:50,870 --> 15:41:54,020
And we're going to return true. If enough time has passed, we have players Eve and is open. 
以及 `returns true if enough time has passed, has players, eth, and is open`
(如果时间达到要求且有玩家，有以太币，而且状态为打开则返回 true)

15449
15:41:54,020 --> 15:41:58,430
So we're just asserting true down here. And we're starting not true up here, 
所以下面这里是 `assert(true)` 而上面则是 `assert(!true)`

15450
15:41:58,430 --> 15:42:00,980
you want to pause the video and copy paste these and write these out, you absolutely can 
你可以先暂停视频，照着这里的内容写一遍

15451
15:42:00,980 --> 15:42:03,590
copy paste them from the GitHub repo, you absolutely can't like I said, 
也可以从 GitHub 仓库中复制粘贴

15452
15:42:03,590 --> 15:42:05,930
going through this and making yourself write these and making yourself understand these tests is going to make you a substantially better coder. 
就像我说的，仔细编写并理解这些测试会让你成为一个更好的程序员

15453
15:42:05,930 --> 15:42:09,170
And let's just test that it all looks good with hh test. 
让我们测试一下，看看它是否正常 `hh test`

15454
15:42:09,170 --> 15:42:11,870
Now, as I was recording this, I just realized that for all of our describe blocks, I've been making them async functions
在我录现在这个视频的时候，我突然意识到，我们所有的 "describe" 用的都是 "async" 函数

15455
15:42:11,870 --> 15:42:14,660
describe blocks actually don't realize and can't recognize and can't work with promises. 
"describe" 里其实是不能实现，也不能识别和处理 "promise" 的

15456
15:42:14,660 --> 15:42:18,920
So having the be async actually doesn't do anything. 
所以把它们声明为 "async" 实际上并没有任何作用

15457
15:42:18,920 --> 15:42:21,560
So in your describe block, we want to get rid of the async word because it's actually not helping us at all. 
所以我们要把 "describe" 中的 "async" 都去掉，因为它对我们来说没有任何作用

15458
15:42:21,560 --> 15:42:24,620
In fact, it's just an extra word, and it looks kind of gross. 
事实上，它就是一个多余的词，只会让人看着很烦

15459
15:42:24,650 --> 15:42:28,820
So now all of our describe blocks, we're gonna get rid of that async keyword, 
所以我们要把所有 "describe" 里的 "async" 关键字都去掉

15460
15:42:28,820 --> 15:42:31,880
and just have them be functions. 
并把它们直接设置成 "function"

15461
15:42:31,880 --> 15:42:34,700
Of course, all of our it's, though, are going to be using asynchronous functions, which is what we want. 
当然，对于所有的 "it" 来说，还是要使用异步函数，这是必要的

15462
15:42:34,700 --> 15:42:37,910
So we've written some tests for a checkup keep. Now let's go ahead to perform upkeep.
我们已经写了不少 "checkUpkeep" 的测试，现在该轮到 "performUpkeep" 了

15463
15:42:37,910 --> 15:42:40,610
Let's create a new describe, block, 
让我们创建一个新的 "describe" 代码块

15464
15:42:40,610 --> 15:42:43,190
ascribe or perform upkeep. This is going to be a regular function. 
`describe("performUpkeep")` 然后这里是一个普通函数

15465
15:42:43,190 --> 15:42:46,910
And in here, we're going to start and say it can only run if check upkeep is true. 
接下来在这里，我们要写 `it("it can only run if checkUpkeep is true")`
(“只有当 checkUpkeep 为 true 时才会运行”)

15466
15:42:46,910 --> 15:42:49,460
And this will be an async function. 
这里是一个 `async function`

15467
15:42:49,490 --> 15:42:52,250
Because we only want to perform keep to work if checkup keep is indeed true. 
我们只有在 "checkUpkeep" 确实为 true 时才会想要运行 "performUpkeep" 

15468
15:42:52,250 --> 15:42:56,060
So we'll say await raffle dot enter. raffle we'll send it some value, raffle entrance fee, 
我们写 `await raffle.enterRaffle("value: raffleEntranceFee")`

15469
15:42:56,060 --> 15:42:56,510
I'm sorry, there should be curly braces instead. 
抱歉，这里应该用花括号替代

15470
15:42:56,630 --> 15:43:01,250
And we'll do a weight network dot provider that send EVM increase time inter vol.to number plus one 
接下来是 `await network.provider.send("evm_increaseTime", [interval.toNumber() + 1])`

15471
15:43:01,340 --> 15:43:05,720
await network dot provider that send UVM mine an empty array there to
`await network.provider.send("evm_mine", [])`

15472
15:43:05,720 --> 15:43:10,940
the reason that we're moving time forward and moving our block forward, 
我们推动时间和区块的原因当然和上面一样的

15473
15:43:10,940 --> 15:43:14,240
of course is gonna be the same thing as above, we want our check upkeep to return true. 
我们希望 "checkUpkeep" 能够返回 true 

15474
15:43:14,240 --> 15:43:18,140
And then we're gonna say const X or transaction equals await raffel dot perform upkeep. 
接下来我们要写 `const tx = await raffle.performUpkeep()`

15475
15:43:18,170 --> 15:43:22,730
We can either do a blank array, or we could do 0x Doesn't matter. 
我们可以放一个空数组，或是使用 `"0x"`，这都是可以的

15476
15:43:22,730 --> 15:43:27,530
And we can assert the X. 
现在我们可以执行 `assert(tx)`

15477
15:43:27,530 --> 15:43:32,930
Now if TX doesn't work, or this error is out or something, this will fail. 
如果 "tx" 不起作用，或是发生了报错之类的其他问题，这里就会失败

15478
15:43:32,930 --> 15:43:43,310
Right. So that's how we know that this actually can work. 
这就是我们判断它是否运行正常的方式

15479
15:43:43,370 --> 15:43:51,050
So let's test this out. We want this only to work if checkup keep is true. 
让我们来测试一下，我们希望只有当 "checkUpkeep" 为 true 时这些才会被执行

15480
15:43:51,170 --> 15:43:53,660
And we made checkup keep true by all the stuff that we did above. 
而我们通过上面所做的操作使 "checkUpkeep" 保持为 true 

15481
15:43:53,660 --> 15:43:55,940
So now we'll do yarn hardhat test dash dash grep with our IT block here. 
现在我们来执行 `hh test --grep` 后面是我们 "it" 里的内容

15482
15:43:55,940 --> 15:43:58,850
And I spelled perform upkeep wrong perform upkeep. 
"performUpkeep" 拼错了，应该是 `performUpkeep`

15483
15:43:58,850 --> 15:44:04,730
Let's try spelling things correctly. And let's run that test again. 
现在拼对了，我们来再试一次

15484
15:44:04,820 --> 15:44:11,030
And great. That's working. I will What else do we want to do? 
很好，一切正常，我们还需要做些什么

15485
15:44:11,030 --> 15:44:15,830
We want it to revert with raffel. upkeep not needed if checkup keep is false. 
我们还要在 "checkUpkeep" 为 false 时使用 "Raffle__UpkeepNotNeeded" 进行回滚

15486
15:44:15,860 --> 15:44:19,460
So in here we're gonna say it reverts. When check up keep is false. 
所以我们在这里写 `it("reverts when checkUpkeep is false")`

15487
15:44:19,460 --> 15:44:22,880
This will be an async function. 
这里也是 `async function`

15488
15:44:22,880 --> 15:44:26,300
And we're going to do that same syntax await expect raffle dot perform upkeep empty bytes object 
接下来就是相同的语法 `await expect(raffle.performUpkeep())` 一个空字节对象

15489
15:44:26,330 --> 15:44:30,080
that to.be reverted with.
`.to.be.revertedWith()`

15490
15:44:30,080 --> 15:44:35,390
And what do we want it to be reverted with? 
我们要用什么进行 "revertedWith" 呢？

15491
15:44:35,390 --> 15:44:40,610
Or hoping it's reverted with this with that, 
我们要用这个进行回滚

15492
15:44:40,610 --> 15:44:43,580
we can run this test here Hardhead test dash dash grep paste that in. And we see that is indeed passing 
我们运行 `hh test --grep` 粘贴进去，然后我们看到它确实通过了

15493
15:44:43,580 --> 15:44:47,450



15494
15:44:47,450 --> 15:44:52,010



15495
15:44:52,100 --> 15:44:57,320



15496
15:44:57,830 --> 15:45:02,990



15497
15:45:03,530 --> 15:45:08,450



15498
15:45:08,480 --> 15:45:16,130



15499
15:45:16,370 --> 15:45:18,470



15500
15:45:18,470 --> 15:45:24,860



15501
15:45:24,860 --> 15:45:29,300



15502
15:45:29,300 --> 15:45:32,000
now something that you'll notice here is that our


15503
15:45:32,000 --> 15:45:35,360
revert actually goes ahead and reverts with all this extra


15504
15:45:35,360 --> 15:45:38,930
stuff as well. Our test is smart enough to know that if all we do


15505
15:45:38,930 --> 15:45:42,740
is put the name of the error that is getting reverted with


15506
15:45:42,770 --> 15:45:45,860
then it's good enough. If we want to be super specific, we


15507
15:45:45,860 --> 15:45:49,160
can actually go ahead and make this a string interpolation and


15508
15:45:49,190 --> 15:45:53,150
add all of these in here. So we can add the balance that we


15509
15:45:53,150 --> 15:45:56,150
expect we can add the players that we expect. And we can add


15510
15:45:56,150 --> 15:45:58,970
the raffle statement for now we're just going to keep it as


15511
15:45:59,180 --> 15:46:02,570
we're expecting this but if you want to be super specific you


15512
15:46:02,570 --> 15:46:06,650
can have your tests expect for exactly the specific values that


15513
15:46:06,650 --> 15:46:09,440
you're looking for. But alright, what is the last thing we should


15514
15:46:09,470 --> 15:46:12,920
expect form? Well, we should check to see that this actually


15515
15:46:12,920 --> 15:46:16,310
gets called the raffle state gets changed. And we admit this


15516
15:46:16,340 --> 15:46:21,440
event. So let's go ahead and add that. We'll say it updates the


15517
15:46:21,440 --> 15:46:30,230
raffle state admits an event and calls the VRF coordinator to be


15518
15:46:30,230 --> 15:46:34,790
an async function as well. Let's do this. So let's go ahead and


15519
15:46:34,790 --> 15:46:37,820
let's make checkup keep true, I'm just going to copy paste


15520
15:46:37,820 --> 15:46:40,040
these first three lines, since it's going to be exactly the


15521
15:46:40,040 --> 15:46:42,590
same. We're going to enter the raffle we're going to increase


15522
15:46:42,590 --> 15:46:44,960
the time we're going to mind a new block, then we're going to


15523
15:46:44,960 --> 15:46:48,950
call perform upkeep. So we're going to say const, TX response


15524
15:46:49,160 --> 15:46:55,970
equals await raffle dot perform upkeep with an empty bytes


15525
15:46:55,970 --> 15:47:02,480
object, and we're going to do const TX receipt equals await TX


15526
15:47:02,480 --> 15:47:07,790
response dot wait for one block. From this receipt, we're gonna


15527
15:47:07,790 --> 15:47:12,980
get the request ID, we're gonna say const Request ID equals, we


15528
15:47:12,980 --> 15:47:17,210
can get the request ID. From this omitted event. However, we


15529
15:47:17,210 --> 15:47:21,230
should look at our VRF coordinator mock again, when we


15530
15:47:21,230 --> 15:47:25,640
call request random words, both in the mock and then in the


15531
15:47:25,640 --> 15:47:30,350
actual contract, you'll notice that it also emits an event with


15532
15:47:30,350 --> 15:47:33,590
random words requested. And if you look in here, the second


15533
15:47:33,590 --> 15:47:38,270
parameter that it has is indeed the request ID. So in reality,


15534
15:47:38,450 --> 15:47:42,380
US omitting the request ID is redundant, we can just use the


15535
15:47:42,380 --> 15:47:45,920
admitted Request ID from the VRF coordinator for the purpose of


15536
15:47:45,920 --> 15:47:48,410
this course and showing you what an event looks like. We're going


15537
15:47:48,410 --> 15:47:50,960
to leave it in there. But if you want to go back and refactor


15538
15:47:50,960 --> 15:47:54,050
this, you would definitely want to remove this omit. But for


15539
15:47:54,050 --> 15:47:58,550
this test, let's do TX receipt dot events. And this is going to


15540
15:47:58,550 --> 15:48:02,210
be the first event instead of the zero with event because


15541
15:48:02,240 --> 15:48:06,170
before this event gets emitted, this function is going to emit


15542
15:48:06,200 --> 15:48:09,710
an event. So instead of the zero with event, this is the first


15543
15:48:09,740 --> 15:48:12,920
event that gets emitted after this one. So tax receipts dot


15544
15:48:12,920 --> 15:48:17,360
events of one dot args dot request, ID, and then we're


15545
15:48:17,360 --> 15:48:23,330
gonna say cert request id.to number is greater than zero. And


15546
15:48:23,330 --> 15:48:25,460
then we'll also assert that the


15547
15:48:26,510 --> 15:48:31,160
raffle state equals equals one. So we're gonna do const, raffle


15548
15:48:31,160 --> 15:48:37,430
state equals await, raffle dot get raffle state. And this


15549
15:48:37,430 --> 15:48:41,990
should actually be raffle state.to Number, or to string


15550
15:48:41,990 --> 15:48:44,300
and then you know, do whatever we want to do. And this is a


15551
15:48:44,360 --> 15:48:48,650
very big it, but we're going to copy the whole thing anyways. HH


15552
15:48:48,650 --> 15:48:52,670
test, dash dash grep, paste that in there, we run it, excuse


15553
15:48:52,670 --> 15:48:59,810
me.to string equals equals one, transformer time and perfect, we


15554
15:48:59,810 --> 15:49:03,440
are passing Great, now it's time for fulfill random words. And


15555
15:49:03,440 --> 15:49:06,380
this is where we're going to learn a lot of fantastic stuff


15556
15:49:06,380 --> 15:49:09,140
here. So we're gonna make a new describe block zoomed out a


15557
15:49:09,140 --> 15:49:15,470
little bit here. And this is going to be our fulfill random


15558
15:49:15,470 --> 15:49:20,060
words. It's going to be a function, of course. And in


15559
15:49:20,060 --> 15:49:23,210
here, we're actually going to add another before each want to


15560
15:49:23,210 --> 15:49:26,990
have somebody have entered the raffle before we run any tests


15561
15:49:26,990 --> 15:49:31,010
in here. So we're going to do a before each, which will be an


15562
15:49:31,040 --> 15:49:37,160
async. function. And we're just going to run await, raffle that


15563
15:49:37,160 --> 15:49:44,600
enter raffle with a value of raffle entrance fee. And then


15564
15:49:44,600 --> 15:49:50,330
we're going to do a wait network dot provider dot send EVM


15565
15:49:50,570 --> 15:49:58,880
increase time of interval, that to number plus one, and then a


15566
15:49:58,880 --> 15:50:06,260
wait network dot provider dot send EVM mine. Comma. Before


15567
15:50:06,260 --> 15:50:09,020
we've tried to do any testing of or fulfilled random words, we're


15568
15:50:09,020 --> 15:50:11,600
gonna have somebody enter the lottery. And we're going to have


15569
15:50:11,600 --> 15:50:15,020
increased the time and mined a new block. Okay, cool. So the


15570
15:50:15,020 --> 15:50:17,930
first thing we want to do is want to see that fulfill random


15571
15:50:17,930 --> 15:50:22,520
words can only be called so long as there's a request in flight,


15572
15:50:22,550 --> 15:50:26,030
so long as there's a requested as long as request random words


15573
15:50:26,060 --> 15:50:28,490
has been called. So we can actually check that by running


15574
15:50:28,520 --> 15:50:34,760
it can only be called after perform. This will be an async


15575
15:50:34,760 --> 15:50:38,930
function. And in here, we're going to revert on some requests


15576
15:50:38,930 --> 15:50:44,420
that don't exist. So we'll do await, expect the RF core didn't


15577
15:50:44,420 --> 15:50:51,500
a tour be to mock dot fulfill random words. And if we look at


15578
15:50:51,500 --> 15:50:57,440
our V RF, coordinator v2 Mark in here has the fulfill random


15579
15:50:57,440 --> 15:51:00,470
words function, which is what the chain link node actually


15580
15:51:00,470 --> 15:51:03,590
calls and inside Add this function in the actual contract


15581
15:51:03,590 --> 15:51:06,560
calls another contract that does the random number verification.


15582
15:51:06,620 --> 15:51:09,740
So we're basically checking this part right here. If the request


15583
15:51:09,740 --> 15:51:13,130
doesn't exist, we're going to get this non existent request


15584
15:51:13,130 --> 15:51:16,610
here. And as you can see, it needs a request ID and a


15585
15:51:16,610 --> 15:51:20,690
consumer address. So we're going to guess zero. And the consumer


15586
15:51:20,690 --> 15:51:23,780
addresses, of course, it's gonna be raffled out at address, we're


15587
15:51:23,780 --> 15:51:31,580
going to expect this to be reverted, with non existent


15588
15:51:31,820 --> 15:51:35,690
request. And then we're going to do this exact same thing with a


15589
15:51:35,720 --> 15:51:39,320
different Request ID or request ID one. And hopefully, we're


15590
15:51:39,320 --> 15:51:42,050
also going to get non existent requests. Now ideally, no


15591
15:51:42,050 --> 15:51:45,830
request here would ever allow this fulfill random words to go


15592
15:51:45,830 --> 15:51:49,010
through. Now, it obviously would be really hard for us to test


15593
15:51:49,040 --> 15:51:52,100
every single possible Request ID, we're going to see a way in


15594
15:51:52,100 --> 15:51:56,360
the future to actually test for a ton of these variables with


15595
15:51:56,360 --> 15:51:58,940
something called fuzz testing. But we'll get to that in the


15596
15:51:58,940 --> 15:52:01,730
future. And I spelt the scribe wrong, let's let's actually


15597
15:52:01,730 --> 15:52:05,210
spelled the scribe correctly, go ahead and run this hh test dash


15598
15:52:05,210 --> 15:52:05,930
dash grep.


15599
15:52:07,970 --> 15:52:13,970
And great it passed. 