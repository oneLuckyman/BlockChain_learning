9230
09:10:48,400 --> 09:10:55,360
This is perfect. We've now got a successful deploy dot j s script 
简直完美，现在我们有了一个成功的 "deploy.js" 脚本

9231
09:10:55,360 --> 09:11:00,700
that can deploy, verify, and then interact with our code. This is fantastic. 
它可以部署，验证并与我们的代码进行交互，真是太棒了

9232
09:11:00,700 --> 09:11:04,300
This hard hat thing seems pretty cool. What else can we do with hard hat
Hardhat 真是太酷了，它还能做哪些事呢？

9233
09:11:04,300 --> 09:11:06,760
like I showed you before. 
就像我之前向你们展示的

9234
09:11:06,820 --> 09:11:11,650
Hard Hat comes with these tasks. 
Hardhat 自带的 task 有这些

9235
09:11:11,650 --> 09:11:13,900
And the number of tasks that Hardhead can come with can be extended by us writing plugins, 
并且 Hardhat 可执行的 task 数可以通过我们编写的插件进行扩展

9236
09:11:13,900 --> 09:11:17,620
we can actually write our own tasks in hardhat. 
我们实际上可以在 Hardhat 中编写我们自己的 task

9237
09:11:17,620 --> 09:11:21,190
And in our Hardhead dot config, it can defaulted with this task account, 
在我们的 "hardhat.config" 中，默认有一个 task 是 "accounts"

9238
09:11:21,190 --> 09:11:24,250
we can see task accounts, prints the list of accounts, 
可以看到 "task("accounts", "Prints the list of accounts")"

9239
09:11:24,280 --> 09:11:28,510
and just prints a list of accounts here 
功能就是打印 accounts 的列表

9240
09:11:28,510 --> 09:11:31,960
actually go to the heart had documentation to learn more about creating our own tasks, 
实际上，我们可以前往 Hardhat 的文档学习更多有关创建自己 task 的内容

9241
09:11:31,960 --> 09:11:34,690
one of the ways that you can define tasks is directly in our heart head.config.js. 
其中一种定义 task 的方式就是直接在我们的 "hardhat.config.js" 中定义

9242
09:11:34,690 --> 09:11:39,640
But typically, what people do 
但通常，人们采取的做法更多是

9243
09:11:39,640 --> 09:11:43,450
is they have a new folder called tasks where they put all their tasks. 
创建一个名为 "tasks" 的新文件夹，将所有 task 放在这里面

9244
09:11:43,480 --> 09:11:47,530
So for now, I'm gonna go ahead and delete this section here. 
所以现在，我会把这部分内容删掉

9245
09:11:47,530 --> 09:11:49,900
And we're going to create our own task. 
并创建一个属于我们自己的 task

9246
09:11:49,930 --> 09:11:52,840
You'll notice that now that we've deleted that section, 
你会发现，现在我们删掉了这部分

9247
09:11:52,840 --> 09:11:58,750
if we run yarn RDAP, we no longer see the accounts task in here, 
如果我们运行 "yarn hardhat"，就不会在这里再看到 "accounts" task 了

9248
09:11:58,750 --> 09:12:01,660
because we've just deleted that task. 
因为我们刚刚删除了那个 task

9249
09:12:01,660 --> 09:12:08,140
So let's create our own new task. We'll call this block number.js. 
让我们开始创建属于我们自己的新 task，把它命名为 "block-number.js"

9250
09:12:08,140 --> 09:12:10,900
And we'll use this to get the current block number or whatever blockchain that we're working with. 
我们会用它来获取当前的区块编号，无论我们是在使用哪个区块链

9251
09:12:10,900 --> 09:12:13,810
So let's create this task.
让我们来创建这个 task

9252
09:12:14,080 --> 09:12:17,320
First, we need to import the task function, 
首先，我们需要导入 "task" 函数

9253
09:12:17,320 --> 09:12:24,730
we can get it by saying const task equals require arhat slash config. 
可以这样做 "const { task } = require("hardhat/config")"

9254
09:12:24,730 --> 09:12:28,870
The hard hat slash config has the task function. 
"hardhat/config" 中有这个 "task" 函数

9255
09:12:28,870 --> 09:12:33,460
To define a task, we can now just say task, give it a name and a description, 
要定义一个 task ，可以这样做 "task()"，并给它一个名称和描述

9256
09:12:33,490 --> 09:12:34,630
the name is going to be blocked number.
名称就是 "block-number"

9257
09:12:36,010 --> 09:12:39,550
And then the description is going to be prints the current block number. 
而描述就是 "Prints the current block number"

9258
09:12:40,930 --> 09:12:45,700
Now that we have this task, 
现在我们有了这个 task，

9259
09:12:45,700 --> 09:12:48,040
there's a couple of things we can actually do with it, 
就可以来做这么几件事

9260
09:12:48,040 --> 09:12:51,280
we can add different parameters to it by using the dot add command, 
我们可以使用 ".add" 命令来向它添加不同的参数

9261
09:12:51,280 --> 09:12:54,400
which allow us to pass parameters to the task. 
它允许我们可以向 task 传递参数

9262
09:12:54,400 --> 09:12:58,180
And then we could also set actions which define what the task should actually do 
接着我们还可以设置 "setAction"，它定义了这个 task 实际应该执行什么

9263
09:12:58,210 --> 09:13:03,340
for us, we're just going to do dot set action. 
对我们来说，要做的就是 ".setAction"

9264
09:13:03,340 --> 09:13:07,660
And define what we want this function to do. 
并定义我们想让这个函数做的事

9265
09:13:07,660 --> 09:13:11,620
So we're going to make this an async function, 
我们要创建一个 "async" 函数

9266
09:13:11,650 --> 09:13:15,790
that's going to take as an input, the task arguments, which are going to be blank for us, 
它的输入是 "taskArgs"，对我们来说是空白的

9267
09:13:15,790 --> 09:13:19,570
and the HR E, which I'll define in a second. 
还有 "hre"，接下来就定义它

9268
09:13:19,570 --> 09:13:22,570
Now, let me explain the syntax really quickly. This might look a little bit weird, 
现在我来快速解释一下这些语法，这些东西看起来可能有些怪

9269
09:13:22,570 --> 09:13:26,110
but this is what's known as a JavaScript arrow function. 
但这就是所谓的 JavaScript 箭头函数

9270
09:13:26,140 --> 09:13:29,170
In JavaScript, you can actually define functions without even using the function keyword. 
在 JavaScript 中，定义一个函数甚至可以不需要使用 "function" 关键字

9271
09:13:29,170 --> 09:13:32,140
For example, if we go back to our deploy function, 
比如说，如果我们回到 "deploy"

9272
09:13:32,140 --> 09:13:36,670
we have our async function verify down here.
这里有一个叫 "verify" 的异步函数

9273
09:13:37,090 --> 09:13:40,330
However, another way we could have defined this is 
然而，有另一种定义方式是

9274
09:13:40,330 --> 09:13:43,420
is without using the function word at all, 
完全不使用 "function" 关键字

9275
09:13:43,420 --> 09:13:47,560
and actually turning this whole thing into a variable, 
这下这堆东西就变成了一个变量

9276
09:13:48,070 --> 09:13:54,370
we could have said instead, we could say const verify is going to be an async function 
取而代之的是，我们可以 "const verify" 它是一个 "async" 函数

9277
09:13:54,370 --> 09:14:00,010
that takes contract addresses and arguments. 
获取 "contractAddress" 还有 "args"

9278
09:14:00,010 --> 09:14:03,700
And here's the function definition. 
以及，这里就是函数定义的内容

9279
09:14:03,730 --> 09:14:07,900
These two lines are essentially equivalent. 
这两行本质上是等价的

9280
09:14:07,900 --> 09:14:10,630
There's some slight differences between between using the function keyword and having your function be a variable. 
只有一点微小的区别就是，使用 "function" 关键字或是把函数变成一个变量

9281
09:14:10,630 --> 09:14:13,060
But for the purposes of this course, they're basically the same. 
但在本课程中，它们基本上就是相同的

9282
09:14:13,060 --> 09:14:17,860
Which means though, that this by itself is a function, 
这意味着，这个语句本身就是一个函数

9283
09:14:17,860 --> 09:14:21,340
just not assigned to a variable. 
只是没有被分配给某个变量

9284
09:14:21,340 --> 09:14:24,760
But essentially, the two of these do are exactly the same. 
但本质上讲，这二者就是完全相同的

9285
09:14:24,760 --> 09:14:27,940
And that's the syntax that we're doing here. 
这就是我们在这里所使用的语法

9286
09:14:27,940 --> 09:14:35,440
You can imagine this sort of being like const block task equals async function, 
你可以想象这个就是 "const blockTask = async function()"

9287
09:14:35,920 --> 09:14:39,010
which takes the params and then runs that arrow function. 
获取一些参数，然后运行箭头函数

9288
09:14:39,010 --> 09:14:45,880
Or you can think of it as async. Function, block task parameters, and then the function definition, 
或是你可以把它想成 "async function blockTask" 输入参数，然后是函数定义

9289
09:14:45,880 --> 09:14:49,450
these are all essentially the same. 
本质上来说它们是相同的

9290
09:14:49,450 --> 09:14:53,290
The major difference is that we're never giving our function a name, 
主要区别就是，我们没有给我们的函数命名

9291
09:14:53,290 --> 09:14:56,170
we never give it this block task variable. 
也没有把它赋给一个叫做 "blockTask" 的变量

9292
09:14:56,170 --> 09:14:59,650
This is known as an anonymous function in JavaScript, because it doesn't have a name. 
这就是 JavaScript 中的匿名函数("anonymous function")，因为它没有名称

9293
09:14:59,650 --> 09:15:02,920
Now that we have our function in here, 
现在我们有了这个函数

9294
09:15:02,920 --> 09:15:06,940
we can now call some function to get the block number. 
就可以调用某些函数来获取区块编号了

9295
09:15:06,940 --> 09:15:10,150
Well, how can we get the block number 
那么我们该如何获取区块编号呢？

9296
09:15:10,150 --> 09:15:13,480
when we run tasks, we automatically pass our anonymous functions, the task arguments, 
每当我们运行 task 时，都会自动向匿名函数传入 "taskArgs"

9297
09:15:13,480 --> 09:15:18,040
which in this one, we don't have any, 
但在这个 task 中，并没有什么参数

9298
09:15:18,550 --> 09:15:23,560
but we also pass this HR II object. This HRV is the heart hat runtime environment. 
同时我们还传入了一个 "hre" 对象，这个 "hre" 就是 "HardhatRuntimeEnvironment"(Hardhat 运行环境)

9299
09:15:23,560 --> 09:15:27,820
Back in our deploy script, this is basically the same as this require hard hat in here. 
回到我们的 "deploy" 脚本，它基本就相当于这里的 "require("hardhat")"

9300
09:15:27,820 --> 09:15:32,320
So this HRV can access a lot of the same, 
所以所以这个 "hre" 可以访问许多...

9301
09:15:32,320 --> 09:15:36,940
this HRV can access a lot of the same packages that the hard hat package can. 
这个 "hre" 可以访问许多 hardhat 可以访问的包

9302
09:15:37,060 --> 09:15:41,920
So we can do Hae dot ethers, just like how you can import ethers from hard hat. 
所以我们可以这样做 "hre.ethers"，就像你可以从 "hardhat" 中导入 "ethers" 一样

9303
09:15:41,920 --> 09:15:45,100
And in our ethers package, there's actually a number of functions we can use 
在 "ethers" 包中就有许多函数可以用了

9304
09:15:45,100 --> 09:15:47,740
like dot Pro, biter dot get block number. 
比如 ".provider.getBlockNumber"

9305
09:15:47,740 --> 09:15:54,520
Let's save this to a variable
让我们把它保存成一个变量

9306
09:15:54,970 --> 09:15:59,890
const blocked number equals, and this is going to be a synchronous, 
"const blockNumber = "，这是一个异步的

9307
09:15:59,890 --> 09:16:02,500
so we're going to want to add a weight here. 
所以我们要在这里添加一个 "await"

9308
09:16:02,500 --> 09:16:06,940
And then let's do console dot log block number. 
接着我们要做的是 "console.log(blockNumber)"

9309
09:16:07,540 --> 09:16:11,740
Or better yet, we'll string interpolate this and say current block number like this. 
或者更好的是，使用字符串插值 "Current block number" 就像这样

9310
09:16:12,760 --> 09:16:17,740
Now though, if I try to run this task, 
现在，如果我尝试运行这个 task

9311
09:16:17,770 --> 09:16:21,790
you'll notice it doesn't show up in the heart Atlas of tasks, 
你就会发现它并没有出现在 hardhat 的 task 列表中

9312
09:16:22,330 --> 09:16:26,920
let's do yarn. Art app. Hmm, I don't see block number in here. 
让我们运行 "yarn hardhat"，哈，这里并没有看到 "block-number"

9313
09:16:26,920 --> 09:16:31,600
Well, this is because we need to add it to our config 
这是因为我们还需要把它添加进我们的 ".config" 文件

9314
09:16:31,990 --> 09:16:38,590
dot config will add require dot slash tasks slash block number.
在我们的 ".config" 中添加 "require("./tasks/block-number")"

9315
09:16:39,970 --> 09:16:43,420
And in order for us to import it, and let's add a module that exports 
为了导入它，让我们添加一个 "module.exports"

9316
09:16:43,420 --> 09:16:47,080
I'll explain what this does a little bit later. 
我会稍后解释一下它的用处

9317
09:16:47,080 --> 09:16:50,890
But now that we've required it, if I run yarn hard hat, 
现在我们已经把它 "require" 进来了，如果我运行 "yarn hardhat"

9318
09:16:50,950 --> 09:16:54,490
and now see blocked over is one of the tasks that I can use. 
现在就可以看到 "block-number" 是一个可用的 task 了

9319
09:16:54,490 --> 09:16:59,740
Now for a run yarn, art hat block number, 
现在运行 "yarn hardhat block-number"

9320
09:16:59,740 --> 09:17:03,730
we get current block number is zero. 
可以获得当前区块编号为 0

9321
09:17:03,730 --> 09:17:08,230
And this makes sense because this is defaulting to our Hard Hat Network, 
这是正确的，因为我们使用的是默认的 "Hardhat Network"

9322
09:17:08,230 --> 09:17:11,770
which gets reset every time we run it. 
它每次运行后都会重置

9323
09:17:11,770 --> 09:17:15,430
But if I run yarn, hard hat block number A dash dash network Rinkeby, 
但如果我运行 "yarn hardhat block-number --network rinkeby "

9324
09:17:15,430 --> 09:17:19,120
what do you think I'm gonna get? Again, a much larger number, current block number is right here. 
你觉得会获得什么？是一个很大的数字，当前区块编号就在这里

9325
09:17:19,120 --> 09:17:23,830
Because this is the actual block number of Rigby 
因为这就是 Rinkeby 的真实区块编号

9326
09:17:23,830 --> 09:17:27,550
versus the block number of our heart ad network is going to be zero 
而我们 "Hardhat Network" 的区块编号仍然是 0

9327
09:17:27,550 --> 09:17:31,660
because it gets reset every single time, we run one of these scripts 
因为每次运行这些脚本时，它都会被重置

9328
09:17:31,660 --> 09:17:35,500
now scripts and tasks both can basically do the same thing. 
现在脚本和 task 基本可以做到相同的事了

9329
09:17:35,500 --> 09:17:38,080
They both can interact with contracts, they both can deploy smart contracts, 
它们都可以与合约交互，都可以部署智能合约

9330
09:17:38,080 --> 09:17:41,830
they can both pretty much do everything. 
它们几乎可以做到任何事

9331
09:17:41,830 --> 09:17:45,160
I prefer scripts just as a general rule of thumb, 
通常来说，我更喜欢使用脚本

9332
09:17:45,160 --> 09:17:48,310
because I don't always think adding a special thing from the command line makes sense. 
因为我不想总是在命令行上添加特定的东西

9333
09:17:48,310 --> 09:17:51,400
So I prefer scripts, but you'll see a ton of tasks and examples out there as well. 
所以我更喜欢使用脚本，但你同时也会见到许多使用 task 的示例

9334
09:17:51,400 --> 09:17:55,270
I think tasks are really nice for specific use cases. 
我认为 task 在某些特定情形下很有用

9335
09:17:55,510 --> 09:17:58,270
But for the most part, we're pretty much going to use exclusively scripts, 
但大多数情况下，我们几乎只会使用脚本

9336
09:17:58,270 --> 09:18:01,960
but it is good to know what a task looks like and how to use it. 
但了解 task 是什么样并且如何使用的，仍然很有好处

9337
09:18:01,960 --> 09:18:05,260
I think tasks are better for plugins 
我认为 task 更适合用于插件

9338
09:18:05,290 --> 09:18:08,410
and scripts are better for your own local development environment. 
而脚本更适合用于你自己的本地开发环境

9339
09:18:08,410 --> 09:18:14,380
But if you want to do everything with tasks, you absolutely can. 
不过如果你想用 task 来完成所有事情，当然也可以了