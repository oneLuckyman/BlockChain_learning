15133
15:20:02,330 --> 15:20:08,750
Now we're not going to test the deploying this to a test net quite yet, 
我们暂时还不打算把它部署到测试网上

15134
15:20:08,750 --> 15:20:11,030
because well, we don't have any unit tests yet. 
因为我们还没有进行任何的 Unit 测试

15135
15:20:11,030 --> 15:20:14,120
We need to write unit tests before we want to ever test running this on a test net. 
我们要在测试网上进行测试之前编写 Unit 测试

15136
15:20:14,180 --> 15:20:17,390
So we have our deploy script, we have our contracts, that means it's time for us to write some tests. 
现在我们有了部署脚本，还有了合约，这意味着我们该编写一些测试了

15137
15:20:17,390 --> 15:20:20,240
We'll come over here we'll create a new folder called test. 
我们在这里创建一个新的文件夹，命名为 `test`

15138
15:20:20,240 --> 15:20:23,510
And for now, we'll just make our unit tests. 
现在我们开始创建我们的 Unit 测试

15139
15:20:23,510 --> 15:20:26,420
So unit tests, and in here we create a new file called raffle.test.js. 
新建一个名为 `Raffle.test.js` 的文件

15140
15:20:26,420 --> 15:20:29,840
And let's write some unit tests. 
让我们开始编写 Unit 测试

15141
15:20:29,930 --> 15:20:35,030
Now for these unit tests, we are going to be a little bit verbose here, 
对 Unit 测试来说，它的内容会有些冗长

15142
15:20:35,090 --> 15:20:38,360
we're going to make our coverage really, really good here. 
我们会尽量覆盖所有方面

15143
15:20:38,360 --> 15:20:40,640
It's not gonna be perfect, but this is going to be pretty verbose. 
可能不会特别完美，但会足够详细

15144
15:20:40,640 --> 15:20:43,370
So I'm gonna go pretty quickly here. 
让我们快速过一遍这里

15145
15:20:43,370 --> 15:20:46,370
So you can feel free to pause, slow me down, speed me up whatever you need to learn this section. 
你可以随时按照自己的学习需要选择暂停，放慢速度，或是加快速度

15146
15:20:46,370 --> 15:20:49,340
It is really good muscle memory to go through writing these tests 
编写这些测试对形成肌肉记忆很有帮助

15147
15:20:49,340 --> 15:20:53,600
and understand what you should be thinking about when you're writing these tests. 
还能让你理解编写测试时该思考哪些东西

15148
15:20:53,600 --> 15:20:56,060
So feel free to speed up the parts You already know and slow down the new parts. 
所以请自由选择加速你已经了解的部分或是放慢不了解的新部分

15149
15:20:56,060 --> 15:20:58,850
Because we are going to go over some new information here. 
因为我们会在这里介绍一些新的信息

15150
15:20:58,850 --> 15:21:01,940
writing tests may seem like a tedious process. 
编写测试的过程看起来可能会比较枯燥

15151
15:21:01,940 --> 15:21:04,520
But I promise as you get better at writing these tests, 
但我保证，随着你编写测试的熟练度不断提高

15152
15:21:04,520 --> 15:21:08,300
you'll realize that these are the things that you can rely on
你就会意识到，当你工程不顺，或是代码不知道怎么处理的时候

15153
15:21:08,300 --> 15:21:11,390
when stuff doesn't work. And when you're not sure how to code, something, 
这些才是你可以依靠的东西

15154
15:21:11,390 --> 15:21:13,940
getting this muscle memory down, writing these tests is going to make you a fantastic engineer. 
编写这些测试，获取这些肌肉记忆可以让你成为一个优秀的工程师

15155
15:21:13,940 --> 15:21:17,300
So let's go through and we'll write some of these verbose tests here 
让我们继续，编写一些详细的测试

15156
15:21:17,300 --> 15:21:19,520
to try to make this really good and have this have really good coverage. 
并尽量确保较高的覆盖率

15157
15:21:19,520 --> 15:21:23,000
And if you want to go back later on, and see if you can give it even more coverage, 
如果你以后想回来，看看是否能给它更高的覆盖率

15158
15:21:23,000 --> 15:21:25,310
and even better tests, please feel free to do so. 
甚至是更好的测试，也请随意如此

15159
15:21:25,340 --> 15:21:28,520
But let's get started. Let's write some tests. 
让我们开始吧，来编写一些测试

15160
15:21:28,520 --> 15:21:30,920
So we're going to start out pretty much the same way we've been starting everything out, 
我们将以与之前几乎相同的方式开始

15161
15:21:30,920 --> 15:21:33,320
we're going to grab our development chains, 
我们会先获取我们的开发链

15162
15:21:33,320 --> 15:21:36,560
so that we only run our unit tests on a development chain. 
这样我们就只会在开发链上运行我们的 Unit 测试了

15163
15:21:36,590 --> 15:21:39,350
So we'll do const development chains, equals require dot dot slash dot dot slash helper, RD, hard hat config, 
首先写 `cosnt { developmentChains } = require("../../helper-hardhat-config")`

15164
15:21:39,350 --> 15:21:41,390
and then we'll say not development chains, that includes network dot name, and describe that skip. 
接着写 `!developmentChains.includes(network.name) ? describe.skip`

15165
15:21:41,390 --> 15:21:44,660
Otherwise, we'll do describe, 
否则就执行 `describe()`
(译者注："C ? T : F" 是一种名为三元条件运算符的简化 if 语句)

15166
15:21:44,690 --> 15:21:48,680
so this first describe is going to be our raffle unit tests. 
第一个 "describe" 是我们的 `"Raffle"` Unit 测试

15167
15:21:49,070 --> 15:21:55,610
And this is going to be an async. function.
然后这里是一个 `async function`

15168
15:21:55,640 --> 15:22:00,230
So raffle unit tests so that it comes on the next line, it looks a little bit better. Alright, great. 
"Raffle Unit Tests" 被放到了下一行，看起来更好看一点，非常好

15169
15:22:00,230 --> 15:22:07,490
Now, what are some of the main things that we're going to need to deploy? 
现在，我们主要需要部署的是哪些东西

15170
15:22:07,520 --> 15:22:10,460
Well, we're gonna need to deploy a raffle, we're probably going to want a VRF core to a tour be to mock 
嗯，我们需要部署 `raffle, vrfCoordinatorV2Mock`

15171
15:22:10,490 --> 15:22:16,130
graded before each, that's going to be an async function, 
测试前是 `beforeEach(async function())`

15172
15:22:16,280 --> 15:22:19,160
where we go ahead and we get these
我们就在这里获取它们

15173
15:22:19,160 --> 15:22:21,050
will say const. Employer equals await, get named accounts. 
我们要写 `const { deployer } = await getNamedAccounts()`

15174
15:22:21,050 --> 15:22:23,420
So we're gonna need to import get named accounts or require get name accounts from hard hat, 
所以我们需要导入 "getNamedAccounts" 或者说从 "hardhat" 中 "require getNamedAccounts"

15175
15:22:23,420 --> 15:22:26,000
then we're going to want to deploy these using our fixtures. 
接下来我们要用 "fixture" 部署它们

15176
15:22:26,000 --> 15:22:31,370
So we can say await deployments.
我们可以写 `await deployments`

15177
15:22:31,370 --> 15:22:35,420
And then we're going to import deployments as well from hardhat
我们同样需要从 "hardhat" 中把 "deployments" 导入进来

15178
15:22:35,570 --> 15:22:40,760
dot fixture, and we're going to call all, 
然后是 `.fixture()` 并调用 `["all"]`

15179
15:22:41,540 --> 15:22:44,540
we're going to deploy everything. 
表明我们要部署所有内容

15180
15:22:44,540 --> 15:22:47,000
And again, if we look at our one, our raffle has the alt tag, 
如果我们看一下 "01" 我们的 "raffle" 具有标签 "all" 

15181
15:22:47,000 --> 15:22:51,770
and our Oh, our mocks also have the alt tag,
再看一下 "00" 我们的 "mocks" 同样具有 "all" 标签

15182
15:22:51,890 --> 15:22:55,250
okay, perfect. 
OK 非常完美

15183
15:22:55,280 --> 15:23:00,230
Once we deploy everything, 
一旦我们部署了所有的内容

15184
15:23:00,290 --> 15:23:03,800
we can say raffle equals await ethers dot get to contract. 
我们就可以执行 `raffle = await ethers.getContract`

15185
15:23:03,800 --> 15:23:07,910
And we got to import ethers from hard hat, like so. 
同样需要把 "ethers" 从 "hardhat" 中导入进来，就像这样 

15186
15:23:07,940 --> 15:23:12,080
And we'll say it will get the raffle contract and we'll connect it to our Deployer. 
然后我们要写上 `"Raffle"` 合约，并将其连接至我们的 "deployer"

15187
15:23:12,290 --> 15:23:17,270
And then we're going to do the same thing with VRF coordinator v2 Mock equals await ethers dot get contract, the RF coordinator, B to MK 
然后同样的操作 `vrfCoordinatorV2Mock = await ethers.getContract("VRFCoordinatorV2Mock")`

15188
15:23:17,300 --> 15:23:21,200
connect this to deployer as well. 
并将其同样连接至 "deployer"

15189
15:23:21,200 --> 15:23:27,380
Alright, great, our first set of tests describe, they're going to be the constructor. 
好的，下面是我们的第一组测试 `describe("constructor")`

15190
15:23:27,380 --> 15:23:30,050
And this is going to be an async function. 
然后是 `async function`

15191
15:23:30,050 --> 15:23:37,550
And let's do this. Let's create an IT initial initializes the raffle correctly, 
让我们开始吧，创建一个 `it("initializes the raffle correctly")`

15192
15:23:37,550 --> 15:23:41,150
this is going to be an async function. 
还有一个 `async function()`

15193
15:23:41,150 --> 15:23:44,270
Now I just want to make a note, because ideally, we make our tests have just one assert, or it 
现在我要提醒一下，“理想情况下，我们要让测试中的每个 "it" 都只拥有一处断言”

15194
15:23:44,270 --> 15:23:50,330
just keep that in mind is that ideally, we want to have just one assert for it. 
只需要记住这一点，理想情况下，我们希望每个 "it" 都只有一处断言

15195
15:23:50,330 --> 15:23:55,340
But we're going to have a bunch because like I said, we're being a little bit loose here. 
但我们会出现存在多处断言的情况，因为，我们的要求不那么严格

15196
15:23:55,340 --> 15:24:02,270
So we want to just make sure that our raffle is initialized correctly. 
首先我们要确保抽奖会被正确地初始化

15197
15:24:02,270 --> 15:24:06,440
So we'll say const raffle state, and we'll get that raffle state 
所以我们说 `const raffleState` 然后我们获取对应的抽奖状态

15198
15:24:06,440 --> 15:24:12,200
because we want to make sure that we start in an open raffle state. 
因为我们要确保开始时抽奖要处于开放状态

15199
15:24:12,200 --> 15:24:14,450
So we'll say const, raffle state equals await raffle dot get raffle state. 
所以我们说 `const raffleState = await raffle.getRaffleState()`

15200
15:24:14,450 --> 15:24:17,060
And then we want to say assert dot equal 
然后我们写 `assert.equal`

15201
15:24:17,060 --> 15:24:19,520
ope and then we need to import assert from Chai. 
哦，我们还需要从 "chai" 中导入 "assert"

15202
15:24:19,520 --> 15:24:24,860
So assert equals require Chai 
也就是 `{ assert } = require("chai")`

15203
15:24:24,980 --> 15:24:27,860
assert dot equal raffle state.to string because again, raffle state is going to be a big number. 
`assert.equal(raffleState.toString())`，因为 "raffleState" 会是一个大数

15204
15:24:28,010 --> 15:24:31,430
And even though a raffle state is of type raffle state, 
尽管抽奖状态是一个 "RaffleState" 类型

15205
15:24:31,430 --> 15:24:39,470
it'll return a zero if it's open and a one if it's calculating. 
如果它是 "OPEN" 就会返回 "0"，如果它是 "CALCULATING" 就会返回 "1"

15206
15:24:39,470 --> 15:24:43,460
So this gets transformed just into a un 256.
但它会被转换为 uint256 

15207
15:24:43,520 --> 15:24:47,960
When we call it like this, a raffle state variable here will be a big number. 
当我们像这样调用它的时候，这里的 "raffleState" 就会是大数

15208
15:24:47,960 --> 15:24:53,630
So we want to just to string a file. 
因此我们要对它使用 "toString" 

15209
15:24:53,630 --> 15:24:57,860
So assert dot equal raffle state DOT two string zero. 
所以就是 `assert.equal(raffleState.toString(), "0")`

15210
15:24:57,860 --> 15:25:01,820
We'll also make sure our interval gets set correctly. 
我们还要确保我们的 "interval" 也能够被正确获取

15211
15:25:01,820 --> 15:25:06,410
So we'll do const interval equals await raffle dot get interval. 
所以我们要写 `const interval = await raffle.getInterval`

15212
15:25:06,440 --> 15:25:09,710
And I don't know if we have one of those 
不清楚我是不是还没有这个函数

15213
15:25:09,710 --> 15:25:13,280
it's actually C inter ball see if we have one of those. 
来看一下我们是不是有这个函数

15214
15:25:13,280 --> 15:25:16,880
We don't have a good interval let's go ahead and add again interval function 
我们还没有 "getInterval" 让我们来添加一个 "getInterval" 函数

15215
15:25:16,880 --> 15:25:20,060
so we'll do function get in trouble. We have public view returns you went to six 
所以我们要创建一个 `function getInterval() public view returns(uint256)`

15216
15:25:20,240 --> 15:25:28,580
return I underscore interval 
`return i_interval`

15217
15:25:28,580 --> 15:25:32,840
will have good interval will say raffle dot get interval 
我们有了 "getInterval" 这样就可以写 "raffle.getInterval()" 了

15218
15:25:32,840 --> 15:25:35,990
and will also say assert dot equal interval.to string. 
然后我们接着写 `assert.equal(interval.toString())`

15219
15:25:35,990 --> 15:25:39,680
It should equal one Ever is in our helper config, right?
它应该等于我们在 "helper-config" 中的设定，对吧？

15220
15:25:40,850 --> 15:25:48,500
Because we're using the interval and helper config. 
因为我们是在 "helper-config" 中提到的 "interval" 

15221
15:25:48,500 --> 15:25:53,780
So we say interval.to string should equal. 
所以我们说 `interval.toString()` 它应该等于

15222
15:25:53,780 --> 15:25:58,910
So we'll import that as well. Network config. 
我们把它也导入进来 `networkConfig`

15223
15:25:58,910 --> 15:26:04,010
And we'll say the interval should equal network config. Of 
然后我们说 "interval" 应该等于 `networkConfig[]`

15224
15:26:04,040 --> 15:26:06,860
let's also make, get our chain ID up here, chain ID, 
让我们在这里把 "chainId" 也创建出来 `chainId`

15225
15:26:06,860 --> 15:26:11,120
say const. Chain ID equals network dot config, a chain ID, 
`const chainId = network.config.chainId`

15226
15:26:11,690 --> 15:26:15,770
network config of the chain ID of interval. 
`networkConfig[chainId]["interval"]`

15227
15:26:16,010 --> 15:26:22,550
Alright, cool. So let's test this so far, 
好的，酷~，让我们来测试一下吧

15228
15:26:22,610 --> 15:26:29,510



15229
15:26:29,510 --> 15:26:35,780



15230
15:26:35,780 --> 15:26:40,130
HH test or yarn, hard hat test.


15231
15:26:41,390 --> 15:26:44,210
And cool looks like it passed. And we have our little gas


15232
15:26:44,210 --> 15:26:47,600
output here. Awesome. Let's go to our Hardhead config, just so


15233
15:26:47,600 --> 15:26:50,600
that it doesn't always print out at gas, but there for now. So


15234
15:26:50,600 --> 15:26:54,020
I'm going to copy paste the gas reporter section from our last


15235
15:26:54,020 --> 15:26:57,140
project, like so. And we're going to have enabled gas be


15236
15:26:57,200 --> 15:27:00,080
false for now. So now if we run a Hardhead test, again, we


15237
15:27:00,080 --> 15:27:02,480
shouldn't have that gas bid printed out, we should just see


15238
15:27:02,480 --> 15:27:05,390
the tests and perfect, that's what we see. And our constructor


15239
15:27:05,390 --> 15:27:09,470
test passes. Yay, what's next, got our constructor. And we


15240
15:27:09,470 --> 15:27:11,690
probably could have written more tests for the rest of these. But


15241
15:27:11,720 --> 15:27:14,090
let's just move on. Alright, enter raffle, that's going to be


15242
15:27:14,090 --> 15:27:17,240
our next describe block. So it will do describe,


15243
15:27:19,850 --> 15:27:24,980
enter, raffle. And this is going to be an async function. And


15244
15:27:24,980 --> 15:27:30,200
we'll say it reverts when you don't pay enough, right, because


15245
15:27:30,200 --> 15:27:32,780
one of the first things that we check is that they're paying


15246
15:27:32,780 --> 15:27:36,020
enough. So we want to make sure that this actually reverts if


15247
15:27:36,020 --> 15:27:40,910
they don't pay enough. So this will be an async function. Where


15248
15:27:40,940 --> 15:27:44,750
we're going to do that same expect await thing. So we're


15249
15:27:44,750 --> 15:27:48,590
going to import expect from Chai, which comes from those


15250
15:27:48,620 --> 15:27:55,100
waffle matchers. And we're gonna say await, expect raffle dot


15251
15:27:55,190 --> 15:27:59,870
enter a raffle. And we're not going to pass any value here,


15252
15:27:59,930 --> 15:28:06,320
we're going to expect it to dot b dot reverted with. And if we


15253
15:28:06,320 --> 15:28:09,980
look here, we want it to be reverted with this raffle not


15254
15:28:09,980 --> 15:28:13,970
enough eath entered. So we can put that in quotes raffle not


15255
15:28:14,000 --> 15:28:17,810
enough eath entered. Now we can try this out. Make sure that it


15256
15:28:17,810 --> 15:28:22,670
actually works. Ah ah test dash dash grep. Put this in quotes


15257
15:28:22,670 --> 15:28:26,420
that you don't pay enough. And awesome. We're passing there.


15258
15:28:26,450 --> 15:28:29,060
What else do we want to test? Well, we want to test that if


15259
15:28:29,060 --> 15:28:31,940
the raffle isn't open, we also revert but we'll test that in a


15260
15:28:31,940 --> 15:28:34,730
little bit. As we kind of test the rest of the functionality.


15261
15:28:34,760 --> 15:28:40,280
We want to see that it records players when they enter. So this


15262
15:28:40,280 --> 15:28:44,450
will be an async function. And now we'll enter the raffle.


15263
15:28:44,480 --> 15:28:47,060
First we're going to need that raffle entrance fee. Let's go


15264
15:28:47,060 --> 15:28:50,720
ahead and save that at the top. So we'll say let raffle VRF


15265
15:28:50,720 --> 15:28:54,440
coordinator be to mock raffle entrance fee and then our before


15266
15:28:54,440 --> 15:28:59,210
each will say raffle entrance fee equals a weight ethers dot


15267
15:28:59,480 --> 15:29:05,300
get entrance fee. This should be raffle dot get entrance fee. So


15268
15:29:05,330 --> 15:29:08,450
now we have this raffle entrance fee, you can use it to enter the


15269
15:29:08,450 --> 15:29:15,380
raffle we'll say a weight raffle dot enter raffle with a value of


15270
15:29:15,860 --> 15:29:20,180
raffle entrance fee. And we can make sure that our Deployer here


15271
15:29:20,180 --> 15:29:23,270
has been correctly recorded. So since right now we're connected


15272
15:29:23,270 --> 15:29:26,690
to the Deployer. We'll just make sure that that deployer actually


15273
15:29:26,720 --> 15:29:31,910
is in our contract. So we'll say const player from contract


15274
15:29:32,030 --> 15:29:38,720
equals await raffle dot get player of zero, because we


15275
15:29:38,720 --> 15:29:42,500
record them in our players array and we have our get players


15276
15:29:42,500 --> 15:29:46,160
function which pulls them out. And then we'll say assert dot


15277
15:29:46,160 --> 15:29:51,050
equal player, player from contract should be the Deployer.


15278
15:29:51,770 --> 15:29:54,650
So now we can grep for this in our hard head test. Make sure


15279
15:29:54,650 --> 15:30:00,350
this works. HH test dash dash grep. Deployer is not defined.


15280
15:30:00,410 --> 15:30:02,600
We've got it up here. But we actually didn't save it


15281
15:30:02,600 --> 15:30:07,520
globally. So we got to do let common Deployer. And we'll say


15282
15:30:07,880 --> 15:30:11,720
deployer equals await get named accounts. And we'll wrap it like


15283
15:30:11,720 --> 15:30:15,740
this to get the deployer Awesome. Let's try this again.


15284
15:30:16,280 --> 15:30:21,980
And awesome. What else should this do? 