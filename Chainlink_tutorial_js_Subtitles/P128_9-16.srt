14905
15:04:29,510 --> 15:04:33,560
We go to the chainlink. GitHub again, we go to contracts. So C 0.8, 
我们再一次来到 Chainlink 的 GitHub，前往 "/contracts/src/v0.8/" 

14906
15:04:33,980 --> 15:04:39,470
actually have a mocks folder with VF coordinator v2 Mach dot Sol, 
这里有一个 "mocks" 文件夹，里面有一个 "VRFCoordinatorV2Mock.sol" 

14907
15:04:39,470 --> 15:04:42,680
and we're just going to use this as our mock.
我们就用它来作为我们的 "mock" 

14908
15:04:42,800 --> 15:04:45,800
So in our contracts folder, we're gonna create a new file called test 
所以在我们的 "contracts" 文件夹里，我们要创建一个新的文件，名为 "test"
（实际上应为创建一个新的文件夹，名为 "test"）

14909
15:04:45,830 --> 15:04:53,270
new file called V RF core, in a core, the two mock dot Sol, 
再新建一个文件，名为 "VRFCoordinatorV2Mock.sol"

14910
15:04:53,330 --> 15:04:56,960
and we're just going to import this mock and have it be our mock. 
然后我们直接导入这个 "Mock" 作为我们的 "mock" 

14911
15:04:56,960 --> 15:05:03,710
So we'll do spdx. 
我们先写下 `SPDX` 

14912
15:05:04,130 --> 15:05:08,870
We'll do pragma, solidity, carrot zero, point 8.0, or seven or whatever we want to do, 
再写下 `pragma solidity ^0.8.0`，或者是 7，或是任何我们想要版本

14913
15:05:08,870 --> 15:05:14,990
we'll do import at chainlink slash contracts slash SRC slash v 0.8. Slash, mocks, slash VRF. Pour did a tour B to mock that soul. 
接着是 `import @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol`

14914
15:05:15,410 --> 15:05:23,210
And we'll just check to see if it compiles with Hardhead compile, 
我们用 hardhat 编译一下，看它是否能编译通过

14915
15:05:23,450 --> 15:05:25,460
and it looks like it's compiling as well. Awesome. 
看起来编译过程一切正常，非常好

14916
15:05:25,460 --> 15:05:28,850
So now that we have our mock contract, we can actually go ahead and deploy it. 
现在我们有了 "mock" 合约，就可以继续进行部署了

14917
15:05:28,850 --> 15:05:31,730
So we'll do a weight loi, the RF core de ne Tor V to Mach comma, 
这里我们写 `await deploy("VRFCoordinatorV2Mock", )`

14918
15:05:31,730 --> 15:05:38,450
and then we'll give it our parameters in here. 
然后在这里把我们的参数传递进去

14919
15:05:38,450 --> 15:05:40,070
We'll say from Deployer. 
我们告诉它 `from: deployer`

14920
15:05:41,120 --> 15:05:44,420
Log is going to be true, 
`log: true`

14921
15:05:44,420 --> 15:05:49,880
and then we're going to do our arguments. 
接下来是我们的参数 `args` 

14922
15:05:49,880 --> 15:05:53,570
Now, what are the arguments of this VRF coordinator, v2 Mk. 
那么 "VRFCoordinatorV2Mock" 的参数是什么呢

14923
15:05:53,690 --> 15:05:57,050
Well, if we open the VRF coordinator v2 Mock, right in our VS code, or on GitHub, 
如果我们在 VS Code 或者 GitHub 中打开 "VRFCoordinatorV2Mock" 

14924
15:05:57,050 --> 15:06:01,670
we can actually see We will roll over to the constructor that it takes two things. 
我们转到构造函数就能看到它接收两个东西

14925
15:06:02,030 --> 15:06:05,060
It takes a base fee and a gas price link. 
这两个东西是 "baseFee" 以及 "gasPriceLink"

14926
15:06:05,060 --> 15:06:10,010
What are these
它们是什么呢？

14927
15:06:10,040 --> 15:06:14,390
first one? Well, the first one is this const base fee. 
首先，第一个是 `const BASE_FEE`

14928
15:06:14,390 --> 15:06:17,510
If we go back to the documentation, we can see that there's this premium section of 0.25 Link rink B, 
如果我们回到文档，就可以看到这里有一个 "Premium" 部分，内容是 "0.25 LINK"，Rinkeby 下

14929
15:06:17,510 --> 15:06:22,550
this means that for each request, there's a base fee of 0.25 link for every request. 
这里的意思是对于每一次请求，它的基础费用是 0.25 LINK

14930
15:06:22,550 --> 15:06:27,920
So anytime we want to request a random number on Rinckey, it's going to cost us 0.25. Link, 
所以无论何时，只要我们想在 Rinkeby 上请求一个随机数，它都会花费我们 0.25 LINK

14931
15:06:27,920 --> 15:06:30,980
or you can think of it as 0.25 Oracle gas to make this request. 
或者你可以认为这次请求消耗了 0.25 的预言机 gas 

14932
15:06:30,980 --> 15:06:35,480
So back in our deploy mocks, we can say base V equals, 
回到我们的 "deploy-mocks" 我们可以说 `BASE_FEE =`

14933
15:06:35,510 --> 15:06:39,770
we could resemble Rinckey here and do 25, blah, blah, blah, 
我们可以像 Rinkeby 一样，等于 `25` blah, blah, blah

14934
15:06:39,770 --> 15:06:44,300
or we could do ethers dot utils dot parse eath, of 0.25. 
或者我们可以执行 `ethers.utils.parseEther(0.25)`

14935
15:06:44,300 --> 15:06:49,490
And I'll even put a little comment here, say 0.25 is the premium, it costs 0.25 Link per request. 
我们在这里加一个注释， “0.25 是一个保底费用，每次请求花费 0.25 LINK”

14936
15:06:49,670 --> 15:06:55,730
And remember, the reason that this cost 0.25 Link per request versus the price feeds didn't cost anything 
请记住，发出请求的成本是 0.25 个 LINK 而喂价不需要任何成本

14937
15:06:55,730 --> 15:07:02,180
is because the price feeds. If we look back at a chain that link, 
这是因为，如果我们看一下 "data.chain.link"

14938
15:07:02,180 --> 15:07:06,410
each one of these price feeds is being sponsored by a group of protocols who are paying for all these requests already, 
每一个喂价都有一组协议赞助，他们已经为这些请求支付了相应的费用

14939
15:07:06,410 --> 15:07:09,320
since there isn't a sponsor for this, we are the only ones requesting the randomness, 
由于这里并没有赞助者，我们是唯一请求该随机数的人

14940
15:07:09,320 --> 15:07:13,610
we get to be the ones to actually sponsor getting this random number, 
所以我们实际上就成为了获取该随机数的赞助人

14941
15:07:13,610 --> 15:07:17,810
then the second thing here is going to be the gas price link. 
这里的第二个东西是 "gasPriceLink"

14942
15:07:17,810 --> 15:07:20,630
So let's create another const here to const. gas price link. 
所以我们要再创建一个常量 `const GAS_PRICE_LINK`

14943
15:07:20,660 --> 15:07:24,110
But what this is, is actually a calculated value 
但这究竟是什么呢？它实际上是一个计算值

14944
15:07:24,110 --> 15:07:26,720
is a calculated value based on the gas price of the chain. 
它是一个基于所在链 gas 价格的计算值

14945
15:07:26,720 --> 15:07:30,230
Here's an example if we were to request a random number on Aetherium, 
举个例子，如果我们是在以太坊上请求随机数

14946
15:07:30,230 --> 15:07:35,990
and the eath price skyrocketed up to like to like a billion dollars, 
而以太坊的价格飙升至，比方说 10 亿美元

14947
15:07:35,990 --> 15:07:39,920
gas would be incredibly, incredibly expensive. 
那么 gas 就会变得非常非常昂贵

14948
15:07:39,920 --> 15:07:44,750
Now when chain link nodes respond chain link nodes pay the gas fees, who give us randomness, and do external execution, 
当 Chainlink 节点响应时，它会支付 gas 费以提供随机数并进行外部执行

14949
15:07:44,750 --> 15:07:47,360
the chain link nodes are actually the ones that pay the gas when returning randomness or executing an upkeep or etc. 
也就是说在返回随机数以及执行 Upkeep 等操作时，实际上支付 gas 费的是 Chainlink 节点

14950
15:07:47,360 --> 15:07:52,010
If we go to our raffle dot soul, and scroll down to perform upkeep, or fulfill random words, 
如果前往我们的 "Raffle.sol"，并且往下拉到 "performUpkeep" 或者 "fulfillRandomWords"

14951
15:07:52,070 --> 15:07:55,370
it's actually the chain link nodes that are calling these two functions and paying the gas for it, 
实际上是 Chainlink 节点调用了这两个函数并为此支付了 gas 

14952
15:07:55,370 --> 15:07:59,780
they get paid in Oracle gas to offset those costs. 
它们需要被支付相应的预言机 gas 以抵消这些成本

14953
15:07:59,990 --> 15:08:05,330
But if the price of eath, or any native blockchain skyrocketed 
但如果以太坊或是其它原生区块链代币的价格突然飙升

14954
15:08:05,330 --> 15:08:07,730
the chain that nodes itself to pay the gas fee. 
Chainlink 节点就不得不自己支付这笔 gas 费了

14955
15:08:07,730 --> 15:08:11,570
So the chain link nodes have a calculated price have a calculated variable called the gas price per link, 
所以 Chainlink 节点需要一个名为 "GAS_PRICE_LINK" 的计算量

14956
15:08:11,570 --> 15:08:15,860
which fluctuates based off the price of the actual chain, so that they never go bankrupt.
它会随着实际的链上价格进行波动，这样它们就不会破产了

14957
15:08:15,860 --> 15:08:18,770
Basically, the price of a request changes based off the price of gas for that blockchain, 
大概意思就是，发起请求的价格会随着区块链的 gas 价格进行调整

14958
15:08:18,770 --> 15:08:21,260
you can kind of think of this as the link per gas, if you will, 
你可以把它理解成，每 gas 对应的 link，如果你愿意的话

14959
15:08:21,260 --> 15:08:24,920
for now we can kind of just set it to whatever we want. 
现在我们可以把它设置成任何我们想要的数值

14960
15:08:24,950 --> 15:08:28,490
And we'll just set it to one e nine, 
我们就把它设置为 `1e9`

14961
15:08:28,490 --> 15:08:31,610
which is going to be equivalent to 1123456789. 
它等于 "1" 后面有 9 个 0

14962
15:08:31,610 --> 15:08:34,310
So now that we have the base fee, and the gas price link, 
现在我们有了 "BASE_FEE" 以及 "GAS_PRICE_LINK" 

14963
15:08:34,310 --> 15:08:37,880
we'll grab this base fee, we'll have these be the arguments for our VR chord, enter V to mock, 
我们获取这个 "BASE_FEE" 并把它们作为我们的 "VRFCoordinatorV2Mock" 的参数

14964
15:08:37,880 --> 15:08:40,790
so we'll say and actually we can delete that will say const, args equals base fee, and gas price link, 
所以我们这么写，先把这里删掉，`const args = [BASE_FEE, GAS_PRICE_LINK]`

14965
15:08:41,000 --> 15:08:43,610
then we can take this args variable and just plop it in here. 
然后获取这个 "args" 变量，并把它放到这里

14966
15:08:43,610 --> 15:08:45,830
Now we can do log mocks deployed, 
现在我们就可以执行 `log("Mocks Deployed!")

14967
15:08:45,830 --> 15:08:49,700
then we can do log that a little line like this to let people know that this deploy script is done, 
然后我们可以执行 `log()`，里面是很多这样的横线，好让人们知道这个部署脚本已经执行完成

14968
15:08:49,700 --> 15:08:52,340
then we'll just do a module that exports dot tags equals all and mocks. 
接下来我们执行 `module.exports.tags = ["all", "mocks"]`

14969
15:08:52,340 --> 15:08:58,250
So now that we have a view of coordinator v2 Mock deployed, 
现在我们有了一个完成部署的 "VRFCoordinatorV2Mock"

14970
15:08:58,250 --> 15:09:01,700
we'll come back over to our raffle and make some code around it. 
我们再回到我们的 "Raffle" 并添加一些代码

14971
15:09:01,700 --> 15:09:05,420
Similar to what we just did with our deploy mocks. 
就和我们在 "deploy-mocks" 中做的很像

14972
15:09:05,450 --> 15:09:08,420
We can say if development chains that includes network dot name, we'll do some stuff. 
我们可以说 `if (developmentChains.includes(network.name))`，再执行某些操作

14973
15:09:08,420 --> 15:09:14,990
And we need to import development chains from our helper Hardhead config. 
我们还需要从 "helper-hardhat-config" 中导入 "developmentChains"

14974
15:09:15,290 --> 15:09:18,920
And we need to import network from hard hat. 
以及从 "hardhat" 中导入 "network" 

14975
15:09:18,920 --> 15:09:23,480
My VS code automatically added them Wow, thanks VS code. 
我的 VS Code 已经自动添加了它们，谢谢你 VS Code

14976
15:09:23,570 --> 15:09:26,330
Let's even just do const args and make this variable down here. Stick it in args. 
甚至我们只需要在这里创建一个 `const args` 变量，再把它粘贴到这里

14977
15:09:26,330 --> 15:09:29,720
Our first argument is going to need to be this Vera fi to coordinator 
我们的第一个参数是 "vrfCoordinator"

14978
15:09:29,720 --> 15:09:35,600
so let's make a variable we'll say let VRF core need torby to address 
让我们来创建一个变量 `let vrfCoordinatorV2Address`

14979
15:09:35,600 --> 15:09:38,690
and if we're on a development chain, we're going to grab that mock contract. 
如果我们是在开发链上，那我们还需要获取 "mock" 合约

14980
15:09:38,690 --> 15:09:42,200
So we'll say const PRF, Cor de ATAR V to mock equals await ethers dot get contract, the RF cord the cord to NATO Tor v two MK, 
所以我们写 `const vrfCoordinatorV2Mock = await ehters.getContract("VRFCoordinatorV2Mock")`

14981
15:09:42,230 --> 15:09:46,790
and then we can set the RF coordinator v two address equals VRF core denater V two mach dot address. 
然后我们就可以设置 `vrfCoordinatorV2Address = vrfCoordinatorV2Mock.address`