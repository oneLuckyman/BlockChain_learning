14774
14:55:57,590 --> 14:56:03,620
Like I said Normally, this definitely isn't going to be the way that you're going to write your smart contracts, 
就像我说过的，通常来说，这并不是你编写智能合约该用的方式

14775
14:56:03,650 --> 14:56:05,840
it's almost impossible to write a full smart contract without making any mistakes. And without flipping back and forth between documentation, 
你几乎不太可能在不参考文档而且不犯任何错误的前提下直接写完一份完整的智能合约

14776
14:56:05,840 --> 14:56:09,410
I have already written this contract many times myself, and I still made a whole bunch of mistakes. 
我自己已经多次编写过这个合约了，然而我仍然会犯很多错误

14777
14:56:09,410 --> 14:56:11,900
So it is totally reasonable and totally rational for anybody and everybody to make mistakes going through this. 
所以对任何人来说，在这个过程中出错都是完全可以理解的

14778
14:56:11,900 --> 14:56:14,840
And to use resources and to write tests along the way. 
同样的，在这个过程中参考资源，编写测试也是很合理的

14779
14:56:14,840 --> 14:56:18,800
Now that we have our raffle dot Seoul created, 
现在我们已经把 "Raffle.sol" 写完了

14780
14:56:18,800 --> 14:56:21,950
it's time to add everything else. 
是时候添加其他内容了

14781
14:56:21,950 --> 14:56:25,340
So we're going to come over here, we're gonna create a new folder, and add our deploy folder per usual.
所以我们来到这边，新建一个文件夹，也就是我们通常会添加的 "deploy" 文件夹

14782
14:56:25,340 --> 14:56:28,040
And we're going to do exactly what we've already done a couple of times, 
而且做法就和我们之前几次完全一样

14783
14:56:28,070 --> 14:56:31,070
we're going to create some scripts to deploy our raffle contract. 
我们要创建一些脚本来部署我们的 "Raffle" 合约

14784
14:56:31,370 --> 14:56:34,700
Now with our raffle contract, there's a couple of things in here that we want to make note of 
现在，关于我们的 "Raffle" 合约，有几点需要注意的地方

14785
14:56:34,700 --> 14:56:38,210
first thing is that our constructor right now is absolutely massive. 
首先是，我们的构造函数现在真的是挺大的了

14786
14:56:38,210 --> 14:56:39,350
There are a ton of parameters in here that we need to account for. 
这里有许多参数需要我们去考虑

14787
14:56:39,440 --> 14:56:41,840
Let's take a look at our constructors and see if there's any contracts that we're already interacting with. 
让我们来看一下我们的构造函数，看看是否有我们已经正在交互的合约

14788
14:56:41,840 --> 14:56:44,420
Okay, VRF, coordinator v2. This is a contract address, 
OK，"VRFCoordinatorV2"，这是一个合约地址

14789
14:56:44,420 --> 14:56:46,910
entrance fee, no gasline, no subscription ID no callback, guestimate No, and interval. No. 
"entranceFee" 不是，"gasLane" 不是，"subscriptionId" 不是，"callbackGasLimit" 不是，以及 "interval" 也不是

14790
14:56:46,910 --> 14:56:49,340
So knowing that this is an address should be a tip that Ah, 
那么，知道这是一个地址也就意味着有这么一个提示

14791
14:56:49,340 --> 14:56:53,000
okay, we're probably going to need to deploy some mocks. For this, 
啊，我们很可能需要为它部署一些 "mock" 

14792
14:56:53,000 --> 14:56:56,120
since we're going to need to interact with a VRF coordinator contract that's outside of our project. 
因为我们要交互的 "vrfCoordinator" 合约来自于我们的外部项目

14793
14:56:56,210 --> 14:56:58,520
But let's go ahead and start working on our raffle deployment script 
现在让我们开始编写我们的 "Raffle" 部署脚本

14794
14:56:58,520 --> 14:57:01,340
first, and we know we're going to have to deploy some mocks. So we'll just keep that in mind. 
首先我们知道要部署一些 "mock"，我们要记住这一点

14795
14:57:01,340 --> 14:57:05,450
So let's create a new file. Oh, one, deploy raffle.js. 
所以让我们创建一个新的文件 `01-deploy-raffle.js`

14796
14:57:05,450 --> 14:57:09,650
And let's get started deploying our raffle contract. 
然后让我们开始部署我们的 "Raffle" 合约

14797
14:57:09,650 --> 14:57:13,190
Now, this is going to look really similar to what we've done before. And we're going to do it again here. 
就和我们之前做的非常类似，我们会在这里再做一遍

14798
14:57:13,190 --> 14:57:15,890
If you want to use your previous deploy scripts as a reference, I absolutely recommend you do so. 
如果你想的话，我也非常建议你参考你之前写的部署脚本

14799
14:57:15,920 --> 14:57:19,040
But let's get started with module that exports equals an async function. 
让我们从这里开始 `module.exports = async function()`

14800
14:57:19,040 --> 14:57:22,520
That's going to take get named accounts and deployments. As input parameters, 
它接收 `getNamedAccounts, deployments` 作为输入参数

14801
14:57:22,550 --> 14:57:24,650
then we're going to do const. Deploy log equals deployments, 
然后是 `const { deploy, log } = deployments`

14802
14:57:24,650 --> 14:57:27,770
then we're gonna say const, Deployer, equals await, get named accounts. 
再然后是 `const {deployer} = await getNamedAccounts`

14803
14:57:27,770 --> 14:57:30,770
Let's go to our config and update module that exports to to have this 
前往我们的 "config" 文件，更新 "module.exports" 为这个样子

14804
14:57:30,770 --> 14:57:38,450
I'm just going to copy paste, so that employer is going to be defaulted to account zero and player is going to be defaulted to account one, 
我直接复制粘贴了，所以 "deployer" 默认为账户 0，"player" 默认为账户 1

14805
14:57:38,480 --> 14:57:41,180
if you want to go ahead and write this out, feel free to pause and write out your name accounts. Right now, 
如果你想自己写，可以现在暂停下来，并写下你的账户名

14806
14:57:41,180 --> 14:57:43,610
there's gonna be a lot of boilerplate in our heart hat.config.js. 
在我们的 "hardhat.config.js" 中有很多样板代码

14807
14:57:43,640 --> 14:57:46,040
So feel free to have the GitHub repo for this lesson up with you or your previous scripts that you've already written as a reference
所以请自由参考本课程的 GitHub 仓库或是你以前编写的脚本

14808
14:57:46,040 --> 14:57:48,920
named accounts Deployer. And we're also going to have a player named account 
"namedAccounts", "deployer" 并且在 "namedAccounts" 还有一个 "player"

14809
14:57:49,340 --> 14:57:56,090
so that we can separate different users or different players who are interacting with our contracts. 
这样我们就可以区分与我们的合约进行交互的不同用户

14810
14:57:56,090 --> 14:58:04,070
But for now, we're gonna grab our Deployer. And we're gonna get started. 
现在，我们获取了 "deployer"，让我们开始吧

14811
14:58:04,070 --> 14:58:10,220
Now similar to last time, we would just do const, raffle equals await ploy, raffle, comma, 
就和上次一样，我们要做的就是 `const raffle = await deploy("Raffle", {})`

14812
14:58:10,340 --> 14:58:15,710
and then add all of our stuff in here, right? 
然后就是添加我们所需的所有内容，对吧？

14813
14:58:15,740 --> 14:58:21,050
So this would be from Deployer.
这里是 `from: deployer`

14814
14:58:21,050 --> 14:58:24,350
args, we're going to have a ton of args. So we're going to come back to this. 
`args`，我们会有很多 "args" 所以我们之后再回来写

14815
14:58:24,350 --> 14:58:27,740
And then log is going to be true. 
然后是 `log: true`

14816
14:58:27,770 --> 14:58:30,380
And then we're going to have wait confirmations, 
再然后是 `waitConfirmations`

14817
14:58:30,380 --> 14:58:32,630
there's a little bit more boilerplate we need to work with here 
这里我们还需要使用更多的样板代码

14818
14:58:32,630 --> 14:58:34,730
in our Hardhead config, we don't have a network here. 
我们的 "hardhat.config" 这里还没有 "network"

14819
14:58:34,730 --> 14:58:38,900
So let's add our network information. So we can get those block confirmations 
所以我们来添加一下 "network" 信息，这样我们就可以获取到他们的区块确认数了

14820
14:58:38,900 --> 14:58:42,350
will be specific in here, as well. And we'll say default network is going to be hard hat. 
我们在这里指定一下 `defaultNetwork: "hardhat"`

14821
14:58:42,350 --> 14:58:44,780
And then we'll say networks, and we'll add our network information 
接下来是 `networks`，然后添加我们的 "network" 信息

14822
14:58:44,840 --> 14:58:47,660
that's going to be working with heart hub, 
我们用的就是 "hardhat"

14823
14:58:47,660 --> 14:58:51,500
which has a chain ID of 31337 miles, we'll put that in here as well. 
它的 `chainId` 是 `31337`，放在这里

14824
14:58:51,500 --> 14:58:53,900
And block confirmations were just set to one 
`blockConfirmations` 直接设置为 1 

14825
14:58:53,990 --> 14:58:56,000
lot this column here, 
这里少了个逗号

14826
14:58:56,000 --> 14:58:59,090
we're also gonna be running some staging tests on the Rinkeby network. 
同时，我们的 "staging" 测试会运行于 `rinkeby` 网络

14827
14:58:59,120 --> 14:59:05,570
So we'll add rink B in here with a chain ID of four, block confirmations of six, 
所以我们这里添加 "rinkeby"，以及 `chainId: 4` 以及 `blockConfirmations: 6`

14828
14:59:05,570 --> 14:59:09,530
and we need to add a URL and then also some accounts 
此外我们还需要一个 `url` 以及一些 `accounts`

14829
14:59:10,610 --> 14:59:14,210
for our URL. We've done this 100 times. 
"url" 我们已经处理过很多次了

14830
14:59:14,210 --> 14:59:19,250
We'll do const. rinky dink could be RPC URL equals process study and v dot rake, the RPC URL, 
`const RINKEBY_RPC_URL = process.env.RINKEBY_RPC_URL`

14831
14:59:19,250 --> 14:59:21,080
that's private key, blah, blah, blah, 
还有 "PRIVATE_KEY" 之类的 blah blah blah

14832
14:59:21,080 --> 14:59:23,750
we're going to add all these same variables from our last projects. 
我们直接从我们上一个项目的变量中添加

14833
14:59:23,750 --> 14:59:26,840
So I'm going to ask you to pause here and just copy paste all those variables from our last project. 
所以你这里需要暂停一下，然后直接复制粘贴上一个项目中的变量

14834
14:59:26,840 --> 14:59:29,420
Boom, like so 
嘭，就像这样

14835
14:59:29,420 --> 14:59:33,320
since running rink, prpc, URL, private key corn market cap and ether scan,
由于这里用到了 "RINKEBY_RPC_URL", "PRIVATE_KEY", "COINMARKETCAP" 以及 "ETHERSCAN"

14836
14:59:33,320 --> 14:59:35,960
we're also going to want to make sure you folder, excuse me, new file, dot env. 
所以我们当然需要一个新的文件夹，抱歉，一个新的文件 `.env`

14837
14:59:37,460 --> 14:59:40,370
And we're going to drop all of our information in here 
然后把我们的所有信息都放进去

14838
14:59:40,370 --> 14:59:46,190
our rink, prpc, URL, private key, ether scan API key, and then our coin market cap API key as well. 
包括 "RINKEBY_RPC_URL", "PRIVATE_KEY", "ETHERSCAN_API_KEY" 以及我们的 "COINMARKETCAP_API_KEY"

14839
14:59:46,220 --> 14:59:49,490
Now that we have our private key or ring prpc URL down in URL, 
现在我们有了 "PRIVATE_KEY" 以及 "RINKEBY_RPC_URL"，往下拉到 "url" 这里

14840
14:59:49,580 --> 14:59:53,000
B RPC URL, and for accounts, we're just going to add that single private key. 
添加 `RINKEBY_RPC_URL`，以及 "accounts" 添加一个单独的 "PRIVATE_KEY"

14841
14:59:53,000 --> 14:59:56,150
Now for weight confirmations is going to equal For network config dot block con formations, or one, 
现在对于我们 "waitConfirmations" 它等于 `network.config.blockConfirmations || 1`

14842
14:59:56,150 --> 15:00:01,640
we're gonna have to import network from Hardhead, 
我们还要从 "hardhat" 中导入 "network"

14843
15:00:02,240 --> 15:00:07,490
which looks like my VS code automatically did for me. Thanks VS code. 
看起来这是我的 VS Code 自动帮我做的，谢谢你 VS Code 

14844
15:00:07,490 --> 15:00:11,870
So this is how we're going to deploy a raffle. 
这就是我们部署 "Raffle" 的方法

14845
15:00:12,260 --> 15:00:18,530
Obviously, we have a ton of arguments that we need to account for. 
当然，我们还需要为账户添加很多参数

14846
15:00:18,530 --> 15:00:22,370
So let's get to it. 
让我们来处理一下

14847
15:00:22,370 --> 15:00:26,030
Let's look at our raffle constructor to see what we need to get. 
我们来查看一下我们的 "Raffle" 构造函数，看看我们都需要获取些什么

14848
15:00:26,030 --> 15:00:28,790
Okay, well, the first thing that we need to get via of coordinator v2, 
首先我们需要获取的是 "vrfCoordinatorV2"

14849
15:00:28,790 --> 15:00:32,270
we're gonna use the same strategy we used in our Funmi project 
我们会采用与 "FundMe" 项目中相同的策略

14850
15:00:32,270 --> 15:00:35,720
with using mocks, if we're on a development chain, 
也就是使用 "mock"，如果是在开发链上的话

14851
15:00:35,720 --> 15:00:39,230
and using the actual contract address if we're on a test net, or a live network, 
然后在测试网或者真实网络中再使用实际的合约地址

14852
15:00:39,230 --> 15:00:43,400
so let's get to it. 
让我们开始吧

14853
15:00:43,400 --> 15:00:47,870
So let's go ahead, recreate that helper, hard hat config dot j s 
重建 "helper-hardhat-config.js" 

14854
15:00:47,900 --> 15:00:50,780
and create that const. Network. Config, say it equals 
然后创建 `const networkConfig =`

14855
15:00:50,780 --> 15:00:56,060
for hard hat, we're going to use a mock. 
对于 "hardhat" 来说，我们要使用一个 "mock"

14856
15:00:56,060 --> 15:00:59,450
So we don't need to put that in here for now. 
所以我们暂时不需要填入任何内容

14857
15:00:59,450 --> 15:01:02,750
But for rink B, let's go ahead, but a foreign here, 
但对于 rinkeby，这里是 4 

14858
15:01:03,590 --> 15:01:10,700
so the name is going to be Rinkeby. 
`name` 是 `"rinkeby"`

14859
15:01:10,700 --> 15:01:13,520
And we're going to need to go to the chain link documentation, the VRF contracts, 
接下来我们需要前往 "Chainlink" 文档中的 "vrf-contracts"

14860
15:01:13,550 --> 15:01:16,670
and we're going to need to grab the RF coordinator for the Rinkeby. Test net, 
然后获取 "Rinkeby" 测试网的 "vrfCoordinator"

14861
15:01:16,670 --> 15:01:19,220
we're going to grab this address here, 
我们获取这里的地址

14862
15:01:19,220 --> 15:01:22,070
plop it in here, we'll say V RF core did an eight tour v two, bam, right like that. 
把它放在这里 `vrfCoordinatorV2` 粘贴，就像这样

14863
15:01:22,280 --> 15:01:24,590
So back in our deploy raffle, we're gonna have to pick whether or not to use the V RF coordinator v two in the network config or some mock that we deployed, 
回到我们的 "deploy-raffle"，我们要决定是使用 "networkConfig" 中的 "vrfCoordinatorV2" 还是部署一些 "mock" 来使用

14864
15:01:24,590 --> 15:01:27,170
which of course, leads us to us having to deploy a mock, 
当然了，我们还必须要部署一个 "mock"

14865
15:01:27,170 --> 15:01:30,410
let's create the new file 00. Deploy marks.js. 
让我们创建一个新的文件 `00-deploy-mocks.js`

14866
15:01:30,410 --> 15:01:34,100
So same thing module that exports equals async function 
还是一样的操作 `module.exports = async function()`

14867
15:01:34,190 --> 15:01:37,040
where it's taking, get named accounts, and deployments, as its input variables from the heart at runtime environment, 
它接收 `getNamedAccounts, deployments` 作为输入变量，来源于 hardhat 运行环境

14868
15:01:37,070 --> 15:01:40,460
or do const deploy COMM A log equals deployments. 
然后是 `const { deploy, log } = deployments`

14869
15:01:40,850 --> 15:01:46,670
And then const, Deployer equals await, get named accounts, Excel, 
再然后是 `const { deployer } = await getNamedAccounts()`，就是这样

14870
15:01:46,670 --> 15:01:53,600
and then we're going to grab the chain ID as well as we're going to only wants to deploy this on a development chain. 
接下来我们要获取 "chainId" 因为我们只想把这个部署到开发链上

14871
15:01:53,600 --> 15:01:56,420
So we'll do const chain ID equals network dot config dot chain ID. 
所以我们要运行 `const chainId = network.config.chainId`
（实际上应为 `network.name`）

14872
15:01:56,420 --> 15:02:01,100
Now we're going to only want to deploy mocks, if we're on a development chain. 
现在，我们只想在开发链上部署 "mock" 

14873
15:02:01,100 --> 15:02:04,640
So once again, we're going to go to our helper config, we're going to add those development chains in here. 
所以我们再一次来到 "helper-config"，把开发链添加到这里来

14874
15:02:04,640 --> 15:02:07,400
We'll say const, development chains equals hard hat, and localhost. 
`const developmentChains = ["hardhat", "localhost"]`

14875
15:02:07,400 --> 15:02:11,900
And then we're gonna want to export both 
接下来我们要把它们都导出出来

14876
15:02:11,900 --> 15:02:15,170
So module, dot exports, equals network config, and development chance. 
所以就是 `module.exports = {networkConfig, developmentChains}`

14877
15:02:15,350 --> 15:02:20,720
Now in our deploy mocks, we're gonna want to grab those 
现在来到我们的 "deploy-mocks"，我们要把它们都获取过来

14878
15:02:20,720 --> 15:02:23,060
are saying const development chains, equals require dot dot slash helper helper hardhat config. 
`const { developmentChains } = require("../helper-hardhat-config")`

14879
15:02:23,060 --> 15:02:26,750
Now we can check to see if development chains dot includes the network dot name that we're currently on. 
现在，我们开始检查 `if(developmentChains.includes(network.name))` 也就是我们当前所在网络名

14880
15:02:26,750 --> 15:02:30,560
If we're in a development chain, we're gonna go ahead and log local network, the protected, deploying box. 
如果我们在开发链上，就执行 `log("Local network detected! Deploying mocks...")`

14881
15:02:30,560 --> 15:02:37,430
And now we'll have to deploy a mock VRF coordinator, 
我们要部署一个模拟的 "vrfcoordinator"

14882
15:02:37,460 --> 15:02:43,010
where do we get a mock VRF to coordinator 
所以我们要先获取一个模拟的 "vrfcoordinator"

14883
15:02:43,010 --> 15:02:48,830
Well, let's go ahead and create one of those.
好的，让我们继续，创建一个出来