14774
14:55:57,590 --> 14:56:03,620
Like I said Normally, this definitely isn't going to be the way that you're going to write your smart contracts, 
就像我说过的，通常来说，这并不是你编写智能合约该用的方式

14775
14:56:03,650 --> 14:56:05,840
it's almost impossible to write a full smart contract without making any mistakes. And without flipping back and forth between documentation, 
你几乎不太可能在不参考文档而且不犯任何错误的前提下直接写完一份完整的智能合约

14776
14:56:05,840 --> 14:56:09,410
I have already written this contract many times myself, and I still made a whole bunch of mistakes. 
我自己已经多次编写过这个合约了，然而我仍然会犯很多错误

14777
14:56:09,410 --> 14:56:11,900
So it is totally reasonable and totally rational for anybody and everybody to make mistakes going through this. 
所以对任何人来说，在这个过程中出错都是完全可以理解的

14778
14:56:11,900 --> 14:56:14,840
And to use resources and to write tests along the way. 
同样的，在这个过程中参考资源，编写测试也是很合理的

14779
14:56:14,840 --> 14:56:18,800
Now that we have our raffle dot Seoul created, 
现在我们已经把 "Raffle.sol" 写完了

14780
14:56:18,800 --> 14:56:21,950
it's time to add everything else. 
是时候添加其他内容了

14781
14:56:21,950 --> 14:56:25,340
So we're going to come over here, we're gonna create a new folder, and add our deploy folder per usual.
所以我们来到这边，新建一个文件夹，也就是我们通常会添加的 "deploy" 文件夹

14782
14:56:25,340 --> 14:56:28,040
And we're going to do exactly what we've already done a couple of times, 
而且做法就和我们之前几次完全一样

14783
14:56:28,070 --> 14:56:31,070
we're going to create some scripts to deploy our raffle contract. 
我们要创建一些脚本来部署我们的 "Raffle" 合约

14784
14:56:31,370 --> 14:56:34,700
Now with our raffle contract, there's a couple of things in here that we want to make note of 
现在，关于我们的 "Raffle" 合约，有几点需要注意的地方

14785
14:56:34,700 --> 14:56:38,210
first thing is that our constructor right now is absolutely massive. 
首先是，我们的构造函数现在真的是挺大的了

14786
14:56:38,210 --> 14:56:39,350
There are a ton of parameters in here that we need to account for. 
这里有许多参数需要我们去考虑

14787
14:56:39,440 --> 14:56:41,840
Let's take a look at our constructors and see if there's any contracts that we're already interacting with. 
让我们来看一下我们的构造函数，看看是否有我们已经正在交互的合约

14788
14:56:41,840 --> 14:56:44,420
Okay, VRF, coordinator v2. This is a contract address, 
OK，"VRFCoordinatorV2"，这是一个合约地址

14789
14:56:44,420 --> 14:56:46,910
entrance fee, no gasline, no subscription ID no callback, guestimate No, and interval. No. 
"entranceFee" 不是，"gasLane" 不是，"subscriptionId" 不是，"callbackGasLimit" 不是，以及 "interval" 也不是

14790
14:56:46,910 --> 14:56:49,340
So knowing that this is an address should be a tip that Ah, 
那么，知道这是一个地址也就意味着有这么一个提示

14791
14:56:49,340 --> 14:56:53,000
okay, we're probably going to need to deploy some mocks. For this, 
啊，我们很可能需要为它部署一些 "mock" 

14792
14:56:53,000 --> 14:56:56,120
since we're going to need to interact with a VRF coordinator contract that's outside of our project. 
因为我们要交互的 "vrfCoordinator" 合约来自于我们的外部项目

14793
14:56:56,210 --> 14:56:58,520
But let's go ahead and start working on our raffle deployment script 
现在让我们开始编写我们的 "Raffle" 部署脚本

14794
14:56:58,520 --> 14:57:01,340
first, and we know we're going to have to deploy some mocks. So we'll just keep that in mind. 
首先我们知道要部署一些 "mock"，我们要记住这一点

14795
14:57:01,340 --> 14:57:05,450



14796
14:57:05,450 --> 14:57:09,650



14797
14:57:09,650 --> 14:57:13,190



14798
14:57:13,190 --> 14:57:15,890



14799
14:57:15,920 --> 14:57:19,040



14800
14:57:19,040 --> 14:57:22,520



14801
14:57:22,550 --> 14:57:24,650



14802
14:57:24,650 --> 14:57:27,770



14803
14:57:27,770 --> 14:57:30,770
So let's create a new


14804
14:57:30,770 --> 14:57:38,450
file. Oh, one, deploy raffle.js. And let's get started deploying


14805
14:57:38,480 --> 14:57:41,180
our raffle contract. Now, this is going to look really similar


14806
14:57:41,180 --> 14:57:43,610
to what we've done before. And we're going to do it again here.


14807
14:57:43,640 --> 14:57:46,040
If you want to use your previous deploy scripts as a reference, I


14808
14:57:46,040 --> 14:57:48,920
absolutely recommend you do so. But let's get started with


14809
14:57:49,340 --> 14:57:56,090
module that exports equals an async function. That's going to


14810
14:57:56,090 --> 14:58:04,070
take get named accounts and deployments. As input


14811
14:58:04,070 --> 14:58:10,220
parameters, then we're going to do const. Deploy log equals


14812
14:58:10,340 --> 14:58:15,710
deployments, then we're gonna say const, Deployer, equals


14813
14:58:15,740 --> 14:58:21,050
await, get named accounts. Let's go to our config and update


14814
14:58:21,050 --> 14:58:24,350
module that exports to to have this I'm just going to copy


14815
14:58:24,350 --> 14:58:27,740
paste, so that employer is going to be defaulted to account zero


14816
14:58:27,770 --> 14:58:30,380
and player is going to be defaulted to account one, if you


14817
14:58:30,380 --> 14:58:32,630
want to go ahead and write this out, feel free to pause and


14818
14:58:32,630 --> 14:58:34,730
write out your name accounts. Right now, there's gonna be a


14819
14:58:34,730 --> 14:58:38,900
lot of boilerplate in our heart hat.config.js. So feel free to


14820
14:58:38,900 --> 14:58:42,350
have the GitHub repo for this lesson up with you or your


14821
14:58:42,350 --> 14:58:44,780
previous scripts that you've already written as a reference


14822
14:58:44,840 --> 14:58:47,660
named accounts Deployer. And we're also going to have a


14823
14:58:47,660 --> 14:58:51,500
player named account so that we can separate different users or


14824
14:58:51,500 --> 14:58:53,900
different players who are interacting with our contracts.


14825
14:58:53,990 --> 14:58:56,000
But for now, we're gonna grab our Deployer. And we're gonna


14826
14:58:56,000 --> 14:58:59,090
get started. Now similar to last time, we would just do const,


14827
14:58:59,120 --> 14:59:05,570
raffle equals await ploy, raffle, comma, and then add all


14828
14:59:05,570 --> 14:59:09,530
of our stuff in here, right? So this would be from Deployer.


14829
14:59:10,610 --> 14:59:14,210
args, we're going to have a ton of args. So we're going to come


14830
14:59:14,210 --> 14:59:19,250
back to this. And then log is going to be true. And then we're


14831
14:59:19,250 --> 14:59:21,080
going to have wait confirmations, there's a little


14832
14:59:21,080 --> 14:59:23,750
bit more boilerplate we need to work with here in our Hardhead


14833
14:59:23,750 --> 14:59:26,840
config, we don't have a network here. So let's add our network


14834
14:59:26,840 --> 14:59:29,420
information. So we can get those block confirmations will be


14835
14:59:29,420 --> 14:59:33,320
specific in here, as well. And we'll say default network is


14836
14:59:33,320 --> 14:59:35,960
going to be hard hat. And then we'll say


14837
14:59:37,460 --> 14:59:40,370
networks, and we'll add our network information that's going


14838
14:59:40,370 --> 14:59:46,190
to be working with heart hub, which has a chain ID of 31337


14839
14:59:46,220 --> 14:59:49,490
miles, we'll put that in here as well. And block confirmations


14840
14:59:49,580 --> 14:59:53,000
were just set to one lot this column here, we're also gonna be


14841
14:59:53,000 --> 14:59:56,150
running some staging tests on the Rinkeby network. So we'll


14842
14:59:56,150 --> 15:00:01,640
add rink B in here with a chain ID of four, block confirmations


14843
15:00:02,240 --> 15:00:07,490
of six, and we need to add a URL and then also some accounts for


14844
15:00:07,490 --> 15:00:11,870
our URL. We've done this 100 times. We'll do const. rinky


14845
15:00:12,260 --> 15:00:18,530
dink could be RPC URL equals process study and v dot rake,


14846
15:00:18,530 --> 15:00:22,370
the RPC URL, that's private key, blah, blah, blah, we're going to


14847
15:00:22,370 --> 15:00:26,030
add all these same variables from our last projects. So I'm


14848
15:00:26,030 --> 15:00:28,790
going to ask you to pause here and just copy paste all those


14849
15:00:28,790 --> 15:00:32,270
variables from our last project. Boom, like so since running


14850
15:00:32,270 --> 15:00:35,720
rink, prpc, URL, private key corn market cap and ether scan,


14851
15:00:35,720 --> 15:00:39,230
we're also going to want to make sure you folder, excuse me, new


14852
15:00:39,230 --> 15:00:43,400
file, dot env. And we're going to drop all of our information


14853
15:00:43,400 --> 15:00:47,870
in here our rink, prpc, URL, private key, ether scan API key,


14854
15:00:47,900 --> 15:00:50,780
and then our coin market cap API key as well. Now that we have


14855
15:00:50,780 --> 15:00:56,060
our private key or ring prpc URL down in URL, B RPC URL, and for


14856
15:00:56,060 --> 15:00:59,450
accounts, we're just going to add that single private key. Now


14857
15:00:59,450 --> 15:01:02,750
for weight confirmations is going to equal For network


14858
15:01:03,590 --> 15:01:10,700
config dot block con formations, or one, we're gonna have to


14859
15:01:10,700 --> 15:01:13,520
import network from Hardhead, which looks like my VS code


14860
15:01:13,550 --> 15:01:16,670
automatically did for me. Thanks VS code. So this is how we're


14861
15:01:16,670 --> 15:01:19,220
going to deploy a raffle. Obviously, we have a ton of


14862
15:01:19,220 --> 15:01:22,070
arguments that we need to account for. So let's get to it.


14863
15:01:22,280 --> 15:01:24,590
Let's look at our raffle constructor to see what we need


14864
15:01:24,590 --> 15:01:27,170
to get. Okay, well, the first thing that we need to get via of


14865
15:01:27,170 --> 15:01:30,410
coordinator v2, we're gonna use the same strategy we used in our


14866
15:01:30,410 --> 15:01:34,100
Funmi project with using mocks, if we're on a development chain,


14867
15:01:34,190 --> 15:01:37,040
and using the actual contract address if we're on a test net,


14868
15:01:37,070 --> 15:01:40,460
or a live network, so let's get to it. So let's go ahead,


14869
15:01:40,850 --> 15:01:46,670
recreate that helper, hard hat config dot j s and create that


14870
15:01:46,670 --> 15:01:53,600
const. Network. Config, say it equals for hard hat, we're going


14871
15:01:53,600 --> 15:01:56,420
to use a mock. So we don't need to put that in here for now. But


14872
15:01:56,420 --> 15:02:01,100
for rink B, let's go ahead, but a foreign here, so the name is


14873
15:02:01,100 --> 15:02:04,640
going to be Rinkeby. And we're going to need to go to the chain


14874
15:02:04,640 --> 15:02:07,400
link documentation, the VRF contracts, and we're going to


14875
15:02:07,400 --> 15:02:11,900
need to grab the RF coordinator for the Rinkeby. Test net, we're


14876
15:02:11,900 --> 15:02:15,170
going to grab this address here, plop it in here, we'll say V RF


14877
15:02:15,350 --> 15:02:20,720
core did an eight tour v two, bam, right like that. So back in


14878
15:02:20,720 --> 15:02:23,060
our deploy raffle, we're gonna have to pick whether or not to


14879
15:02:23,060 --> 15:02:26,750
use the V RF coordinator v two in the network config or some


14880
15:02:26,750 --> 15:02:30,560
mock that we deployed, which of course, leads us to us having to


14881
15:02:30,560 --> 15:02:37,430
deploy a mock, let's create the new file 00. Deploy marks.js. So


14882
15:02:37,460 --> 15:02:43,010
same thing module that exports equals async function where it's


14883
15:02:43,010 --> 15:02:48,830
taking, get named accounts, and deployments, as its input


14884
15:02:48,830 --> 15:02:51,830
variables from the heart at runtime environment, or do const


14885
15:02:52,160 --> 15:02:57,860
deploy COMM A log equals deployments. And then const,


14886
15:02:58,160 --> 15:03:05,570
Deployer equals await, get named accounts, Excel, and then we're


14887
15:03:05,570 --> 15:03:08,180
going to grab the chain ID as well as we're going to only


14888
15:03:08,180 --> 15:03:11,240
wants to deploy this on a development chain. So we'll do


14889
15:03:11,240 --> 15:03:17,780
const chain ID equals network dot config dot chain ID. Now


14890
15:03:17,810 --> 15:03:19,850
we're going to only want to deploy mocks, if we're on a


14891
15:03:19,850 --> 15:03:22,370
development chain. So once again, we're going to go to our


14892
15:03:22,370 --> 15:03:24,920
helper config, we're going to add those development chains in


14893
15:03:24,920 --> 15:03:31,130
here. We'll say const, development chains equals hard


14894
15:03:31,130 --> 15:03:35,360
hat, and localhost. And then we're gonna want to export both


14895
15:03:35,360 --> 15:03:41,780
of these. So module, dot exports, equals network config,


14896
15:03:42,470 --> 15:03:47,180
and development chance. Now in our deploy mocks, we're gonna


14897
15:03:47,180 --> 15:03:54,590
want to grab those are saying const development chains, equals


14898
15:03:55,190 --> 15:04:01,220
require dot dot slash helper helper hardhat config. Now we


14899
15:04:01,220 --> 15:04:07,190
can check to see if development chains dot includes the network


14900
15:04:07,220 --> 15:04:10,580
dot name that we're currently on. If we're in a development


14901
15:04:10,580 --> 15:04:14,210
chain, we're gonna go ahead and log local network, the


14902
15:04:14,330 --> 15:04:20,690
protected, deploying box. And now we'll have to deploy a mock


14903
15:04:20,870 --> 15:04:25,340
VRF coordinator, where do we get a mock VRF to coordinator Well,


14904
15:04:25,340 --> 15:04:26,870
let's go ahead and create one of those.