10174
10:10:40,640 --> 10:10:47,000
So now we have our contracts in here and our code is compiling successfully. 
现在我们有了我们的合约，并且我们的代码已经成功编译

10175
10:10:47,000 --> 10:10:50,000
We're probably going Want to deploy our code? 
接下来我们要做的是部署我们的代码

10176
10:10:50,030 --> 10:10:52,910
Now in our last section, I know we use the scripts module. 
在上一节中，我们用的是脚本模块

10177
10:10:52,910 --> 10:10:56,360
And we made our own manual deploy script.
并且创建了一个手动部署脚本

10178
10:10:56,390 --> 10:10:58,730
However, something that you'd notice, the more that you work with just raw ethers, or even just hard hat 
然而，你可能会注意到，当你使用原生 ethers 或仅仅是 Hardhat 进行工作时

10179
10:10:58,730 --> 10:11:01,940
is that keeping track of all our deployments can get a little bit tricky. 
跟踪所有部署会是一件棘手的事情

10180
10:11:01,940 --> 10:11:05,390
If you just use a deploy script, 
如果你只使用一个部署脚本

10181
10:11:05,390 --> 10:11:08,480
it's not saving our deployments to any file. 
它就不会把我们的部署保存到文件中去

10182
10:11:08,480 --> 10:11:11,630
Additionally, having everything in the deploy script for deploying 
此外，把所有部署都放到一个部署脚本中

10183
10:11:11,630 --> 10:11:15,020
can make the tests and the deploy scripts, maybe not work exactly hand in hand. 
可能会使测试和部署脚本之间无法完全兼容

10184
10:11:15,020 --> 10:11:18,200
And there are a couple of other things that might be a little bit tricky to work on, 
而且还可能会遇到一些其他比较麻烦的事

10185
10:11:18,200 --> 10:11:20,390
we're actually going to work with a package 
我们会使用一个包

10186
10:11:20,390 --> 10:11:22,820
that makes everything I just mentioned, and a couple other things way easier. 
它会使我刚才提到的所有事情还有一些其他事情变得更容易一些

10187
10:11:22,820 --> 10:11:26,450
And this package that I'm talking about is going to be the hard hat deploy package. 
而我所说的这个包就是 "hardhat-deploy" 包

10188
10:11:26,450 --> 10:11:29,060
There's a link to this package in the GitHub repository associated with this course. 
这个包的链接也会放到课程关联的 GitHub 仓库里

10189
10:11:29,060 --> 10:11:32,570
It's a hardhat plugin for replicable deployments and easy testing.
它是一个用于可复制部署及简便测试的 Hardhat 插件

10190
10:11:32,570 --> 10:11:35,330
And if we scroll down to installation, we can see we install it basically the normal way. 
如果我们向下滑到安装部分，就能看到可以用通用方法安装它

10191
10:11:35,330 --> 10:11:38,060
They're using npm. And we're gonna go ahead and use yarn. 
他们用的是 npm 而我们还是会继续使用 yarn

10192
10:11:38,450 --> 10:11:40,760
So for us to add it, we'll do yarn, add hardhat dash deploy. 
所以要想添加它，就要执行 "yarn add hardhat-deploy"

10193
10:11:40,760 --> 10:11:44,570
And then of course, we're gonna do dash dash Dev. 
当然了，还有 "--dev"

10194
10:11:44,570 --> 10:11:48,200
Once done deploying this require statement to our hard hat.config.js. 
一旦部署（口误，应为“安装”）完成，就需要在我们的 "hardhat.config.js" 中 "require" 进来

10195
10:11:48,200 --> 10:11:53,060
Once again, basically the config is our entry point. 
再次强调，这个配置文件就是我们的入口点

10196
10:11:53,060 --> 10:11:59,270
This is where we're gonna get started. 
基本上就是我们一切开始的地方

10197
10:11:59,270 --> 10:12:04,880
And we can go ahead and delete our deploy.js script. 
然后我们就可以删除我们的 "deploy.js" 脚本了

10198
10:12:04,880 --> 10:12:07,640
Now if we run yarn hardhat, you see that we have a bunch of new tasks in here, 
现在如果我们运行 "yarn hardhat"，你会看到这里有一堆新的 task

10199
10:12:07,640 --> 10:12:11,540
with one of them being this deploy task, 
其中之一就是 "deploy" task

10200
10:12:11,540 --> 10:12:15,170
this deploy task is going to be the main task that we use to deploy our contracts. 
这个 "deploy" task 将是我们部署合约时主要使用的 task

10201
10:12:15,170 --> 10:12:19,640
Instead of writing our deploy scripts in the Scripts folder, 
这次我们不再在 "scripts" 文件夹中编写我们的部署脚本

10202
10:12:19,700 --> 10:12:23,060
we're actually going to create a new folder, 
而是创建一个新的文件夹

10203
10:12:23,060 --> 10:12:26,030
we can create a new folder by just doing MK dir deploy. 
我们可以使用 "mkdir deploy" 来新建文件夹

10204
10:12:26,030 --> 10:12:28,430
Or you can always right click and hit New Folder. 
或者你也可以右键并点击新建文件夹("New Folder")

10205
10:12:28,430 --> 10:12:31,880
This deploy folder is going to be where a lot of hard hat Deploy Module looks to deploy code. 
这个 "deploy" 文件夹将是许多 "hardhat-deploy" 模块部署代码的地方

10206
10:12:32,090 --> 10:12:36,860
And it's going to be where we are writing our scripts. 
同时也是我们编写脚本的地方

10207
10:12:36,860 --> 10:12:39,290
To write our scripts, we usually need to add one more thing in here. 
为了编写我们的脚本，通常还需要添加一个东西

10208
10:12:39,290 --> 10:12:42,410
Since we're going to be using ethers JS in all of our scripts, 
因为我们要在所有脚本中使用 "ethers.js"

10209
10:12:42,410 --> 10:12:45,140
we want to add Hardhead deploy ethers to our package here. 
所以我们要添加 "hardhat-deploy-ethers" 到我们的包里

10210
10:12:45,140 --> 10:12:48,230
Now, instead of just doing yarn, add dash dev hard at deploy ethers, 
这回我们不再是只运行 "yarn --dev hardhat-deploy-ethers"

10211
10:12:48,260 --> 10:12:51,770
we're going to do something a little bit weird. 
而是会做一些略显奇怪的事情

10212
10:12:51,800 --> 10:12:55,370
We're going to do yarn add or npm install dash dash Dev, 
我们要运行 "yarn add" 或是 "npm install --dev"

10213
10:12:55,370 --> 10:12:58,190
and we're going to install it like this. 
然后按照这样的方式来进行安装

10214
10:12:58,190 --> 10:13:02,390
So let me just copy this. 
让我来复制一下这个东西

10215
10:13:02,390 --> 10:13:05,780
And you can just copy that from the repo. 
你也可以直接从代码库里复制

10216
10:13:05,780 --> 10:13:08,900
And we'll do yarn, add dash dash Dev, and paste that in here.
然后我们来运行 "yarn add --dev" 并粘贴到这里

10217
10:13:08,900 --> 10:13:11,990
What we're doing is we're taking at nomic labs, hard hat ethers, which we've used before, 
我们做的就是获取 "@nomiclabs/hardhat-ethers"，这是我们之前用过的

10218
10:13:12,380 --> 10:13:16,130
and we're overriding it with hard hat deploy ethers. 
然后我们用 "hardhat-deploy-ehters" 把它覆盖掉

10219
10:13:16,160 --> 10:13:19,700
Remember how in our last project, we used hard hat ethers. 
还记得我们在上个项目中是怎么做的么？我们使用的是 "hardhat-ethers"

10220
10:13:19,700 --> 10:13:23,450
So that hard hat could override ethers to use hard hat deploy. 
所以 Hardhat 可以覆盖 ethers 使用 "hardhat-deploy" 
(译者注：这句中的 hardhat-deploy 很可能应为 hardhat-ethers)

10221
10:13:23,450 --> 10:13:27,260
We use hard hat deploy ethers, so that hard hat deploy can override Hardhead, 
我们使用了 "hardhat-deploy-ethers" 所以 "hardhat-deploy" 可以覆盖 Hardhat

10222
10:13:27,260 --> 10:13:30,350
which overrides ethers, which is kind of funny. 
而它又覆盖了 ethers，这还挺有意思的

10223
10:13:30,350 --> 10:13:34,370
When you say like that, this will enable ethers to keep track of and remember 
这样做的话 ethers 就能够跟踪并记住

10224
10:13:34,370 --> 10:13:38,210
all the different deployments that we actually make in our contract. 
我们所部署的所有不同合约

10225
10:13:38,210 --> 10:13:41,570
So if we look at our package, JSON, 
所以如果查看一下我们的 "package.json"

10226
10:13:41,570 --> 10:13:44,030
and now we can see our nomic labs dashboard had ethers. 
现在我们就可以看到 "@nomiclabs/hardhat-ethers"

10227
10:13:44,030 --> 10:13:48,410
Now the version of it is going to be MPM. Hardhead deploy ethers. 
现在它的版本是 "npm:hardhat-deploy-ethers"

10228
10:13:48,410 --> 10:13:52,850
This is our package dot JSON, basically saying 
我们的 "package.json" 基本上就是在说

10229
10:13:52,880 --> 10:13:56,030
the hard hat ethers package is now overwritten by the hard hat deploy ethers package, 
"hardhat-ethers" 包现在被 "hardhat-deploy-ethers" 包覆盖了

10230
10:13:56,060 --> 10:13:59,540
which is what we want. 
这正是我们想要的

10231
10:13:59,540 --> 10:14:03,140
Alright, great. So now that we have that setup, 
很好，现在我们已经做好了设置

10232
10:14:03,140 --> 10:14:05,570
we can start writing our deploy scripts, 
那么就可以开始编写我们的部署脚本了

10233
10:14:05,570 --> 10:14:08,630
the way that Hart had to play works is 
"hardhat-deploy" 的工作方式是

10234
10:14:08,660 --> 10:14:12,080
all the scripts that get added to our deploy folder will get run when we run yarn, hard hat deploy. 
我们在 "deploy" 文件夹中添加的所有脚本都会在执行 "yarn hardhat deploy" 时运行

10235
10:14:12,080 --> 10:14:16,070
So a good practice is usually to number them 
所以有一个很好的做法是对它们进行编号

10236
10:14:16,070 --> 10:14:18,800
so that they run in the order that you want them to run in. 
以便让它们按照你想要的顺序运行

10237
10:14:18,800 --> 10:14:22,130
So since we only have one contract that we want to deploy the Funmi contract, 
因为我们只有一个合约要部署，即 "FundMe" 合约

10238
10:14:22,160 --> 10:14:28,340
we're going to do 01 Deploy Funmi Jas, 
所以我们就命名为 "01-deploy-fund-me.js"

10239
10:14:28,340 --> 10:14:31,760
and in this script, this is going to be where we define how to deploy the fundament contract. 
在这个脚本中，我们将定义具体如何部署 "FundMe" 合约

10240
10:14:31,760 --> 10:14:35,150
Alright, so we're in our deploy Funmi scripts. 
好的，现在在我们的 "deploy-fund-me" 脚本中

10241
10:14:35,150 --> 10:14:39,350
Now traditionally, what did we do, 
通常情况下，我需要做哪些事情？

10242
10:14:39,350 --> 10:14:43,460
we did imports, we did the main function. And then we did calling of main function,
我们要导入库，还要定义 main 函数，并且要调用这个 main 函数

10243
10:14:44,210 --> 10:14:47,120
that Hardhead deploy is a little bit different, 
"hardhat-deploy" 会有一点点不同

10244
10:14:47,120 --> 10:14:49,700
we're still going to import our libraries and packages, 
我们仍然要导入所需的库和包

10245
10:14:49,700 --> 10:14:52,460
but we're not going to have main function. 
但我们不再需要 main 函数了

10246
10:14:52,460 --> 10:14:56,000
And we're also not going to call the main function 
当然也不再需要调用 main 函数了

10247
10:14:56,000 --> 10:14:59,750
when we run Hardhead deploy 
当我们运行 "hardhat-deploy" 时

10248
10:14:59,780 --> 10:15:02,030
Harnett deploy is actually going to call a function that we specify. In this script here. 
"hardhat-deploy" 实际上就是在调用我们指定的某个函数，这个脚本里的

10249
10:15:02,030 --> 10:15:05,510
What we're going to do is we're gonna create a function, we'll call it deploy funk.
我们要做的就是创建一个函数，命名为 "deployFunc"

10250
10:15:06,530 --> 10:15:08,990
We're going to export this deploy function as the default function for Hardhead deploy to look for, 
我们要把这个 "deployFunc" 导出为 "hardhat-deploy" 默认要查找的函数

10251
10:15:08,990 --> 10:15:12,500
so we could say, module that exports dot default equals deploy funk. 
因此我们要这么写 "module.exports.default = deployFunc"

10252
10:15:13,040 --> 10:15:20,240
To test it out, we can go ahead and do console dot log, hi. 
要想测试它，我们使用 "console.log("Hi!")"

10253
10:15:20,240 --> 10:15:25,370
And then in our terminal, run yarn, hard hat, deploy. 
然后在终端中运行 "yarn hardhat deploy"

10254
10:15:25,370 --> 10:15:31,880
Oops, get rid of the parentheses here. Sorry. Run it again. 
哦，这里多了个括号，抱歉，再运行一次

10255
10:15:31,880 --> 10:15:37,220
And we can see it went and ran our deploy func here. 
我们可以看到它运行了我们的 "deployFunc"

10256
10:15:37,370 --> 10:15:41,420
Now if this syntax is easier for you to understand, 
如果你认为现在这种语法更易于你理解

10257
10:15:41,420 --> 10:15:44,510
go ahead and use this syntax 
那么你可以继续使用这种语法

10258
10:15:44,510 --> 10:15:47,270
and we're going to be passing the heart at runtime environment as a parameter to this function. 
我们将传入 “hardhat 运行环境”("hre")作为这个函数的输入参数

10259
10:15:47,270 --> 10:15:51,500
However, if we go to the heart hat deploy documentation, 
然而，如果我们查看 "hardhat-deploy" 的文档

10260
10:15:51,500 --> 10:15:55,610
and we scroll down to an example script, 
并向下滑到这个示例脚本

10261
10:15:55,640 --> 10:15:58,700
the syntax looks a little bit different. 
这里使用的语法看起来会有些不同

10262
10:15:58,700 --> 10:16:01,670
And let me just explain what's going on here and how we're going to be writing ours. 
我来解释一下这是什么意思，以及我们怎么使用这种方式编写

10263
10:16:01,670 --> 10:16:04,370
So instead of kind of defining everything like this, 
与这里的定义方式不同

10264
10:16:04,370 --> 10:16:07,640
and defining the function name, similar to what we were doing before, 
定义函数名时，和之前我们某次的做法类似

10265
10:16:07,640 --> 10:16:10,730
we're actually going to using a nameless, a synchronous function, 
我们要使用一个无名的，异步函数

10266
10:16:10,730 --> 10:16:13,580
we're going to make it an anonymous function, 
即，我们要把它创建为一个匿名函数

10267
10:16:13,580 --> 10:16:17,120
similar to what we've seen before. 
就像我们之前见过的那样

10268
10:16:17,120 --> 10:16:21,770
So instead, we're going to say async parameters like this, 
因此我们要写上 "async" 然后是参数，就像这样

10269
10:16:21,770 --> 10:16:24,830
I'm going to pass our parameters our heart at runtime environment in here. 
我要在这里传入的参数是 “hardhat 运行环境”("hre")

10270
10:16:24,830 --> 10:16:28,490
And it's going to be an arrow function. 
并且它是一个箭头函数

10271
10:16:28,490 --> 10:16:32,480
And then we're going to wrap this whole thing in module dot exports. 
接着，我们要把这整个东西包装进 "module.exports" 里

10272
10:16:33,320 --> 10:16:40,640
So we're gonna say, module, dot exports, equals this async function like this. 
所以我们要写成 "module.exports" 等于这个 async 函数，就像这样

10273
10:16:40,670 --> 10:16:45,200
This syntax here is nearly identical to what's up here, 
这里的语法和上面的语法几乎是等价的

10274
10:16:45,200 --> 10:16:48,710
we just don't have a name for our async function. 
只是我们的 async 函数没有名称罢了

10275
10:16:48,710 --> 10:16:52,040
So this is how we're going to set it up instead. 
这就是我们要使用的配置方法

10276
10:16:52,040 --> 10:16:55,070
But if this syntax is a little bit confusing for you 
但如果这种语法对你来说有点困惑

10277
10:16:55,070 --> 10:16:58,580
feel free to use this above as the two of these are going to be the same. 
那么请自由使用上面那种，因为这两种方式是相同的

10278
10:16:58,580 --> 10:17:01,100
Now the next thing that most of the documentation does 
现在，大多数文档的下一步做的都是

10279
10:17:01,100 --> 10:17:05,240
is it pulls out the variables and functions out of the HRV that we're going to use. 
从 "hre" 中提取出我们要使用的变量和函数

10280
10:17:05,240 --> 10:17:09,290
HRV is the heart hat runtime environment. 
"hre" 就是 “hardhat 运行环境”

10281
10:17:09,350 --> 10:17:12,710
Whenever we run a deploy script, heart hat deploy automatically calls this function 
每当我们运行部署脚本时，"hardhat-deploy" 都会自动调用这个函数

10282
10:17:12,710 --> 10:17:16,580
and just passes the hard hat object into it 
并将 hardhat 对象传递给它

10283
10:17:16,580 --> 10:17:21,020
similar to in back in hard hat simple storage. In our deploy script. 
就像 hardhat 中的 "SimpleStorage" 一样，在我们的 "deploy" 脚本里

10284
10:17:21,050 --> 10:17:24,350
We had ethers run in network come from hard hat, 
我们拥有 "ethers, run" 以及 "network" 来源是 "hardhat"

10285
10:17:24,680 --> 10:17:27,770
instead of coming from hard hat. We're coming from HRV, 
这次不再是来源于 "hardhat" 而是 "hre"

10286
10:17:27,770 --> 10:17:30,740
which is basically the same thing as hard hat. 
基本上它和 "hardhat" 是相同的

10287
10:17:30,740 --> 10:17:38,450
For our script, we're only going to use two variables from a jury 
对我们的脚本来说，我们只使用 "hre" 中的两个变量

10288
10:17:41,060 --> 10:17:44,450
when you use const. Get named accounts. And deployments. 
我们要使用 "const {getNamedAccounts}" 以及 "deployments"

10289
10:17:44,450 --> 10:17:47,930
This syntax might look a little bit weird for you. 
这个语法对你来说可能会有些陌生

10290
10:17:47,930 --> 10:17:51,170
But it's just a way to pull these exact variables out of a tree. 
它所做的就是从 "hre" 中提取出这些变量

10291
10:17:51,170 --> 10:17:56,990
It's kind of the same thing as just doing a tree dot get named accounts and HRA dot deployments. 
这其实就相当于使用 "hre.getNamedAccounts" 以及 "hre.deployments"

10292
10:17:56,990 --> 10:17:58,970
But pulling them out like this means we don't have to add a tree at the beginning anymore. 
但使用这种方式的话就不需要在开头加上 "hre." 了

10293
10:17:58,970 --> 10:18:01,940
And then additionally, additionally, JavaScript has something called syntactic sugar. 
此外呢，JavaScript 还有一种被称为“语法糖”("syntactic sugar")的东西

10294
10:18:02,150 --> 10:18:05,480
So instead of doing this on two lines like this, 
我们可以不用像这样分成两行来做

10295
10:18:05,480 --> 10:18:09,110
we can actually do that whole bit on one line. 
而是把这些东西放到一行里面

10296
10:18:09,110 --> 10:18:14,180
So instead, we just extrapolate those two variables, right in the function declaration. 
我们只需要在函数声明里直接使用这两个变量即可

10297
10:18:14,300 --> 10:18:18,260
So this line is the exact same thing as doing this line. 
所以这一行，就和这两行所做的事完全相同

10298
10:18:18,290 --> 10:18:22,250
This is an asynchronous, nameless function using the arrow notation, 
因此这就是一个异步的，无名的，并且使用箭头符号的函数

10299
10:18:22,250 --> 10:18:25,430
or working with our deploy scripts here. 
用于处理我们的部署脚本

10300
10:18:25,430 --> 10:18:29,150
And we're default, exporting it with module dot exports. 
并且要在 "module.exports" 中作为默认导出

10301
10:18:29,150 --> 10:18:32,750
I don't know that was a lot. 
呼，我知道这内容有点多

10302
10:18:32,750 --> 10:18:35,510
And another is kind of a lot of syntactic sugar here. 
而且这里还使用了一些语法糖

10303
10:18:35,510 --> 10:18:38,270
But if that's really confusing for you, just feel free to use the above. 
但如果你真的觉得这很让人困惑的话，那么也可以使用上面那种方法

10304
10:18:38,270 --> 10:18:41,270
And whenever we refer to get named accounts, 
每当我们获取 "getNamedAccounts" 时

10305
10:18:41,270 --> 10:18:48,560
you can also just do a three dot get named accounts, or a three dot deployments. 
你也可以这么做 "hre.getNamedAccounts" 或者是 "hre.deployments"

10306
10:18:48,590 --> 10:18:53,210
So hopefully, that's clear that
希望我已经讲清楚了

10307
10:18:53,210 --> 10:18:55,760
this top part is gonna be the same as this bottom part right here, 
这里的上半部分和这边的下半部分是完全相同的

10308
10:18:55,760 --> 10:18:58,460
whichever one you feel more comfortable working with.
无论你是觉得哪种方式更适合自己

10309
10:18:59,360 --> 10:19:01,460
But alright, now that we've gotten all that out of the way, let's continue with the script. 
好了，现在我们已经把这些东西都搞清楚了，让我们继续编写脚本吧

10310
10:19:01,580 --> 10:19:04,790
So we're using this deployments object, 
我们使用了这个 "deployments" 对象

10311
10:19:04,820 --> 10:19:08,150
reason this deployments object to get two functions,
通过这个 "deployments" 对象可以获取两个函数

10312
10:19:08,870 --> 10:19:11,690
those two functions are going to be the deploy function, and the log function. 
这两个函数分别是 "deploy" 函数以及 "log" 函数

10313
10:19:11,690 --> 10:19:14,540
So we're gonna say const, deploy log equals deployments. 
因此我们要执行 "const {deploy, log} = deployments"

10314
10:19:14,540 --> 10:19:18,350
So we're going to pull these two functions out of deployments. 
我们要把这两个函数从 "deployments" 中提取出来

10315
10:19:18,350 --> 10:19:22,100
And then we're also going to do const Deployer. Equals await, get named accounts. 
接着我们要执行 "const {deployer} = await getNamedAccounts()"

10316
10:19:23,150 --> 10:19:28,310
So we are grabbing this new deploy function, this new log function, 
现在我们获取了这个新的 "deploy" 函数以及这个 "log" 函数

10317
10:19:28,310 --> 10:19:31,310
and we're grabbing this deployer account 
并且我们还获取了部署者的账户

10318
10:19:31,310 --> 10:19:34,880
from this weird get named accounts function. 
就是通过这个奇怪的 "getNamedAccounts" 函数做到的

10319
10:19:34,880 --> 10:19:38,420
What's this get named accounts function, 
这个 "getNamedAccounts" 函数到底是什么呢？

10320
10:19:38,660 --> 10:19:42,350
this get named accounts is a way for us to get named accounts. 
"getNamedAccounts" 就是一个获取 "namedAccounts" 的方法

10321
10:19:42,710 --> 10:19:45,620
When working with ethers we saw when working with ethers, 
当我们在使用 "ethers" 时

10322
10:19:45,620 --> 10:19:49,400
we can actually get our accounts based off of the number in the Account section of each network. 
我们可以根据不同网络的 "accounts" 部分中的编号来获取我们的账户

10323
10:19:49,400 --> 10:19:51,710
So for example, 
举个例子

10324
10:19:54,800 --> 10:19:57,800
in this list of private keys, private keys zero private key one private key two, 
在这个包含私钥的列表中，有 "privateKey0", "privateKey1", "privateKey2"

10325
10:19:57,800 --> 10:20:00,770
it might get a little confusing to remember which ones which 
这很容易让人混淆并记不清究竟哪个是哪个

10326
10:20:00,770 --> 10:20:04,460
so instead of working like that, 
因此，我们不采用这种方式

10327
10:20:04,460 --> 10:20:07,880
we can add a section at the bottom called named accounts 
而是在底部添加一个名为 "namedAccounts" 的部分

10328
10:20:07,880 --> 10:20:11,900
where we can name each one of those spots in the accounts array. 
我们可以在里面为 "accounts" 数组中每个位置的账户取一个名字

10329
10:20:11,900 --> 10:20:15,470
So we'll do named accounts. 
所以我们来写下 "namedAccounts"

10330
10:20:15,470 --> 10:20:18,710
And we'll say one of the accounts that will name is going to be named Deployer. 
并且我们要把其中一个账户命名为 "deployer"

10331
10:20:18,710 --> 10:20:23,240
And we're gonna say by default, the zero with account is going to be Deployer. 
并且我们要指定 "default"，即 "accounts" 中的第 0 个就是 "deployer"

10332
10:20:23,240 --> 10:20:27,560
We can also specify which number is going to be the deployer account across different chains. 
我们也可以指定不同链上的第几个账户为 "deployer"

10333
10:20:27,560 --> 10:20:31,070
For example, on Rigby we wanted the deployer account to be the first position, 
例如，在 Rinkeby 上如果我们想让位置 1 的账户成为 "deployer"

10334
10:20:31,070 --> 10:20:33,770
we could do something like this 
我们就可以这么做

10335
10:20:33,770 --> 10:20:37,130
or on hard hat, we could do it like this. 
或者在 Hardhat 上，我们可以这样做

10336
10:20:37,130 --> 10:20:40,160
We can create multiple users. Like for example, 
我们还可以创建多个用户，举例来说

10337
10:20:40,160 --> 10:20:44,510
if we wanted to do a user for some test or something, 
如果我们想为了测试或其他目的而使用 "user"

10338
10:20:44,540 --> 10:20:48,380
and we'll just say the default is one or whatever we wanted in here. 
我们就可以这样做 "default: 1"，或是任何一个我们想用的编号

10339
10:20:48,380 --> 10:20:51,170
So back in our deploy fun me 
回到我们的 "deploy-fund-me"

10340
10:20:51,260 --> 10:20:54,320
We're going to say we're going to grab that deployer account from our named accounts. 
我们就可以说我们通过 "namedAccounts" 获取了 "deployer" 的账户

10341
10:20:54,320 --> 10:20:57,530
And then finally, we're going to grab our chain ID 
最后，我们要获取我们的 "chainId"

10342
10:20:57,530 --> 10:21:03,320
for reasons that will come clear pretty soon. 
至于原因很快就会搞清楚的

10343
10:21:03,320 --> 10:21:09,920
So we'll do const, chain ID equals network dot config dot chain ID. 
我们先写下 "const chainId = network.config.chainId"