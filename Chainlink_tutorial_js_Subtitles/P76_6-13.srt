9637
09:38:06,160 --> 09:38:12,280
Now that we have some tests, 
现在我们有了这些测试

9638
09:38:12,280 --> 09:38:15,940
we can actually start testing to see how much gas each one of our functions actually costs. 
就可以开始测试一下每个函数实际要花费多少 Gas 了

9639
09:38:15,940 --> 09:38:19,660
One of the most popular extensions for hard hat is the hard hat gas reporter. 
Hardhat 最受欢迎的扩展之一是 "hardhat-gas-reporter"

9640
09:38:19,660 --> 09:38:23,230
This is an extension that gets attached to all of our tests, 
这是一个可以附加在我们所有测试上的扩展

9641
09:38:23,230 --> 09:38:27,160
and automatically gives us an output that looks like this, 
并自动提供类似这样的输出

9642
09:38:27,160 --> 09:38:30,130
that tells us approximately how much gas each one of our functions cost. 
以告诉我们每个函数大约消耗了多少 Gas

9643
09:38:30,130 --> 09:38:32,950
We scroll down in here, we can read the instructions on how to actually install this 
如果我们向下滑动到这里，可以阅读到有关如何安装这个扩展的说明

9644
09:38:32,950 --> 09:38:36,010
npm install Hardhead gas reporter 
"npm install hardhat-gas-reporter"

9645
09:38:36,010 --> 09:38:38,620
which we're going to use with yarn. 
但我们会使用 yarn 来安装

9646
09:38:38,620 --> 09:38:41,830
So we're gonna say yarn, add hard hat, gas reporter, dash dash Dev.
所以我们运行 "yarn add hardhat-gas-reporter --dev"

9647
09:38:41,860 --> 09:38:49,510
And now that that package is installed, 
现在这个包已经安装好了

9648
09:38:49,510 --> 09:38:50,440
we can go over to our config and add some parameters in here 
我们可以转到 "config" 文件中并在这里添加一些参数

9649
09:38:52,930 --> 09:38:56,890
so that we can work with this gas pit. 
这样我们就可以使用这个 gas reporter 了

9650
09:38:57,040 --> 09:39:01,480
But our neath our ether scan section, 
就在我们的 "etherscan" 部分下面

9651
09:39:01,480 --> 09:39:04,750
we're going to add a new section called gas reporter. 
我们要添加一个新的部分名为 "gasReporter"

9652
09:39:04,750 --> 09:39:09,430
To have it run, whenever we run our tests 
为了让它能在我们运行测试时运行

9653
09:39:09,460 --> 09:39:12,940
we're going to do enabled is going to be true. 
我们要写下 "enabled" 为 true

9654
09:39:12,940 --> 09:39:17,260
And then up at the top, we can add it by adding require hardhat gas reporter. 
然后在顶部，我们可以通过添加 "require("hardhat-gas-reporter")" 来添加它

9655
09:39:18,250 --> 09:39:23,470
Now that we have it in here, we can do yarn hardhat test, 
现在我们已经有了这个包，就可以运行 "yarn hardhat test" 了

9656
09:39:23,470 --> 09:39:27,160
and after we run our tests, it'll automatically run this gas reporter. 
并且在运行完测试之后，它会自动运行这个 "gas reporter"

9657
09:39:27,190 --> 09:39:32,380
So we see our tests go ahead and run. 
现在我们看到我们的测试运行好了

9658
09:39:32,380 --> 09:39:35,590
And then we get this output that looks like this that tells us 
并且我们获得了这样的输出，它告诉我们

9659
09:39:35,620 --> 09:39:39,610
how approximately how much our contracts and methods cost. 
我们的合约和方法大约消耗了多少 gas

9660
09:39:39,610 --> 09:39:42,850
So our store function looks like It costs approximately this much gas 
所以我们的 "store" 函数看起来大约需要这么多 gas

9661
09:39:42,880 --> 09:39:45,910
and our simple storage costs approximately this much gas. 
以及我们的 "SimpleStorage" 大约需要这么多 gas

9662
09:39:45,940 --> 09:39:49,390
This is incredibly helpful for figuring out 
这对我们来说很有用

9663
09:39:49,390 --> 09:39:53,530
how to optimize our gas as best as possible. 
可以帮助我们最大程度地优化 gas 分配

9664
09:39:53,530 --> 09:39:56,650
Now I usually like to take it a step further though. 
通常来说我喜欢更进一步

9665
09:39:56,650 --> 09:40:00,460
Having the gas output it like that is nice, but we can make it even better. 
像这样输出 gas 消耗也不错，但我们能做得更好

9666
09:40:00,460 --> 09:40:05,440
I like to output it to a file by doing output file. Yes, report dot txt 
我喜欢设置一个 "outputFile: gas-report.txt" 来把它输出成一个文件 

9667
09:40:05,470 --> 09:40:10,120
and then my dot get ignore like to add it in here, but doing gas report dot txt 
然后在我的 ".gitignore" 中把它添加进来 "gas-report.txt"

9668
09:40:10,210 --> 09:40:15,010
sentence it's not really important for the gas report to get pushed up to GitHub. 
因为 gas 报告并不是那么重要的东西，没必要传到 github 上

9669
09:40:15,010 --> 09:40:18,190
Do no colors is true. The reason we add this is because when we output to a file, 
设置 "noColors" 为 true，之所以这样设置是因为当我们输出到文件时

9670
09:40:18,190 --> 09:40:22,480
the colors can get messed up basically. 
颜色基本上会比较混乱

9671
09:40:22,480 --> 09:40:26,890
And then the biggest addition we could do is we can add a currency in here. 
接下来最大的改动是在这里添加一个 "currency"(货币)

9672
09:40:26,890 --> 09:40:29,500
So that we can get the cost of each function in USD for a blockchain like Aetherium. 
这样，我们就可以获得在类似以太坊这样的区块链上每个函数的 USD 成本

9673
09:40:29,500 --> 09:40:34,840
Now in order to get a currency here, 
现在，为了在这里获得 "currency"

9674
09:40:34,840 --> 09:40:38,740
we actually need to get an API key from corn market cap, 
我们需要从 CoinMarketCap 上获取一个 API 密钥

9675
09:40:38,740 --> 09:40:43,450
just like we did with ether scan, you can go to coin market cap, 
就像我们之前使用 etherscan 那样，你需要前往 CoinMarketCap 的网站

9676
09:40:43,450 --> 09:40:46,120
corn market cap API, get your API key now, 
在 "coinmarketca.com/api/" 上点击 "GET YOUR API KEY NOW"

9677
09:40:46,120 --> 09:40:52,240
and we'll go ahead and sign up. 
然后我们要先注册

9678
09:40:52,240 --> 09:41:01,240
Choose a basic plan. We'll agree and create my account, 
选择 "Basic Plan"，选择 "agree" 并点击 "CREATE MY ACCOUNT" 

9679
09:41:01,660 --> 09:41:05,110
we'll get an email verification. And we'll go ahead and verify. 
我们会受到一封验证邮件，选择前往验证

9680
09:41:05,110 --> 09:41:10,240
Now in the coin market cap dashboard, we can copy our key. 
现在，在 CoinMarketCap 的 "Dashboard" 界面，我们可以复制我们的密钥

9681
09:41:10,240 --> 09:41:14,050
And yep, you guessed it exactly what we're going to do with this key, 
然后没错，你肯定猜到了，我们要怎么使用这个密钥

9682
09:41:14,050 --> 09:41:16,330
we're going to drop it into our dot env file, 
我们要把这个密钥放到我们的 ".env" 文件中

9683
09:41:16,330 --> 09:41:22,840
or say coin market cap, API key equals and then paste it in there like that. 
我们来写下 "COINMARKETCAP_API_KEY=" 然后把密钥粘贴过来

9684
09:41:22,840 --> 09:41:25,750
Now that we have our corn market cap API key in here, 
现在我们有了这个 "COINMARKETCAP_API_KEY" 

9685
09:41:25,780 --> 09:41:30,460
we can go back to our header dot config and add it in this corn market cap parameter. 
就可以回到我们的 "hardhat.config" 里，并把它添加为 "coinmarketcap" 的参数

9686
09:41:30,460 --> 09:41:33,490
We're gonna do the exact same way we did above, 
我们会使用和之前完全相同的方法

9687
09:41:33,490 --> 09:41:38,050
we'll do const, coin, market cap, API key equals process dot EMV, that coin market cap API key, 
写下 "const COINMARKETCAP_API_KEY = process.env.COINMARKETCAP_API_KEY"

9688
09:41:38,050 --> 09:41:46,210
and then we'll take this sticking in here.
现在把它复制下来并粘贴到这里

9689
09:41:46,210 --> 09:41:49,930
So what this is going to do is actually going to make an API call to corn market cap, 
它做的就是发起一个调用 CoinMarketCap 的 API 的请求

9690
09:41:49,930 --> 09:41:52,930
whenever we run our gas reporter. 
就在我们每次运行 "gas reporter" 的时候

9691
09:41:52,930 --> 09:41:56,680
This is why sometimes you'll see me comment this out and uncomment it
这就是为什么你会看到我有时会注释掉它有时不会

9692
09:41:56,710 --> 09:41:59,290
because I don't always want it to make this API calls. 
因为我并不总是想调用这个 API

9693
09:41:59,320 --> 09:42:02,440
But now what we can do now that it's enabled, we have an output file,
现在我们能做什么？它已经是 "enabled" 的了，我们还有了一个输出文件

9694
09:42:02,440 --> 09:42:05,410
we can see the currency and we have our API key, 
我们可以查看货币并且拥有自己的 API 密钥

9695
09:42:05,770 --> 09:42:08,740
all we can do is run yarn hardhat test. 
我们只需要运行 "yarn hardhat test"

9696
09:42:08,740 --> 09:42:14,650
And after all our tests pass, we're going to see a gas report.tx T 
在我们所有的测试通过之后，我们将看到一个 "gas-report.txt" 文件

9697
09:42:14,650 --> 09:42:18,520
that we can go ahead and read from which has that gas report. 
打开它看一下，里面就是 gas 报告

9698
09:42:18,520 --> 09:42:23,290
And now it actually has the USD price of each one of these transactions, 
现在，它就包含了每笔交易的 USD 价格

9699
09:42:23,290 --> 09:42:26,200
it looks like at current prices, with Aetherium being $3,000 per eath, 
看起来以当前的价格来算，每个以太币价值 3000 多美元

9700
09:42:26,200 --> 09:42:30,670
and a gas price of 43 Gwei, the store function would cost $6. 
gas 价格是 43 gwei，"store" 函数将花费 6 美元

9701
09:42:30,670 --> 09:42:34,930
And the simple storage function would cost $64. 
SimpleStorage 函数(口误：应为“合约部署”)将花费 64 美元

9702
09:42:34,930 --> 09:42:38,440
The current the Hardhead gas reporter actually comes with some different options, though, 
目前的 "hardhat-gas-reporter" 实际上带有一些不同的选项

9703
09:42:38,440 --> 09:42:40,540
if you're going to be deploying to different network, 
如果你想部署到不同的网络上

9704
09:42:40,540 --> 09:42:42,490
for example, with binance, Polygon, Avalanche or hecho. 
例如 "Binance", "Polygon", "Avalanche" 或是 "Heco"

9705
09:42:42,490 --> 09:42:46,180
For example, let's say we wanted to deploy the polygon,
比方说，我们想部署到 Polygon 上

9706
09:42:46,180 --> 09:42:49,630
let's see how much deploying the polygon would cost 
我们来看看部署到 Polygon 上需要花费多少

9707
09:42:49,900 --> 09:42:53,080
well in our WMV UHD ad token, Matic 
来到我们的 ".env"(口误：应为 "hardhat.config.js") 添加 token: "MATIC"

9708
09:42:53,080 --> 09:42:55,450
And now we'd rerun this test. 
现在我们要重新运行测试

9709
09:42:57,790 --> 09:43:03,580
And if we look at our gas report that takes T 
如果我们查看 "gas-report.txt"

9710
09:43:03,580 --> 09:43:07,570
will now see the gas price of polygon right now is around 37 Gray per gas. 
就能看到现在 Polygon 的 gas 价格大约是 37 gwei 每 gas

9711
09:43:07,570 --> 09:43:12,100
And the cost of Matic is 147 automatic and USD. 
而 matic 的花费则是 1.47 USD 每 matic

9712
09:43:12,190 --> 09:43:15,760
Now we can see the cost of calling the simple storage method is going to be $0.00. 
现在我们可以看到调用 "SimpleStorage" 的 "store" 方法会花费 0.00 美元

9713
09:43:15,760 --> 09:43:20,440
Now this of course is rounded down, 
当然这是四舍五入的结果

9714
09:43:20,440 --> 09:43:23,320
but it's going to be really, really cheap to call store 
不过这里调用 "store" 真的是非常非常便宜了

9715
09:43:23,320 --> 09:43:26,890
versus deploying the contract is going to cost three cents, 
而部署合约则是花费 3 美分

9716
09:43:26,890 --> 09:43:30,640
I make it a habit to select false for my gas reporter


9717
09:43:30,850 --> 09:43:32,830
whenever I don't want to actually work with the gas here.


9718
09:43:33,070 --> 09:43:36,160
Awesome. Now sometimes when we're working with our code, if


9719
09:43:36,160 --> 09:43:39,550
we don't have these environment variables specified Hardhead


9720
09:43:39,580 --> 09:43:43,360
might get a little bit upset with us. So oftentimes, I'll add


9721
09:43:43,390 --> 09:43:47,440
some code in here. So that these variables are always populated,


9722
09:43:47,470 --> 09:43:52,870
because we didn't specify our rink prpc URL, ring P RPC URL is


9723
09:43:52,870 --> 09:43:56,140
going to be undefined. And that might throw some errors blow. So


9724
09:43:56,140 --> 09:43:59,350
oftentimes, what we'll do is I'll add an or parameter here,


9725
09:43:59,620 --> 09:44:03,610
these double pipes mean or, and in JavaScript, if we say some


9726
09:44:03,610 --> 09:44:07,000
variable equals something or something else, what is really


9727
09:44:07,000 --> 09:44:10,690
happening is we're gonna say, okay, rink, the RPC URL is going


9728
09:44:10,690 --> 09:44:15,220
to be equal to process dot E and V dot rink, the RPC URL. But if


9729
09:44:15,220 --> 09:44:18,640
this rink, the RPC URL doesn't exist, it's going to be whatever


9730
09:44:18,640 --> 09:44:23,080
else is over here. And I might write something like HTTPS eath


9731
09:44:23,080 --> 09:44:28,360
Rinkeby. Example, or something like this, just so that I don't


9732
09:44:28,360 --> 09:44:31,270
make hard hat mad if I don't use rank B. And we can do something


9733
09:44:31,270 --> 09:44:36,610
like that for all these. So you'll see this syntax,


9734
09:44:36,640 --> 09:44:42,700
oftentimes in a lot of code setups. Now the last thing that


9735
09:44:42,700 --> 09:44:45,340
I'm going to show you before going into the TypeScript


9736
09:44:45,340 --> 09:44:48,820
edition of This is test coverage. And as we progressed


9737
09:44:48,820 --> 09:44:51,460
to this course, I'm going to show you more and more tools


9738
09:44:51,460 --> 09:44:54,370
that you can use to make sure that our simple storage contract


9739
09:44:54,400 --> 09:44:58,390
is safe and secure. And we take all the steps we can to prevent


9740
09:44:58,390 --> 09:45:01,180
any hacks from happening if we deploy in real life. One of


9741
09:45:01,180 --> 09:45:04,210
those tools is a tool called solidity coverage. And this is


9742
09:45:04,210 --> 09:45:07,420
also a hardhat plugin that we can use for our code. solidity


9743
09:45:07,420 --> 09:45:10,480
coverage is a project that goes through all of our tests and


9744
09:45:10,480 --> 09:45:15,550
sees exactly how many lines of code in our sample store dot Sol


9745
09:45:15,580 --> 09:45:18,580
are actually covered. And this can be a Good tip off. If we


9746
09:45:18,580 --> 09:45:21,640
don't cover some line of code, solidity coverage will say, Hey,


9747
09:45:21,670 --> 09:45:23,830
you don't have any tests for this line, maybe you should


9748
09:45:23,830 --> 09:45:26,320
write some tests for it. We can add solidity coverage the same


9749
09:45:26,320 --> 09:45:29,770
way we've been adding all of our packages. npm install dash, just


9750
09:45:29,770 --> 09:45:33,880
save Dev, or since we're using yarn, yarn, add dash dash Dev,


9751
09:45:34,090 --> 09:45:41,170
solidity coverage. And we can then add this to our config, the


9752
09:45:41,170 --> 09:45:43,900
same way we've been adding everything to our config, go to


9753
09:45:43,900 --> 09:45:48,610
our config, and we'll write require solidity coverage. And


9754
09:45:48,610 --> 09:45:50,890
there's some configuration pieces we can add down here


9755
09:45:50,890 --> 09:45:53,530
below for this, but we're just going to use the default now we


9756
09:45:53,530 --> 09:45:58,870
can do is run yarn, RT hat coverage. And this is going to


9757
09:45:58,870 --> 09:46:01,750
go through our tests and print out a file that looks like this,


9758
09:46:01,930 --> 09:46:04,780
we'll also get a file called coverage dot JSON, which is


9759
09:46:04,780 --> 09:46:08,500
basically this chart broken down a little bit more often put my


9760
09:46:08,740 --> 09:46:12,040
coverage dot JSON in my dot get ignore. And I know we haven't


9761
09:46:12,040 --> 09:46:15,250
actually seen dot Git ignore, do what it's supposed to do. But we


9762
09:46:15,250 --> 09:46:20,500
will soon we can see here that about 50% of the code 50% of our


9763
09:46:20,500 --> 09:46:24,250
statements in simple storage dot soul are covered. About two


9764
09:46:24,250 --> 09:46:27,700
thirds of our functions are and 50% of the lines, It'll even


9765
09:46:27,700 --> 09:46:30,940
give us exactly what lines aren't tested right now, which


9766
09:46:30,940 --> 09:46:34,750
we can see exactly 31 and 32 of simple swords, outsole aren't


9767
09:46:34,750 --> 09:46:38,560
covered, which makes a lot of sense, because 31 to 32 is this


9768
09:46:38,590 --> 09:46:41,650
Add Person function, which we didn't call and we didn't add to


9769
09:46:41,650 --> 09:46:45,310
our tests. If you want to take this time to pause and try to


9770
09:46:45,310 --> 09:46:48,580
make this solidity coverage be 100% across the board, by


9771
09:46:48,580 --> 09:46:51,370
writing some more tests, I highly recommend you do so it'll


9772
09:46:51,370 --> 09:46:54,370
be a great learning exercise. We'll also add the coverage


9773
09:46:54,400 --> 09:46:57,460
folder. So covered adjacent and the coverage folder, which


9774
09:46:57,490 --> 09:47:00,550
again, I'll explain what the dot get ignore folder does a little


9775
09:47:00,550 --> 09:47:06,040
bit later. 