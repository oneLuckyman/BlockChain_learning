9460
09:26:10,840 --> 09:26:16,060
Now, there's a couple other tasks that are really helpful. 
现在，还有一些其它有用的 task

9461
09:26:16,060 --> 09:26:19,240
You'll see before I went ahead and just deleted artifacts and deleted the cache manually. 
你应该还记得我之前是用手动方法删除的 "artifacts" 和缓存

9462
09:26:19,240 --> 09:26:22,450
Well, to do that yourself, you can also just run yarn Hardhead, clean. 
你自己做的时候也可以运行这个 "yarn hardhat clean"

9463
09:26:22,450 --> 09:26:28,840
And that'll delete the artifacts folder and clear out your cache.
这样做就会删除 "artifacts" 文件夹并清除你的缓存

9464
09:26:28,840 --> 09:26:31,900
We already know what compiled does. 
我们已经知道 "compile" 是在干什么了

9465
09:26:31,990 --> 09:26:34,750
But one of the biggest things that Hardhead is fantastic for especially is running tests. 
但 hardhat 最大的优点之一其实是非常适合运行测试

9466
09:26:34,750 --> 09:26:37,930
Now we haven't run tests yet so far. 
目前为止我们还没有运行任何测试

9467
09:26:37,930 --> 09:26:41,920
However, running tests is absolutely critical to your smart contract development journey. 
但是，测试环节对于你的智能合约开发之旅绝对至关重要

9468
09:26:41,920 --> 09:26:45,340
And we're going to spend a lot of time in the future writing really good tests. 
未来我们将会花费大量时间来编写良好的测试

9469
09:26:45,340 --> 09:26:48,460
The reason that writing tests are so important 
之所以编写测试如此的重要

9470
09:26:48,460 --> 09:26:51,490
is because we want to make sure our code does exactly what we want it to do, 
是因为我们希望确保我们的代码确实能够实现我们想要的功能

9471
09:26:51,490 --> 09:26:55,270
especially in the defy, and the decentralized, smart contract world, 
在 DeFi 以及去中心化智能合约的世界中尤其如此

9472
09:26:55,270 --> 09:26:59,440
all of our code is going to be open source for anybody to interact with, and potentially exploit. 
我们所有的代码都将对所有人开源以供其交互，并有可能被利用

9473
09:26:59,440 --> 09:27:03,010
There's sites like req dot news, 
有一些网站比如说 "rekt.news"

9474
09:27:03,010 --> 09:27:06,400
which go through a ton of previous hacks and how they actually got hacked 
它们会介绍大量之前的黑客攻击事件还有他们是如何被攻击的

9475
09:27:06,730 --> 09:27:10,540
and what happened in the smart contract to enable these hacks to occur. 
以及智能合约中到底发生了什么才导致了这些攻击的发生

9476
09:27:10,570 --> 09:27:14,590
So testing, so writing really strong tests is always going to be our first line of defense. 
所以说编写一个强大的测试永远是我们的第一道防线

9477
09:27:14,590 --> 09:27:17,890
And we have this sample test.js, 
我们这里有一个 "sample-test.js"

9478
09:27:17,890 --> 09:27:21,760
that comes default with the basic package of hardhat. 
它是 Hardhat 默认自带的一个基础包

9479
09:27:21,760 --> 09:27:25,120
But as you probably already know, 
但你可能已经猜到了

9480
09:27:25,120 --> 09:27:28,300
we're going to rename this and change it. 
我们将把它重命名并进行修改

9481
09:27:28,300 --> 09:27:31,240
So we're going to rename this to test deploy dot j s. 
我们将把它重命名为 "test-deploy.js"

9482
09:27:31,240 --> 09:27:34,330
And we're going to delete everything in here and start from scratch. 
并删除其中的所有内容从头开始

9483
09:27:34,840 --> 09:27:39,640
We want to be able to test all of our solidity code locally, 
我们希望能够在本地测试所有的 Solidity 代码

9484
09:27:39,640 --> 09:27:43,030
so that we know exactly what it's doing. 
以便我们知道它正在做什么

9485
09:27:43,030 --> 09:27:46,630
And we can have a programmatic way to make sure that our code does what we want it to do. 
我们可以通过编程的方式来确保我们的代码会按照我们期望的方式运行

9486
09:27:46,630 --> 09:27:50,320
So let's write a basic test for our simple storage contract. 
所以让我们为我们的 "SimpleStorage" 合约写一个基本的测试

9487
09:27:50,320 --> 09:27:54,700
So that we can be sure that it's doing exactly what we want it to be doing. 
这样我们就可以确认它是否在执行我们想要的操作

9488
09:27:54,700 --> 09:27:58,870
Hard Hat testing works with the Mocha framework, 
Hardhat 测试使用的是 Mocha 框架

9489
09:27:58,870 --> 09:28:02,110
which is a JavaScript based framework for running our tests, 
它是一个基于 JavaScript 的框架用于运行我们的测试

9490
09:28:02,110 --> 09:28:06,130
you actually can write tests directly in solidity, if you'd like to, 
你甚至可以直接用 Solidity 来编写测试，如果你想的话

9491
09:28:06,130 --> 09:28:09,760
there's a bit of back and forth on whether testing with pure solidity is better or testing with a modern programming language. 
关于使用纯 Solidity 进行测试更好还是使用现代编程语言进行测试更好存在一些争议

9492
09:28:09,760 --> 09:28:13,900
The argument goes that testing with a modern programming language,
支持现代编程语言进行测试的论点是

9493
09:28:13,900 --> 09:28:16,630
you have more flexibility to do more stuff to interact and test your smart contracts. 
你会拥有更大的灵活性来对你的智能合约进行更多的交互和测试

9494
09:28:16,630 --> 09:28:19,720
But the argument for testing with us with solidity is that 
但支持使用 Solidity 进行测试的论点认为

9495
09:28:19,720 --> 09:28:22,630
we want to be as close to the code as possible. 
我们希望尽可能接近这个代码(即测试用的代码和编写智能合约用的代码相同)

9496
09:28:22,660 --> 09:28:27,010
At the time of recording, 
在录制的这个时间点

9497
09:28:27,010 --> 09:28:29,230
most projects do the vast majority of their testing in a modern programming language like JavaScript. 
大多数项目都在使用现代编程语言进行测试例如 JavaScript

9498
09:28:29,230 --> 09:28:32,200
So that's what we're going to be using here. 
所以我们这里就用这个

9499
09:28:32,200 --> 09:28:35,980
So to get started with our mocha tests, 
要想开始我们的 Mocha 测试

9500
09:28:35,980 --> 09:28:39,610
we do, we're going to write a describe function. 
我们要写一个 "describe" 函数

9501
09:28:39,640 --> 09:28:42,520
Describe is a keyword that hardheaded mocha will recognize, 
"describe" 是一个关键字，Hardhat 的 Mocha 将会识别它

9502
09:28:42,520 --> 09:28:45,610
and it takes two parameters, it takes a string, 
并且它有两个参数，第一个接收的是一个字符串

9503
09:28:45,610 --> 09:28:50,050
which we're going to just write simple storage for now. 
我们要写进去的就是 "SimpleStorage"

9504
09:28:50,050 --> 09:28:54,550
And then also takes a function, 
第二个接收的是一个函数

9505
09:28:54,550 --> 09:28:58,180
we could make function, test func and then write some stuff in here, 
我们可以创建一个函数，名为 "testFunct"，并在这里编写一些内容

9506
09:28:58,180 --> 09:29:02,500
and then pass it to our describe here. 
然后把它传递到 "describe" 这里

9507
09:29:03,400 --> 09:29:09,670
But the common convention is going to be to do is to make it as an anonymous function,
但通用的约定是让它成为一个匿名函数

9508
09:29:09,670 --> 09:29:13,930
which we can create by typing function, putting an empty parameter here, 
我们可以输入 "function"，放置一个空参数

9509
09:29:14,110 --> 09:29:17,740
and then some brackets like that. 
然后加上花括号来创建它

9510
09:29:18,250 --> 09:29:22,510
So our describe function takes a name, a string, and a function.
所以我们的 "describe" 接收一个名称字符串和一个函数

9511
09:29:22,510 --> 09:29:25,390
Another way that you'll often see functions in describe is using that anonymous function syntax. 
你经常可以在 "describe" 中见到另一种匿名函数的使用方式

9512
09:29:25,390 --> 09:29:29,560
So you might see just these parentheses, an arrow, and then some brackets, 
你可能会看到一组括号，一个箭头，然后是一些花括号

9513
09:29:29,890 --> 09:29:32,740
the two of these are going to be basically the same, 
这两种方式基本上是等价的

9514
09:29:32,740 --> 09:29:37,000
there are some differences. And this second one is actually best practice, 
区别就是，第二个在实际使用中是最好用的

9515
09:29:37,000 --> 09:29:41,440
but just know that you might see this arrow syntax in other tests as well. 
但你也要知道你可能会在其它测试中见到这种箭头语法

9516
09:29:41,440 --> 09:29:44,350
We have described a sample storage and then our function here, 
这里我们已经拥有了 "describe"，一个 "SimpleStorage" 和一个函数

9517
09:29:44,350 --> 09:29:47,830
which is going to have all of our tests in it.
这就是我们的测试所需要包含的全部内容了

9518
09:29:47,830 --> 09:29:51,280
Inside each one of our describe blocks. 
在每一个 "describe" 的代码块内

9519
09:29:51,280 --> 09:29:54,010
We're gonna have something called a before each, and a bunch of It's 
我们都会有一个 "beforeEach" 和很多 "it"

9520
09:29:54,010 --> 09:29:56,680
Our before each function is going to tell us what to do before each of our hits. 
"beforeEach" 函数会告诉我们在我们的每一个 "it" 之前要做什么

9521
09:29:56,920 --> 09:29:59,530
So we're going to have a ton of it and then we're going to have a before each. 
所以我们会有很多 "it" 而只有一个 "beforeEach"

9522
09:29:59,530 --> 09:30:03,340
All of our IDs are going to be where we actually write the code for running our tests. 
所有的 "it" 就是我们实际编写运行测试代码的地方

9523
09:30:03,340 --> 09:30:07,030
And before each is going to be some code that tells us what to do before each one of these hits,
而 "beforeEach" 则会告诉我们每个 "it" 之前需要做些什么

9524
09:30:07,060 --> 09:30:09,730
we can also actually have describes,
我们实际上还可以这么做 "describe"

9525
09:30:09,730 --> 09:30:13,030
inside of describes, which again have more before each and more before it's 
在这个 "describe" 内，又可以有更多的 "beforeEach" 和 "it"

9526
09:30:13,030 --> 09:30:15,940
having these nested describes can be really helpful for separating and modularizing our tests. 
这些嵌套的 "describe" 能很好的帮助我们分离和模块化我们的测试

9527
09:30:15,940 --> 09:30:19,270
But for this one, we're just going to have a setup that looks like this. 
但对本次测试，我们将只需要一个这样的配置

9528
09:30:19,540 --> 09:30:23,710



9529
09:30:25,540 --> 09:30:29,470
And for this demo, we're only going to have one it. 
并且在这个 demo 中我们也只有一个 "it"

9530
09:30:29,470 --> 09:30:33,550
So in order to test our smart contracts, 
为了测试我们的智能合约

9531
09:30:33,550 --> 09:30:37,780
before we actually run our tests, we're probably going to need to deploy the smart contracts first. 
在实际运行测试之前，我们可能需要先部署智能合约

9532
09:30:37,780 --> 09:30:41,080
So inside of our before each, 
因此在我们的 "beforeEach" 中

9533
09:30:41,080 --> 09:30:45,010
we're going to pass the our before each a function, 
我们将传递一个函数给我们的 "beforeEach"

9534
09:30:45,010 --> 09:30:47,710
that's going to tell our testing framework what to do before each test. 
它会告诉我们的测试框架每个测试前都要做些什么

9535
09:30:47,710 --> 09:30:50,620
So we're going to pass it an async function like this. 
所以我们要传入一个 "async function"，就像这样

9536
09:30:50,620 --> 09:30:53,470
And in here, we want to deploy our simple storage contract. 
然后在这里，我们要部署我们的 "SimpleStorage" 合约

9537
09:30:53,470 --> 09:30:56,950
So to do that, we're going to need to get the ethers framework 
为了做到这一点，我们需要获取 ethers 框架

9538
09:30:56,950 --> 09:31:00,070
and do exactly what we did in our deploy script. 
并执行我们在 "deploy" 脚本中所做的完全相同的事情

9539
09:31:00,100 --> 09:31:05,080
So in here, we're at the top we're gonna say const. 
所以这里，我们要在顶部执行 "const"

9540
09:31:05,080 --> 09:31:08,410
Ethers, equals require art have 
"{ethers} = require("hardhat")"

9541
09:31:08,410 --> 09:31:12,520
an import ethers from hard hat.
并把 ethers 从 Hardhat 中导入进来

9542
09:31:12,520 --> 09:31:15,670
Then in our before each function, 
接着在我们的 "beforeEach" 函数中

9543
09:31:16,180 --> 09:31:23,590
we'll say await ethers dot get contract factory of simple storage. 
我们将执行 "await ethers.getContractFactory("SimpleStorage")"

9544
09:31:23,830 --> 09:31:29,800
And we'll assign this to a const. Simple Storage factory. 
并将其赋给一个 "const" 变量 "simpleStorageFactory"

9545
09:31:29,800 --> 09:31:37,510
And then we'll run away, simple storage factory dot deploy. 
然后我们要运行 "await simpleStorageFactory.deploy"

9546
09:31:37,510 --> 09:31:46,240
Cool. 
OK，酷~

9547
09:31:46,960 --> 09:31:52,780
And let's also assign this to a variable cost simple. 
让我们把它也赋给一个变量 "const simpleStorage"

9548
09:31:52,810 --> 09:31:58,450
Now, since right now, our simple storage and simple storage factory are scoped just to inside the before each, 
现在，由于我们的 "simpleStorage" 和 "simpleStorageFactory" 只在 "beforeEach" 内部可见

9549
09:31:58,480 --> 09:32:02,470
we actually need to stick these variables outside of the before each, 
我们需要把这些变量从 "beforeEach" 中移出来

9550
09:32:02,470 --> 09:32:05,860
so all of our events can interact with them. 
这样所有事件都可以与它们进行交互

9551
09:32:05,860 --> 09:32:09,940
So instead of having simple storage, factory, and simple storage, be constant variables, 
所以我们不再将 "simpleStorageFactory" 和 "simpleStorage" 定义为常量变量

9552
09:32:09,970 --> 09:32:12,940
we're going to define them outside of them for each with the let keyword.
而是使用 "let" 关键字将它们定义在 "beforeEach" 之外

9553
09:32:12,940 --> 09:32:16,660
And we're gonna say let simple storage factory 
我们要做的就是 "let simpleStorageFactory"

9554
09:32:16,660 --> 09:32:20,140
and we're going to initialize it to nothing. 
并将其初始化为空

9555
09:32:20,350 --> 09:32:25,540
And then we'll say led simple storage. 
接着是 "let simpleStorage"

9556
09:32:25,540 --> 09:32:29,860
Now, if you have a whole bunch of let's just initializing 
现在，如果你有很多 "let" 要初始化的话 

9557
09:32:29,920 --> 09:32:32,980
another way, you can write them in JavaScript,
那么你可以用 JavaScript 的另一种方式来编写它们

9558
09:32:32,980 --> 09:32:35,380
just let simple storage factory comma, simple storage. 
只要写成 "let simpleStorageFactory, simpleStorage"

9559
09:32:35,410 --> 09:32:41,080
And that works exactly the same. 
这样做的效果是完全一样的

9560
09:32:41,080 --> 09:32:43,420
And then we can get rid of this const keyword. 
然后我们就可以把 "const" 关键字去掉了

9561
09:32:43,420 --> 09:32:47,770
Because it's not a constant since we are assigning it. 
因为它不再是一个常量了，我们给它赋了值

9562
09:32:47,770 --> 09:32:50,050
And now we have simple storage, factory and simple storage 
现在我们有了 "simpleStorageFactory" 和 "simpleStorage"

9563
09:32:50,050 --> 09:32:53,200
that we can use inside of our init function. 
就可以把它们用在我们的 "it" 函数中了

9564
09:32:53,200 --> 09:32:56,140
Now we have a before each section. 
现在我们有一个 "beforeEach" 部分

9565
09:32:56,200 --> 09:32:58,630
So before each one of our tests, we're going to deploy our simple storage contract. 
因此在我们的每个测试之前，我们都会部署一次 "SimpleStorage" 合约

9566
09:32:58,630 --> 09:33:02,200
So we have a brand new contract to interact with for each one of our tests.
这样我们每次测试都有一个全新的合约可供交互

9567
09:33:02,260 --> 09:33:05,920
Now, inside of the ID, this is where we're going to say what we want this specific test to do, 
现在在 "it" 内部，我们要说出想做的测试具体要做什么

9568
09:33:05,920 --> 09:33:09,310
and then describe the code that's going to actually do that. 
然后描述出实际执行此操作的代码

9569
09:33:09,550 --> 09:33:13,480
So we're going to say it
所以我们要输入 "it()"

9570
09:33:13,870 --> 09:33:20,980
should start with a favorite number of zero. 
"should start with a favorite number of 0"

9571
09:33:20,980 --> 09:33:24,190
So this is saying what this test should do. 
所以这里就是在说这个测试该做什么

9572
09:33:24,220 --> 09:33:27,910
And then we're going to add our async function to actually do that. 
然后我们要添加一个异步函数来实际执行这个操作

9573
09:33:28,720 --> 09:33:34,060
So we'll say async function. 
所以我们输入 "async function"

9574
09:33:34,060 --> 09:33:38,020
And in here, this is where we'll actually write the code to make sure that our contract does exactly this.
接着在这里，我们将编写代码来确保我们的合约会按照我们所期望的方式运行

9575
09:33:38,080 --> 09:33:45,640
We're say const. Current Value, equals await, simple storage.re retrieve. 
我们要写 "const currentValue = await simpleStorage.retrieve"

9576
09:33:46,840 --> 09:33:50,440
And now in this test, we want to say okay, 
现在在这个测试里，我们想要做的就是

9577
09:33:50,440 --> 09:33:54,100
now check to see that this current value is indeed zero. So how do we do that? 
检查 "currentValue" 是否确实为 0，该怎么做呢？

9578
09:33:54,100 --> 09:33:59,200
Well, we can say const, expected value is going to equal zero. 
可以这么做 "const expectedValue = "0""

9579
09:33:59,830 --> 09:34:04,360
And what we can do is we can do either we can use either the assert keyword, or the expect keyword, 
我们可以使用的是 "assert" 或者 "expect" 关键字

9580
09:34:04,360 --> 09:34:08,170
which we're going to import both of these from a package called Chai. 
它们都可以从一个名为 "chai" 的包中导入进来

9581
09:34:08,170 --> 09:34:12,970
We actually installed Chai automatically 
我们其实已经自动安装了 "chai" 包

9582
09:34:12,970 --> 09:34:16,420
when we downloaded the basic parameters when we downloaded the basic packages for hardhats. 
就是在我们下载 Hardhat 等基础包的时候

9583
09:34:16,420 --> 09:34:19,120
So at the top, we're gonna say const. Expect and assert equals require Chai, 
所以在顶部，我们要输入 "const {expect, assert} = require("chai")"

9584
09:34:19,120 --> 09:34:23,050
I'm a big fan of using assert as much as possible, 
我非常喜欢尽可能多地使用 "assert"

9585
09:34:23,260 --> 09:34:24,310
because I think the syntax makes a little bit more sense. 
因为我认为它的语法更加合理

9586
09:34:25,630 --> 09:34:30,760
But there will be scenarios where we need to use expect instead. 
但某些情况下我们也需要使用 "expect"

9587
09:34:30,760 --> 09:34:33,160
Now, assert has a ton of functions that are built in 
"assert" 内置了很多函数

9588
09:34:33,190 --> 09:34:36,010
that help us make sure this is what we expect it to be. 
它们可以帮助我们确保一切如我们所期望的那样运行

9589
09:34:36,010 --> 09:34:39,130
So I can do assert dot equal current value.to string, 
所以我们可以执行 "assert.equal(currentValue.toString())"

9590
09:34:39,130 --> 09:34:43,030
because remember, this is actually going to be a big number, 
因为要记得，这里实际上是一个大数

9591
09:34:43,060 --> 09:34:48,040
comma, expected value. 
", expectedValue"

9592
09:34:48,040 --> 09:34:51,130
So I'm saying I'm asserting this retrieve to return zero, 
所以我在断言("asserting")这个 "retrieve" 的返回值是 0

9593
09:34:51,370 --> 09:34:55,480
which is going to be our expected value. 
也就是我们的 "expectedValue"

9594
09:34:55,480 --> 09:34:59,440
Now to actually run this, 
现在要实际运行这个测试

9595
09:34:59,440 --> 09:35:04,570
we're going to run yarn, art hat test. 
我们需要执行 "yarn hardhat test"

9596
09:35:04,570 --> 09:35:07,840
And we see we get an output that looks like this 
我们可以看到输出的结果如下

9597
09:35:07,840 --> 09:35:10,870
should start with favorite number of zero, and it's indeed passing. 
"favorite number" 应从 0 开始（即刚才在 it() 中输入的那句话），并且它通过了测试

9598
09:35:10,870 --> 09:35:14,620
You'll notice that if I were to change this to one, 
你会发现，如果我把这里改成 "1"

9599
09:35:14,620 --> 09:35:18,220
and this wasn't correct, it would break 
它是不正确的，会报错

9600
09:35:18,220 --> 09:35:23,890
and it would say art Pass or not passing 
并且它会显示我们的测试没有通过

9601
09:35:23,920 --> 09:35:29,260
assertion error expected zero to equal one. 
断言错误：预期 0 等于 1("AssertionError：expected '0' to equal '1'")

9602
09:35:29,260 --> 09:35:33,430
It expected zero to equal one, which is not what we want. 
它期望 0 等于 1，这不是我们想要的

9603
09:35:33,430 --> 09:35:36,640
We want zero to equal zero. So let's run this again. 
我们想要的是 0 等于 0，让我们再运行一次

9604
09:35:36,640 --> 09:35:40,030
Tada should start with favorite number zero, and it's passing. 
看吧，"favorite number" 应从 0 开始，并且已经通过了

9605
09:35:40,060 --> 09:35:43,060
Alright, fantastic. So that's how we wrote one of our tests, 
非常好，这就是我们要编写的测试之一

9606
09:35:43,060 --> 09:35:48,490
let's write one more test just to make sure that things are good. 
让我们再写一个测试以确保一切安好

9607
09:35:48,490 --> 09:35:51,850
So let's say it should update when we call store, 
这次我们说 "Should update when we call store"

9608
09:35:51,850 --> 09:35:56,560
because when we call the store function, we want our favorite number to update. 
因为当我们调用 "store" 函数时，我们希望 "favorite number" 会更新

9609
09:35:56,770 --> 09:36:01,360
And we'll make this an async function as well. And let's add our stuff in here. 
让我们把这个函数也设置为异步函数，并在这里添加我们的代码

9610
09:36:01,360 --> 09:36:04,990
So we'll say const. Expected Value equals seven, 
现在我们可以说 "const expectedValue = "7""

9611
09:36:05,020 --> 09:36:11,620
we're expecting that when we call store it updates to seven. 
我们期望在调用 "store" 函数时它会更新为 7

9612
09:36:11,620 --> 09:36:16,840
Now we can say const. Transaction response equals await simple storage dot store. 
现在我们输入 "const transactionResponse = await simpleStorage.store"

9613
09:36:16,840 --> 09:36:21,670
And we can even just pass it the expected value here. 
我们甚至可以直接把 "expectedValue" 传给这里

9614
09:36:21,670 --> 09:36:25,240
And then we'll do a weight transaction response that weight one. 
然后我们执行 "await transactionResponse.wait(1)"

9615
09:36:25,240 --> 09:36:31,030
Now let's get the current value. 
现在让我们获取当前值

9616
09:36:32,080 --> 09:36:37,750
So we'll say const. Current Value equals weight, simple storage, retrieve. 
"const currentValue = await simpleStorage.retrieve"

9617
09:36:37,750 --> 09:36:44,140
And now we're going to assert dot equal current value.to string, comma expected value. 
现在我们执行 "assert.equal(currentValue.toString, expectedValue)"

9618
09:36:44,140 --> 09:36:47,440
And now we can run all these tests by running yarn Hardhead test. 
现在我们可以通过运行 "yarn hardhat test" 来运行所有这些测试

9619
09:36:47,440 --> 09:36:51,700
And you'll see we ran both of these tests. 
你会看到我们运行了这两个测试

9620
09:36:51,700 --> 09:36:55,000
And now if I have 10,000 tests, and I'm only finagling with one test, 
现在如果我有 10000 个测试，但我只想运行其中的一个

9621
09:36:55,000 --> 09:37:01,570
I can actually just run one test by running yarn, art app, test, dash dash grep. 
我可以这样做 "yarn hardhat test --grep"

9622
09:37:01,600 --> 09:37:06,160
And I can search for any keywords in any of the text here. 
我可以搜索这里的任何文本中的任何关键词

9623
09:37:06,160 --> 09:37:10,660
So I'm going to grep for the store function. 
我将在这里搜索 "store" 函数

9624
09:37:10,660 --> 09:37:14,740
Because the store keyword isn't in this tax for this, it, it's only in the text for this it. 
因为 "store" 关键词不在这个文本里出现，它只在这个文本里出现

9625
09:37:14,740 --> 09:37:18,550
So if I do grep store, it should only run our second test, 
因此如果我运行 "grep store"，它应该只会运行我们的第二个测试

9626
09:37:18,550 --> 09:37:22,840
which does indeed, 
它确实做到了

9627
09:37:22,840 --> 09:37:28,030
one other way we can run only specific tests is with the only keyword. 
另一种只运行特定测试的方法是使用 "only" 关键字

9628
09:37:28,030 --> 09:37:33,430
So we can type it dot only like that. And then we can run yarn, art hat test. 
我们可以输入 "it.only" 就像这样，然后运行 "yarn hardhat test"

9629
09:37:33,490 --> 09:37:36,820
And it should only run, this should update when we call store. 
它应该只会运行这个 "Should update when we call store"

9630
09:37:36,820 --> 09:37:40,750
And it does indeed, 
确实如此

9631
09:37:40,750 --> 09:37:45,250
then we'll go ahead and delete this save, run again, and it should run all too. Fantastic. 
我们删除这个，保存，再次运行，它应该会再次运行所有测试，太棒了

9632
09:37:45,250 --> 09:37:49,210
Now the other way you'll see these tests written is with instead of assert, it'll use the expect keyword. 
你可能会见到另一种编写测试的方式，使用的不是 "assert" 而是 "expect" 关键字

9633
09:37:49,210 --> 09:37:52,600
So you'll see something like expect current value.to string.to dot equal expected value, 
你会见到这样的语句 "expect(currentValue.toString()).to.equal(expectedValue)"

9634
09:37:52,600 --> 09:37:59,260
the two of these lines do exactly the same thing. 
这两行代码做的是完全相同的事情

9635
09:37:59,290 --> 09:38:03,520
And it's sort of up to you on which one you want to use. 
你可以根据自己的偏好来选择使用哪一种

9636
09:38:03,520 --> 09:38:06,160
And that's all we're going to do for our testing. Now. 
这就是我们现在所要做的所有测试了

9637
09:38:06,160 --> 09:38:12,280
This is fantastic, great job. 
太棒了，干得不错