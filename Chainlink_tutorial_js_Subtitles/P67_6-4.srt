8644
08:33:05,830 --> 08:33:11,710
So now that we have some of the basics of hard head down, 
现在我们已经掌握了 Hardhat 的一些基础知识

8645
08:33:11,710 --> 08:33:14,320
let's go ahead and try doing some of the same things we did with ethers before but with hard hat. 
让我们继续使用 Hardhat 来做一些之前用 ethers 做过的相同的事

8646
08:33:14,320 --> 08:33:16,960
So one of the first things we want to do is 
我们首先要做的一件事就是

8647
08:33:16,990 --> 08:33:20,170
we want to write and interact with our smart contracts. 
编写我们的智能合约并与之交互

8648
08:33:20,170 --> 08:33:23,170
So let's go ahead and rename greeter dot soul to simple storage dot soul, 
所以让我们把 "Greeter.sol" 重命名为 "SimpleStorage.sol"

8649
08:33:23,170 --> 08:33:28,240
you can click on the file and hit enter
你可以选中文件并按下回车

8650
08:33:28,600 --> 08:33:33,100
and should be able to rename it. 
然后你就能重命名它了(译者注：在 Windows 和 Linux 系统中通常是按 F2)

8651
08:33:33,160 --> 08:33:35,980
Otherwise, you can go ahead and right click, delete it, 
不然，你也可以右键选中，选择删除

8652
08:33:35,980 --> 08:33:39,790
and then create a new file and call it simple storage dot soul. 
然后创建一个新文件命名为 "SimpleStorage.sol"

8653
08:33:39,790 --> 08:33:43,390
We're going to copy paste 
我们要复制粘贴

8654
08:33:43,390 --> 08:33:46,930
all of our code from our previous simple storage that saw into this file,
之前的 "SimpleStorage.sol" 里的所有代码到这个文件中

8655
08:33:47,320 --> 08:33:50,140
we can make sure that our simple storage is compiling correctly
我们要确保 "SimpleStorage" 正确编译

8656
08:33:50,170 --> 08:33:55,600
by running yarn hardhat compile. 
使用 "yarn hardhat compile"

8657
08:33:55,600 --> 08:33:59,230
Whoa, it looks like we ran into an issue 
哇，看来我们遇到了问题

8658
08:33:59,230 --> 08:34:01,750
project cannot be compiled. See reasons below 
项目无法被编译，看看下面的原因

8659
08:34:01,750 --> 08:34:05,530
the solidity pragma version of the file. It doesn't match any of the configured compilers in your config. 
文件中的 Solidity pragma 版本无法匹配您配置中的任何编译器

8660
08:34:05,530 --> 08:34:09,310
Hmm, well, what's going on 
好吧，到底是什么问题

8661
08:34:09,310 --> 08:34:13,480
contracts slash symbol storage that's Sol zero point 8.8. 
"contracts/SimpleStorage.sol(0.8.8)"

8662
08:34:13,570 --> 08:34:17,020
Ah, okay, let's go ahead and fix them. 
行吧，让我们解决一下这个问题

8663
08:34:17,020 --> 08:34:21,220
So we can open up our hard hat dot config dot j s. 
打开我们的 "hardhat.config.js"

8664
08:34:21,220 --> 08:34:24,550
Now a quick note on opening files. If you're on Mac and you hit Command P, 
现在要说一个打开文件的快速说明，如果你在 Mac 上按下 "Command P" 

8665
08:34:24,550 --> 08:34:28,840
you can actually start typing in the names of files to get them to them quicker. 
那么你可以输入文件的名字以快速打开它们

8666
08:34:29,200 --> 08:34:32,080
Or if you're on Linux or Windows, you can type Ctrl p, 
或者如果你用的是 Linux 或 Windows，那么按下的是 "Ctrl P"

8667
08:34:32,080 --> 08:34:36,160
this will bring up and interestingly if you type man P or ctrl p and then you hit the greater than key. 
有意思的是，如果你按下 "Command P" 或 "Ctrl P" 并输入“大于键”(">")

8668
08:34:36,160 --> 08:34:39,430
This will drop you into the command palette, 
它就会把你带到命令面板

8669
08:34:39,430 --> 08:34:43,360
know command palette, command palette, 
不是命令面板，是命令面板

8670
08:34:43,360 --> 08:34:46,420
search for files, search for commands 
查找文件，查找命令

8671
08:34:46,420 --> 08:34:52,090
in our Hardhead dot config. Jas, I'm gonna scroll down to module dot exports and change this to zero point 8.8. 
在我们的 "hardhat.config.js" 里，向下滚动到 "module.exports" 并把这里改成 "0.8.8"

8672
08:34:52,090 --> 08:34:54,670
So that the version that we're going to compile 
这样我们用于编译的版本

8673
08:34:54,670 --> 08:34:58,030
for simple storage, it's gonna be the same version and that hard hat is looking for. 
就和 "SimpleStorage" 要在 Hardhat 中寻找的版本相同了

8674
08:34:58,030 --> 08:35:00,670
Let's run that same command by just hitting up yarn Hardhead compile, 
让我们再次运行相同的命令 "yarn hardhat compile"

8675
08:35:00,670 --> 08:35:03,910
and awesome we see compiled one solidity file successfully. 
很好，我们看到“成功编译 1 个 Solidity 文件”

8676
08:35:03,910 --> 08:35:07,300
We should now see this in artifacts. 
现在我们应该就能在 "artifacts" 中看到它了

8677
08:35:07,300 --> 08:35:10,660
If we go to artifacts and contracts. 
如果我们进入 "artifacts" 以及 "contracts"

8678
08:35:10,990 --> 08:35:13,630
We now see two contracts in here, greater and simple storage 
可以看到这里现在有两个合约了 "Greeter" 和 "SimpleStorage"

8679
08:35:13,630 --> 08:35:16,960
and we can see a ton of the information about simple storage 
我们可以看到有关 "SimpleStorage" 的大量信息

8680
08:35:16,960 --> 08:35:19,690
we can also see some more lower level in Information and build info. 
还可以在 "build-info" 中看到一些更底层的信息

8681
08:35:19,690 --> 08:35:22,330
Alright, so now that we have our simple storage contract in here, 
好了，现在我们这里就已经有了 "SimpleStorage" 合约

8682
08:35:22,330 --> 08:35:24,790
the next thing we probably want to do is learn how to deploy it. 
下一件事就是要学习如何部署它了

8683
08:35:24,790 --> 08:35:28,150
This is where we're going to write our deploy script. 
这里就是我们编写部署脚本的地方

8684
08:35:28,150 --> 08:35:30,730
Now, for this section, I'm going to be showing you how to write a deploy script. 
现在这一节，我会向你展示如何编写部署脚本

8685
08:35:30,730 --> 08:35:33,100
But in the next section, we're going to do it a little bit differently.
但下一节，我们会采用一些不同的方案

8686
08:35:33,100 --> 08:35:35,650
But this is still going to teach you how to write scripts and worked with scripts in heart app. 
不过这仍然能教会你如何在 Hardhat 中编写和使用脚本

8687
08:35:35,650 --> 08:35:38,380
So we're going to come to our sample script dot j s, 
所以来到我们的 "sample-script.js"

8688
08:35:38,380 --> 08:35:41,050
and we're gonna go ahead and hit enter and renamed it to deploy dot j s. 
然后按回车把它重命名为 "deploy.js"

8689
08:35:41,050 --> 08:35:46,030
And if you want to read all the comments in here, you absolutely can, 
如果你想阅读这里的所有注释的话，当然也可以

8690
08:35:46,030 --> 08:35:48,910
we're just gonna go ahead and delete them all. 
但我们这里就把它们都直接删掉了

8691
08:35:48,910 --> 08:35:52,300
A quick keyboard shortcut is if you hit Command A or Ctrl, a, 
有一个快捷键，如果你按下 "Command A" 或者 "Ctrl A"

8692
08:35:52,300 --> 08:35:56,890
you'll highlight all the text in your file, 
就可以选中文件内的全部文本

8693
08:35:56,890 --> 08:36:00,070
and we're going to go ahead and delete it all. 
然后我们把它们全部删除

8694
08:36:00,070 --> 08:36:02,320
So now we're just going to start from scratch here. 
现在我们要从头开始

8695
08:36:02,320 --> 08:36:04,720
Now the setup for our deploy script in here is going to look really similar to the setup of our deploy script. From our previous section, 
现在我们要配置的部署脚本和我们上一节配置的部署脚本很相似

8696
08:36:04,720 --> 08:36:07,810
we're going to do imports at the top, 
我们要在顶部进行导入

8697
08:36:07,810 --> 08:36:10,600
we're going to have our async main function, 
这里有一个异步的 main 函数

8698
08:36:10,600 --> 08:36:13,600
and then we're going to call the main function.
最后是调用这个 main 函数

8699
08:36:13,930 --> 08:36:16,840
So let's go ahead and define our main function, 
让我们继续，来定义我们的 main 函数

8700
08:36:16,870 --> 08:36:20,680
we'll call it async. function main, like that, 
输入 "async function main()" 就像这样

8701
08:36:20,680 --> 08:36:23,170
and then we'll call our main function. 
然后我们要调用我们的 main 函数

8702
08:36:23,170 --> 08:36:27,430
And if you want to just copy paste this from the last section, you absolutely can. 
如果你想的话，复制粘贴我们上一节的内容也是可以的

8703
08:36:42,190 --> 08:36:45,160
So we'll domain that then. Boom, 
我们输入 "main().then()" 

8704
08:36:45,160 --> 08:36:48,040
just like that. 
就像这样

8705
08:36:48,040 --> 08:36:52,090
And because of these semicolons are going to drive me absolutely insane. 
这堆分号会让我彻底疯掉

8706
08:36:52,150 --> 08:37:01,660
We're also going to add prettier, and our solidity prettier plugins. 
因此我们要添加 "prettier" 和 "solidity prettier" 插件

8707
08:37:02,680 --> 08:37:09,730
So we'll do yarn, add dash dash Dev, prettier and prettier, plug in solidity. 
所以我们要 "yarn add --dev prettier" 以及 "prettier-plugin-solidity"

8708
08:37:09,730 --> 08:37:18,850
Then we can go ahead and create our dot prettier, rc file, 
接着创建我们的 ".prettierrc" 文件

8709
08:37:19,210 --> 08:37:24,310
we're going to add tab with four, use tabs, false, 
我们要添加 "tabWidth: 4" 还有 "useTabs: false" 

8710
08:37:24,310 --> 08:37:28,360
semi false, and then single quote, also false. 
"semi: false" 最后是 "singleQuote: false"

8711
08:37:28,360 --> 08:37:30,310
Now we're going to be using this prettier rc file setup a lot. 
现在我们用这个 prettierrc 文件设置了很多东西

8712
08:37:30,310 --> 08:37:33,400
So in future sections, if you want to just copy paste it, you can absolutely do that as well. 
在之后的章节中，你可以直接从这复制粘贴

8713
08:37:33,400 --> 08:37:37,450
We're also going to add a dot prettier, ignore, 
我们还要添加一个 ".prettierignore"

8714
08:37:37,450 --> 08:37:40,300
which tells prettier not to format some files, which we want, 
它告诉 prettier 不要格式化哪些文件，只要我们想的话

8715
08:37:40,300 --> 08:37:42,940
we don't want prettier to spend a ton of time formatting all of our files, 
我们不想让 prettier 花费过多的时间去格式化所有的文件

8716
08:37:42,940 --> 08:37:46,120
I'm just going to copy paste from the GitHub repo. 
我直接从 GitHub 仓库中复制粘贴了这些过来

8717
08:37:46,120 --> 08:37:48,970
So feel free to copy paste from the GitHub repo as well, 
你也可以这样，从 GitHub 仓库中直接复制粘贴过来

8718
08:37:49,000 --> 08:37:51,850
you'd find all the code for this section, like I said, in the GitHub repo associated with this course.
你可以在课程关联的 GitHub 仓库中找到本章节的全部代码

8719
08:37:51,940 --> 08:37:54,520
Now, unlike in our last section, 
现在，与上一节不同的地方是

8720
08:37:54,520 --> 08:37:58,240
where we had to grab our contract code a little bit more manually, 
我们不再需要手动获取我们的代码

8721
08:37:58,240 --> 08:38:00,850
with hard hat, it's actually a number of different ways to grab compiled contracts.
Hardhat 有多种不同的方法可以获取已编译的合约

8722
08:38:00,880 --> 08:38:02,860
The first way we're going to do it, we're actually going to use ethers. 
第一件要做的事，是使用 ethers

8723
08:38:03,310 --> 08:38:06,040
And now this is where one of the first confusing changes actually comes in. 
那么第一个容易让人感到困惑的变化来了

8724
08:38:06,040 --> 08:38:11,530
Previously, we did const ethers equals require ethers. 
之前我们的做法是 "const {ethers} = require("ethers")"

8725
08:38:11,770 --> 08:38:16,540
And that was how we went ahead and worked with ethers. 
这就是我们使用 ethers 的方法

8726
08:38:16,540 --> 08:38:20,890
However, you'll notice in our dev dependencies,
然而，你会注意到在我们的 "devDependencies" 中

8727
08:38:21,280 --> 08:38:24,820
we have this dependency called Hard Hat ethers. 
有一个依赖项是 "hardhat-ethers"

8728
08:38:24,820 --> 08:38:28,480
Hard Hat ethers is a package that actually wraps hard hat with its own built in ethers. 
"Hardhat-ethers" 是一个将 ethers 内置进了 Hardhat 的一个封装包

8729
08:38:28,510 --> 08:38:31,030
This is really advantageous 
这种做法很有优势

8730
08:38:31,030 --> 08:38:33,760
because it allows hard hat to keep track of different deployments at different scripts and all these other things for us. 
因为它允许 Hardhat 在不同脚本和其它情况下追踪不同的部署

8731
08:38:33,760 --> 08:38:36,610
So instead of importing ethers directly from ethers, 
所以不要直接从 ethers 中导入 ethers

8732
08:38:36,610 --> 08:38:39,730
we're actually going to import ethers directly from hard hat instead. 
而是要从 "hardhat" 中导入 ethers

8733
08:38:39,730 --> 08:38:43,750
This might seem a little confusing at first, 
可能一开始会让人感到有些疑惑

8734
08:38:43,750 --> 08:38:46,570
but just know if we want to work with ethers and heart it, 
但现在只用知道，如果我们要同时使用 ethers 和 Hardhat

8735
08:38:46,570 --> 08:38:49,210
it's usually much better to pull it in from heart and 
那么通常从 Hardhat 中导入会是更好的选择

8736
08:38:49,210 --> 08:38:52,690
you can still do this and ethers will still work the same. 
你仍然可以这样做，ethers 同样可以正常工作

8737
08:38:52,690 --> 08:38:56,140
But hard hat won't necessarily know about different contract factories in different pieces
但 Hardhat 就无法知道不同的代码中有不同的合约工厂了

8738
08:38:56,170 --> 08:38:58,570
and, and you'll see that in action in a second. 
你很快就会看到这种情况

8739
08:38:58,570 --> 08:39:00,850
Now that we're pulling in ethers, 
现在我们已经导入了 ethers

8740
08:39:00,850 --> 08:39:04,360
we can actually immediately grab a contract factory using ethers. 
我们可以立即使用 ethers 获取一个合约工厂

8741
08:39:04,360 --> 08:39:10,480
We can say const simple storage factory 
我们写下 "const SimpleStorageFactory "

8742
08:39:10,480 --> 08:39:22,240
equals await ethers dot get contract. Factory simple storage. 
"= await ethers.getContractFactory('SimpleStorage')"

8743
08:39:22,780 --> 08:39:26,500
So in order to get a simple storage, contract factory, 
所以为了获取一个 "SimpleStorage" 合约工厂

8744
08:39:26,500 --> 08:39:29,800
we can just do await ethers dot get contract factory.
我们就可以这样做 "await ethers.getContractFactory"

8745
08:39:29,950 --> 08:39:33,250
Now if we pulled right from ethers, 
现在如果我们直接从 ethers 中导入

8746
08:39:33,280 --> 08:39:35,740
the package ethers doesn't know about this contracts folder 
ethers 包并不知道有这个 "contracts" 文件夹

8747
08:39:35,740 --> 08:39:38,620
and ethers doesn't know we've already compiled simple storage dot soul. 
它也不知道我们已经把 "SimpleStorage.sol" 编译好了

8748
08:39:38,620 --> 08:39:42,400
And it's in our artifacts. 
就放在 "artifacts" 文件夹内

8749
08:39:42,490 --> 08:39:45,310
Hard Hat, on the other hand, does know about the contracts folder 
另一方面 Hardhat 却知道 "contracts" 文件夹的存在

8750
08:39:45,310 --> 08:39:48,760
and does know that it's already compiled, 
也知道它已经被编译好了

8751
08:39:48,760 --> 08:39:51,910
which is why this simple storage factory grabbing work so well. 
这就是为什么这个 "SimpleStorageFactory" 的获取工作能做得如此出色

8752
08:39:51,910 --> 08:39:54,730
Once we have our factory here, 
一旦我们拥有了这个工厂

8753
08:39:54,730 --> 08:39:59,320
we can do the same thing that we did in our previous section and deploy the contract. 
我们就可以重复上一节中做过的事并部署合约

8754
08:40:00,460 --> 08:40:06,130
So we'll do a quick console dot log. Deploy flooring, contract done, 
我们快速写一下 "console.log('Deploying contract...')"

8755
08:40:06,130 --> 08:40:16,240
and then we'll do Kant's simple storage equals await simple store edge factory dot deploy
接着是 "const simpleStorage = await SimpleStorageFactory.deploy()"

8756
08:40:17,320 --> 08:40:20,950
And boom, with that little bit of code, we're already able to deploy our simple storage contract, 
Boom 有了这些代码，我们就已经可以部署我们的 "SimpleStorage" 合约了

8757
08:40:20,950 --> 08:40:25,090
then to wait to make sure it gets deployed, 
然后需要等待以确保它部署成功

8758
08:40:25,090 --> 08:40:30,010
we can do await, simple storage, deployed. And that's it. 
我们可以输入 "await simpleStorage.deployed()" 就是这样

8759
08:40:30,640 --> 08:40:33,880
Now let's see what happens when we go ahead and run this deploy script. 
现在让我们看一下运行这个部署脚本时会发生什么

8760
08:40:33,880 --> 08:40:37,000
As you know, in our last section,
如你所知，在上一节中

8761
08:40:37,030 --> 08:40:40,030
we had to put in a private key, and we had to put an RPC URL.
我们需要输入一个私钥和一个 "RPC URL"

8762
08:40:40,420 --> 08:40:44,020
Right now, we don't have either one of those defined. 
但现在我们没有定义二者中的任何一个

8763
08:40:44,020 --> 08:40:46,660
So what do you think should the script actually work? 
那么你认为这个脚本能正常工作么？

8764
08:40:46,660 --> 08:40:49,930
Or do you think it'll break 
还是说你认为它会报错？

8765
08:40:49,930 --> 08:40:52,660
because we, we didn't define what blockchain we're going to deploy you. We also didn't find a private key.
因为我们没有定义要部署到哪个区块链上，也没有定义私钥

8766
08:40:52,960 --> 08:40:56,200
Well, let's go ahead and try this out. 
好吧，让我们来试试看吧

8767
08:40:56,230 --> 08:41:03,430
We can run the script in our terminal by running yarn, hard hat, run, scripts slash deploy dot j, s. 
我们在终端中运行这个脚本，用 "yarn hardhat run scripts/deploy.js"

8768
08:41:04,120 --> 08:41:07,510
And again, I'm hitting tab here to do a little auto completion 
这里我再一次使用了 tab 键进行了补全操作

8769
08:41:07,510 --> 08:41:11,410
and see what happens. 
让我们看看发生了什么

8770
08:41:11,410 --> 08:41:15,460
Well, we got deploying contract, it says done, but that's really it. 
好了，我们已经把合约部署好了，它说已经完成了，事实就是如此

8771
08:41:15,460 --> 08:41:18,160
So what really happened? Well, let's add one more line in here.
所以它到底是怎么做到的？让我们在这里再添加一行

8772
08:41:18,339 --> 08:41:23,079
Let's do console dot log. We'll do some string interpolation deployed, contract to. 
内容是 "console.log()"，再插入一些字符串 "Deployed contract to"

8773
08:41:24,399 --> 08:41:31,569
And then we'll add simple storage. That address. 
并且添加 "simpleStorage.address"

8774
08:41:31,569 --> 08:41:36,219
Let's run this now. We get deployed contract, 
现在再运行一次，我们已经成功部署了合约

8775
08:41:36,219 --> 08:41:40,179
and then we get deployed contract to, and then we get a contract address.
并且得到了 "Deploy contract to" 还有一个合约地址

8776
08:41:40,539 --> 08:41:47,769
Hmm, what's going on here. 
哈！到底是发生了什么？