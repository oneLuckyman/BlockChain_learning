7224
07:08:35,200 --> 07:08:41,680
Now let me show you what happens if we don't use the await keyword here. 
现在我来展示一下如果这里不使用 await 关键字会怎么样

7225
07:08:41,710 --> 07:08:45,010
We're not telling our code to stop. 
我们不告诉代码这里需要停下来

7226
07:08:45,010 --> 07:08:48,520
We're saying hey, deploy this contract and then just keep going. 
这样我们说的就是，部署这个合约，然后直接继续运行

7227
07:08:48,520 --> 07:08:51,250
So we never actually checked to see if this deploy function finished. 
结果就是我们完全没有检查这个 "deploy" 函数是否已经执行完成

7228
07:08:51,250 --> 07:08:53,980
So let's see what happens when we run this instead. 
让我们看看这样运行后发生了些什么

7229
07:08:53,980 --> 07:08:57,970
Instead of that big contract object, we get this promise in its pending state 
这次我们获得的是 "Promise {<pending>}" 状态而不是一个巨大的合约对象

7230
07:08:57,970 --> 07:09:01,630
because our code actually finished before our contract could finish deploying. 
这是因为我们的代码在部署完成前就运行完了

7231
07:09:01,630 --> 07:09:05,650
So we see promise pending here instead, 
所以这里我们看到的是 "Promise {<pending>}"

7232
07:09:05,650 --> 07:09:09,490
this is why the await keyword is so important. 
这就是为什么 "await" 关键字如此重要

7233
07:09:09,490 --> 07:09:12,580
We're saying hey, wait for this to finish 
我们是在告诉它，等待这里执行完成

7234
07:09:12,580 --> 07:09:17,710
the await keyword also resolves a promise. 
await 关键字处理了这个 promise

7235
07:09:17,710 --> 07:09:21,340
So it'll wait for the promise to exit it's pending state. 
所以它会等待 promise 退出 pending 状态

7236
07:09:21,340 --> 07:09:25,000
And then it'll return whatever the pending promise returns. 
并返回 promise 在 pending 后返回的任何东西

7237
07:09:25,000 --> 07:09:29,080
So contract factory to deploy returns a promise that returns a contract. 
所以 "contractFactory.deploy()" 返回的是一个返回合约的 promise

7238
07:09:29,080 --> 07:09:32,680
In fact, if we go to the ethers documentation, we look up deploy. And here 
事实上，如果我们前往 ethers 的文档，在这里检索 "deploy"

7239
07:09:32,680 --> 07:09:36,040
we can see contract factory methods contract factory dot deploy. 
我们就能看到 "contractFactory.deploy()" 方法

7240
07:09:36,040 --> 07:09:40,420
If we look at the definition of the function, 
如果我们看一下这个函数的定义

7241
07:09:40,420 --> 07:09:43,720
it says contract factory dot deploy 
它说的是 "contractFactory.deploy" 

7242
07:09:43,720 --> 07:09:47,440
takes a whole bunch of arguments and some overrides 
它接收一大堆参数以及一些覆盖选项("overrides")

7243
07:09:47,440 --> 07:09:52,120
this arrow is saying this is what it returns, 
这个箭头表示的是它返回的是什么

7244
07:09:52,120 --> 07:09:55,570
it returns a promise that resolves to a contract. 
它返回的是一个实现合约的 promise

7245
07:09:55,570 --> 07:09:59,440
And that's why we need this await keyword 
这就是为什么我们需要这个 await 关键字

7246
07:09:59,710 --> 07:10:03,250
because contract factory to deploy by itself just returns a promise. 
因为 "contractFactory.deploy()" 本身只返回一个 promise 

7247
07:10:03,250 --> 07:10:06,490
But if we do await contract factory dot deploy, 
但如果我们变成 "await contractFactory.deploy()"

7248
07:10:06,490 --> 07:10:09,520
we're saying it returns a promise that resolves to a contract. 
我们做的就是，它返回了一个实现合约的 promise 

7249
07:10:09,520 --> 07:10:12,760
And we're waiting for it to finish deploying to resolve to a contract object. 
并且我们等待它完成部署以实现一个合约对象

7250
07:10:12,790 --> 07:10:15,820
So that's gonna be a major difference here. 
这就是它们之间的主要差别

7251
07:10:15,820 --> 07:10:18,730
Awesome work. So that's gonna be why this await keyword is so important. 
干得不错，这就是为什么 await 关键字如此重要

7252
07:10:18,730 --> 07:10:21,910
And again, you can only do that in asynchronous functions. 
并且再次提醒，只能在异步函数中使用它

7253
07:10:21,910 --> 07:10:28,390
So you need this async keyword at the top of your function names. 
所以你需要在你的函数名称上方加上 "async" 关键字

7254
07:10:28,390 --> 07:10:31,240
Awesome work. So we've deployed a contract to our ganache. Shane, this is fantastic. 
干得好，现在我们已经把合约部署到了 Ganache 链上，真是太棒了

7255
07:10:31,240 --> 07:10:34,810
Let's play with this a little bit more. So what else can we do? 
让我们更进一步，现在我们能做些什么呢？

7256
07:10:34,810 --> 07:10:38,020
Remember how in remix and in Metamask, we could add a whole bunch of stuff. 
记得在 Remix 和 Metamask 上，我们可以添加很多东西

7257
07:10:38,020 --> 07:10:41,770
We could add a gas limit, we could add some value 
我们可以添加 gas 上限("gas limit")，可以添加一些价值("value")

7258
07:10:41,770 --> 07:10:44,440
when we were doing our trends. that we could press the transact button. 
在我们进行交易的时候可以按下交易("Transact")按钮

7259
07:10:44,440 --> 07:10:47,140
We know that when we're working with Metamask, and we want to send some money between our accounts,
并且在使用 Metamask 时，我们可以在我们的账户之间发送资金

7260
07:10:47,140 --> 07:10:48,730
we can actually choose our gas price, our priority fee, all this other stuff, 
我们可以选择 gas 价格("gas price") 优先费("priority fee")，以及所有这些东西

7261
07:10:50,980 --> 07:10:53,740
we can actually do all that in ethers as well. 
我们也可以在 ethers 中完成这些操作

7262
07:10:53,740 --> 07:10:56,620
So if we wanted to await contract factory to deploy, but with a certain gas price, 
所以，如果我们想在 "await contractFactory.deploy" 中指定 gas 价格

7263
07:10:56,620 --> 07:11:00,130
we can add these overrides in this deploy function here. 
我们可以在 deploy 函数这里添加一些 overrides

7264
07:11:00,130 --> 07:11:03,370
Another really neat trick that your Visual Studio code might have 
另一个在 Visual Studio Code 中可能非常有用的技巧是

7265
07:11:03,400 --> 07:11:06,010
is if you click Command or Control, 
如果你按住 Command 或者 Ctrl 键

7266
07:11:06,010 --> 07:11:09,160
depending on your setup, 
具体和你配置相关

7267
07:11:09,190 --> 07:11:13,480
you can actually click into a function and see where it's defined 
你可以点击进入一个函数并查看它在哪里被定义

7268
07:11:13,480 --> 07:11:17,890
and see everything about this function. 
并且你可以查看关于这个函数的一切

7269
07:11:17,890 --> 07:11:20,770
So if I command clicked, 
如果我按住 Command 并点击进入

7270
07:11:20,770 --> 07:11:23,680
I could see that I'm now in 
可以看到我现在位于

7271
07:11:23,680 --> 07:11:28,120
Node modules ethers project contract source of Ts, all this stuff. 
"node_modules > @ethersproject > contract > src.ts" 等等所有这些

7272
07:11:28,150 --> 07:11:33,160
And I can see exactly the function definition of this deploy function on the contract factory object, 
而且我可以看到在 "contractFactory" 对象上的这个 "deploy" 函数的详细定义

7273
07:11:33,160 --> 07:11:36,610
which shows us the same code as what we saw in the documentation. 
它向我们展示了与我们在文档中看到的相同的代码

7274
07:11:36,610 --> 07:11:40,600
We see we have a deploy function, it takes some arguments, 
我们看到这是一个 "deploy" 函数，它接收一些参数

7275
07:11:40,630 --> 07:11:44,230
and then it returns this little semicolon means it returns a promise that resolves to a contract,
然后返回，这个小冒号表示返回一个实现合约的 promise

7276
07:11:44,470 --> 07:11:47,290
which is really nice. 
真是不错

7277
07:11:47,290 --> 07:11:50,920
These are in here are actually a list of overrides that we can specify with some brackets. 
这里的 args 是可以用一组花括号指定的一系列 overrides。

7278
07:11:50,920 --> 07:11:54,820
So what we can do 
所以我们该怎么做？

7279
07:11:54,820 --> 07:11:57,790
is we can put some brackets in our deploy function here and specify certain things 
我们可以在 deploy 函数这里放一组花括号并指定一些内容

7280
07:11:57,790 --> 07:12:01,300
like for example, we can specify the gas price to being some number. 
比如说，我们可以指定 "gasPrice" 为一些数字

7281
07:12:01,330 --> 07:12:06,460
And now if we were to run this, 
现在如果我们运行它

7282
07:12:06,460 --> 07:12:09,070
we would deploy this contract with a gas price of this, 
就会以这个 gas 价格部署这个合约

7283
07:12:09,070 --> 07:12:12,160
we could add a gas limit, we can add a whole bunch of different overrides 
我们还可以添加 "gasLimit"，以及一大堆不同的 overrides

7284
07:12:12,160 --> 07:12:18,490
in our deploy function here. 
在我们的 deploy 函数这里