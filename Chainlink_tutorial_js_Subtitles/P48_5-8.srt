6730
06:38:05,410 --> 06:38:16,660
But I do want to give you a quick bit background on asynchronous programming. 
我要给你们简要介绍一下异步编程的背景知识

6731
06:38:16,660 --> 06:38:19,210
So far, the programming that we've done has been synchronous. 
目前为止，我们所做的编程都是同步的

6732
06:38:19,210 --> 06:38:22,480
And solidity is an example of a programming language, that synchronous, 
solidity 就是一个同步编程语言的实例

6733
06:38:22,480 --> 06:38:25,210
Synchronous means it just goes one line after another. 
同步的意思是说它就是一行接着一行往下运行的

6734
06:38:25,210 --> 06:38:28,120
If our code looks like this, this is synchronous write, 
如果我们的代码看起来是这样的，那这就是同步的，对吧？

6735
06:38:28,120 --> 06:38:32,710
our main function is the first thing that actually gets called. 
我们的 main 函数首先被调用

6736
06:38:32,710 --> 06:38:36,010
Then we do console dot log, that variable equals five, and then console dot log. Again, 
接着会运行 "console.log" 然后是 "variable = 5" 最后是再次运行 "console.log"

6737
06:38:36,010 --> 06:38:38,650
this is synchronous programming in JavaScript, 
这就是 JavaScript 中的同步编程

6738
06:38:38,650 --> 06:38:41,470
all of our solidity is synchronously programmed. 
我们的 solidity 则完全是同步编程的

6739
06:38:41,500 --> 06:38:44,080
There will be some exceptions to this when working with oracles. 
使用预言机的时候会有一些例外

6740
06:38:44,080 --> 06:38:46,570
But for now, everything is synchronous. 
但至少现在全都是同步的

6741
06:38:46,570 --> 06:38:50,680
JavaScript can be asynchronous, 
JavaScript 可以是异步的

6742
06:38:50,680 --> 06:38:54,460
meaning that we can actually have code running at the same time. 
这意味着我们可以让代码同时运行

6743
06:38:54,460 --> 06:38:58,510
A good example I like to use to understand the difference is with cooking. 
有一个我很喜欢的例子可以用来区分二者的区别，就是类比烹饪

6744
06:38:58,510 --> 06:39:02,530
In synchronous programming, for cooking, 
在同步编程中，用烹饪的例子来说

6745
06:39:02,560 --> 06:39:08,500
you might put popcorn in microwave, wait for popcorn to finish. 
你可以把爆米花放到微波炉里，等待爆米花制作完成

6746
06:39:08,500 --> 06:39:11,410
And then, and then maybe you'll pour drinks for everyone. 
接着，你可能会给大家倒点喝的

6747
06:39:11,410 --> 06:39:14,350
And now this is synchronous programming. 
现在，这个过程就是一个同步编程

6748
06:39:14,350 --> 06:39:17,110
Now, it might be a little bit weird 
但这个过程可能看起来有些奇怪，

6749
06:39:17,110 --> 06:39:19,900
for you just to put the popcorn in the microwave, 
你先把爆米花放进微波炉

6750
06:39:19,900 --> 06:39:24,220
and then just stare at it, waiting for it to finish. And then pour the drinks, 
然后就只是盯着它，等它做好，然后再去倒喝的

6751
06:39:24,220 --> 06:39:27,160
you typically can pour the drinks while your popcorn is in the microwave. 
通常来说你可以一边倒喝的一边用微波炉加热爆米花

6752
06:39:27,160 --> 06:39:30,280
And this is where asynchronous programming comes in. 
这就是要引入异步编程的地方了

6753
06:39:30,340 --> 06:39:34,510
If setting up for this movie night, we're asynchronous, what you would do is you'd put popcorn in the microwave. 
如果把这个过程设置为一个异步的过程，你要做的就是先把爆米花放进微波炉

6754
06:39:34,510 --> 06:39:37,990
And while the popcorn is in the microwave, or drinks for everyone, 
然后在爆米花还在微波炉里的时候，就去给大家倒喝的

6755
06:39:37,990 --> 06:39:42,910
and then you'd wait for popcorn finish, 
最后你再等待爆米花制作完成

6756
06:39:42,910 --> 06:39:45,310
since there's nothing left for you to do, 
因为你暂时也没什么其他事要做了

6757
06:39:45,310 --> 06:39:48,490
but it doesn't make sense for you to wait for the popcorn to finish to pour your drinks,
干等着爆米花做好再去倒喝的实在是毫无意义可言

6758
06:39:48,550 --> 06:39:51,400
you can just go ahead and pour the drinks right away and then wait for the popcorn to finish. 
你完全可以先去倒喝的然后再等爆米花做好

6759
06:39:51,400 --> 06:39:54,280
So asynchronous programming is way for us to do stuff 
所以异步编程就是这样一种行事方式

6760
06:39:54,280 --> 06:39:57,430
without waiting around for things to finish. 
即不必干等着一件事做完再去做别的事

6761
06:39:57,430 --> 06:40:00,190
And this is really advantageous 
这种方式是很有好处的

6762
06:40:00,190 --> 06:40:02,770
in JavaScript by default allows us to do this asynchronous programming,
JavaScript 默认就允许我们使用异步编程

6763
06:40:02,800 --> 06:40:05,380
however, sometimes we do want to wait for our popcorn to finish.
不过，有的时候我们确实就是想先等爆米花做好

6764
06:40:05,410 --> 06:40:09,730
For example, if instead of just pouring drinks, 
比如说，如果这里不只是倒喝的

6765
06:40:09,730 --> 06:40:14,350
maybe the next thing instead of pouring drinks was placed salt on popcorn. 
可能是给爆米花撒点盐而不是倒喝的

6766
06:40:14,350 --> 06:40:17,740
Of course, if we want to play salt on our popcorn, 
当然了，如果我们要给爆米花撒盐

6767
06:40:17,740 --> 06:40:20,620
we do have to wait for the popcorn to get out of the microwave. 
那我们确实要先等爆米花从微波炉里拿出来

6768
06:40:20,620 --> 06:40:24,100
So even though placing popcorn in the microwave has this wait time we need to be


6769
06:40:24,100 --> 06:40:27,640
able to tell our code I want you to actually wait for it or No,


6770
06:40:27,640 --> 06:40:31,720
you're good. You can go on and do another task. So that's kind


6771
06:40:31,720 --> 06:40:34,360
of the difference here. And I'll leave some links in the GitHub


6772
06:40:34,360 --> 06:40:36,760
repo associated with this course to understand this a little bit


6773
06:40:36,760 --> 06:40:39,730
better functions that have functions that come with this


6774
06:40:39,730 --> 06:40:43,450
waiting period return something called a problem. This, if put


6775
06:40:43,450 --> 06:40:46,330
popcorn in the microwave was a function in JavaScript, it would


6776
06:40:46,330 --> 06:40:50,620
be a promise based function. A promise can be either pending,


6777
06:40:51,100 --> 06:40:55,390
fulfilled, or rejected. And this is how we know if our popcorn is


6778
06:40:55,390 --> 06:40:58,990
done. If our popcorn was a method, putting popcorn in the


6779
06:40:58,990 --> 06:41:01,930
microwave, were a function in JavaScript, when we're waiting


6780
06:41:01,930 --> 06:41:04,840
for the popcorn to finish, it's in a pending state. When it's


6781
06:41:04,870 --> 06:41:08,710
when the popcorn is finished, it would be fulfilled. And if we


6782
06:41:08,710 --> 06:41:11,740
aborted halfway through, and we stopped waiting, it would be


6783
06:41:11,770 --> 06:41:14,740
rejected. So putting the popcorn in the microwave returns a


6784
06:41:14,740 --> 06:41:18,670
promise. With this promise, we have to tell our code, hey, we


6785
06:41:18,670 --> 06:41:22,180
want you to wait for the popcorn to finish or you can go ahead


6786
06:41:22,180 --> 06:41:24,610
and you can just keep doing stuff. So let's put this all


6787
06:41:24,610 --> 06:41:27,970
together with some JavaScript syntax here. Let's say again,


6788
06:41:27,970 --> 06:41:30,670
we're going to be setting up this movie night. And we need to


6789
06:41:30,700 --> 06:41:34,090
cook popcorn, pour drinks for everybody. And then we need to


6790
06:41:34,090 --> 06:41:37,300
start a movie. So let's write some pseudocode to pretend what


6791
06:41:37,300 --> 06:41:40,240
this code would look like if this was actually a function. So


6792
06:41:40,270 --> 06:41:45,580
we create some function called setup, Movie Night. And in here,


6793
06:41:45,610 --> 06:41:48,070
we would say okay, what's the first thing we need to do? Okay,


6794
06:41:48,070 --> 06:41:50,260
we need to cook popcorn. So let's say we have some cook


6795
06:41:50,260 --> 06:41:54,100
popcorn function. So we'll say, okay, cook popcorn, then the


6796
06:41:54,100 --> 06:41:55,930
next thing we're gonna have to do is we're gonna have to pour


6797
06:41:55,930 --> 06:42:00,430
drinks, or drink. So we'll call some pour drinks function. Now


6798
06:42:00,430 --> 06:42:03,640
here's the thing, we only want to start the movie once our


6799
06:42:03,640 --> 06:42:07,690
popcorn has been cooked. And once our drinks have been


6800
06:42:07,720 --> 06:42:11,560
poured, so if either one of these returned a promise, so if


6801
06:42:11,590 --> 06:42:14,680
either one of these returns a promise, like cook popcorn, for


6802
06:42:14,680 --> 06:42:18,550
example, we would need to tell our code here to actually wait


6803
06:42:18,730 --> 06:42:21,580
for the popcorn to finish because cook popcorn is going to


6804
06:42:21,580 --> 06:42:25,840
be a function where we could say let status equals cook popcorn.


6805
06:42:25,900 --> 06:42:29,710
And while the popcorn is being cooked, the status is going to


6806
06:42:29,710 --> 06:42:33,250
be ending. Once the popcorn gets cooked, it'll be fulfilled. If


6807
06:42:33,250 --> 06:42:35,890
the popcorn breaks, the microwave explodes, the status


6808
06:42:35,890 --> 06:42:39,130
would be rejected. But we don't want the status to be in a


6809
06:42:39,130 --> 06:42:42,430
pending situation. Before we move on, we only want to start


6810
06:42:42,430 --> 06:42:45,580
our movie once these two functions have completed. And


6811
06:42:45,580 --> 06:42:48,700
let's say both of these return these promises things. So we


6812
06:42:48,700 --> 06:42:52,630
need to tell our code, hey, you have to wait. Or you have to


6813
06:42:52,630 --> 06:42:56,050
wait for cook popcorn and for poor drinks to finish. So what


6814
06:42:56,050 --> 06:42:59,050
we can do now without getting too deep into the weeds on how


6815
06:42:59,050 --> 06:43:01,840
all this works, one of the easiest things that we can do


6816
06:43:01,840 --> 06:43:04,630
and you'll see us use this syntax quite often is we'll turn


6817
06:43:04,630 --> 06:43:08,470
this function into an async function. When our functions are


6818
06:43:08,500 --> 06:43:12,790
async, we get access to a keyword called await the await


6819
06:43:12,790 --> 06:43:17,680
keyword tells any promise based function to wait for that


6820
06:43:17,680 --> 06:43:20,530
promise to be fulfilled or rejected. So we say okay, we


6821
06:43:20,530 --> 06:43:24,520
want to await for our popcorn to cook. And then we want to await


6822
06:43:24,550 --> 06:43:27,280
to pour drinks. And then we can just go ahead and start the


6823
06:43:27,280 --> 06:43:31,240
movie. And we only start the movie here once these two have


6824
06:43:31,270 --> 06:43:34,450
been completed. And this is why throughout all of our code,


6825
06:43:34,450 --> 06:43:37,330
you'll see this await keyword used a lot. But it can only be


6826
06:43:37,330 --> 06:43:40,600
used in async functions. So basically, whenever you see this


6827
06:43:40,600 --> 06:43:44,230
await keyword just now Ah, okay, the function that's being called


6828
06:43:44,260 --> 06:43:47,980
is promise based. And we don't want to move on to the next step


6829
06:43:48,010 --> 06:43:50,980
until that function has completed. So that's a little


6830
06:43:50,980 --> 06:43:53,590
bit more about promises and asynchronous programming.


6831
06:43:53,620 --> 06:43:56,410
Hopefully, that's clear. If not, like I said, there's some links


6832
06:43:56,410 --> 06:43:58,840
in the description to learn more about asynchronous programming.


6833
06:43:59,050 --> 06:44:01,570
The reason I wanted to go through this is because most of


6834
06:44:01,570 --> 06:44:03,460
the functions that we're going to be working with are going to


6835
06:44:03,460 --> 06:44:07,810
be asynchronous. For example, when we deploy a contract, what


6836
06:44:07,810 --> 06:44:13,240
do we have to do? Well, we have to wait for it to be deployed.


6837
06:44:14,200 --> 06:44:16,840
If we don't use synchronous programming, and we just leave


6838
06:44:16,840 --> 06:44:20,530
our function main like this, what would happen is we would


6839
06:44:20,530 --> 06:44:24,610
write some code like contract dot deploy, and we wouldn't wait


6840
06:44:24,700 --> 06:44:29,620
for it to finish. Obviously, if we don't wait for it to finish,


6841
06:44:29,710 --> 06:44:32,500
and we try to run some code on a contract that hasn't finished


6842
06:44:32,500 --> 06:44:35,110
deploying it, it's not going to work. So we want to do this, we


6843
06:44:35,110 --> 06:44:38,740
want to have our main function be an async function, so that we


6844
06:44:38,740 --> 06:44:42,010
can we can wait for our contracts to deploy, we can wait


6845
06:44:42,010 --> 06:44:45,310
for things to happen, we can wait for our popcorn to finish,


6846
06:44:45,340 --> 06:44:48,550
we can have the flexibility to tell our code to either wait for


6847
06:44:48,550 --> 06:44:51,400
our popcorn to finish or continue on. So now that we have


6848
06:44:51,400 --> 06:44:54,970
our main function as an async function, we're going to add


6849
06:44:54,970 --> 06:44:57,460
some code to our main function down here. And the code that's


6850
06:44:57,460 --> 06:45:00,040
added here is some syntax for working with asynchronous


6851
06:45:00,040 --> 06:45:02,590
functions. And if this part is confusing, I'm just going to say


6852
06:45:02,590 --> 06:45:05,170
for now, absolute, don't worry about this. If you want to try


6853
06:45:05,170 --> 06:45:07,750
to understand that later. That's fine. But for those who are


6854
06:45:07,750 --> 06:45:09,580
following along, we're just going to add an add


6855
06:45:09,610 --> 06:45:25,360
then catch air air you can follow along typing this


6856
06:45:25,360 --> 06:45:28,300
yourself or you can just copy paste it into your code.


6857
06:45:28,420 --> 06:45:31,900
Basically what this allows us to do is we have our main function,


6858
06:45:31,930 --> 06:45:34,630
that's an asynchronous function. So when we call the main


6859
06:45:34,630 --> 06:45:37,840
function, this is some other syntax for waiting for it to


6860
06:45:38,020 --> 06:45:41,020
basically finish and then printing any errors it gets. And


6861
06:45:41,020 --> 06:45:44,980
that's why we do this but Again, if this big lump of code, if


6862
06:45:44,980 --> 06:45:46,690
you're like what is going on with this big clump of code,


6863
06:45:46,720 --> 06:45:49,180
honestly, for now, just copy paste it. So great. We have our


6864
06:45:49,180 --> 06:45:52,690
asynchronous function main, we have some code. And then we have


6865
06:45:52,780 --> 06:45:55,840
this lump of code, which basically just calls our main


6866
06:45:55,870 --> 06:45:58,690
asynchronous function. Okay, great. I'm gonna delete all this


6867
06:45:58,690 --> 06:46:01,810
for now. But you can still find that common in the GitHub repo


6868
06:46:01,840 --> 06:46:04,960
associated with this course. Awesome. Okay, so now that we


6869
06:46:04,960 --> 06:46:07,990
have our real basic setup, let's go ahead and start coding. And


6870
06:46:08,020 --> 06:46:11,110
if this set apart is confusing, and the async await stuff is


6871
06:46:11,110 --> 06:46:14,020
confusing, don't worry too much about it. It'll make more sense


6872
06:46:14,020 --> 06:46:19,840
as we progress. 