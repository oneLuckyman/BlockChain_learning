14239
14:22:54,620 --> 14:23:02,510
Once we get that random number, we're going to want to pick a random winner from our array of players up here. 
一旦我们获取到了随机数，就要从上面的玩家数组中获取一个随机的优胜者了

14240
14:23:02,510 --> 14:23:06,890
So what do we do? Well, let's go in here. 
我们该怎么做呢？让我们先来到这

14241
14:23:06,890 --> 14:23:10,760
And let's pick a random winner using something called the module function. 
我们要使用一种被称为“模函数”("modulo function")的方法来选择一个随机优胜者

14242
14:23:10,790 --> 14:23:14,660
Now we're gonna get an array back of random words, or random numbers, if you will, 
现在我们得到了一个包含随机数的数组

14243
14:23:14,690 --> 14:23:18,020
since we're only requesting one random word, this random words array is going to be of size one with one random word in it. 
因为我们只请求了一个随机数，所以这个随机数数组的大小就是一，也就是包含一个随机数

14244
14:23:18,020 --> 14:23:21,290
Now this random word is a un 256. So this random word could be something like this. 
这个随机数是一个 uint256，所以它会是，这————样————的

14245
14:23:21,290 --> 14:23:24,140
Well, obviously without the hyphens, but it could be something absolutely massive like that 
当然，肯定没有连字符，反正它就是一个很大的数

14246
14:23:24,140 --> 14:23:27,860
our players array is only going to be so big. So how do we get a random winner from this potentially massive random number, 
我们的 "players" 数组不会太大，那我们该如何从这个巨大的随机数中获取到一个随机的优胜者呢？

14247
14:23:27,860 --> 14:23:31,880
we can use something called the modulo function, 
我们可以用模函数来解决这个问题

14248
14:23:31,880 --> 14:23:34,310
the module operation, a mod N yields, the remainder are after the division of an operand a by the blah, blah, blah, blah, blah. 
模运算 "a % n" 得到的是 "a" 除以 "n" 的余数 "r"，blah, blah, blah

14249
14:23:34,340 --> 14:23:37,760
So what does this mean? Well, we can use the mod function to get a random number out of our players array. 
这是什么意思？我们可以用模函数来从我们的 "players" 数组中获取一个随机数

14250
14:23:37,760 --> 14:23:41,360
So let's say our players array or excuse me, our s players array is of size 10. And a random number is 200. 
假设我们的 "players" 数组，不好意思，是 "s_players" 数组的大小是 10，而随机数时 200 

14251
14:23:41,360 --> 14:23:43,910
So how do we pick a random person out of this players array, or, let's say our random number is 202. 
我们该如何从 "s_players" 数组中随机选一个人呢，或者假设我们的随机数是 202 吧

14252
14:23:43,910 --> 14:23:48,500
If we do 202, which is our random number, mod 10, 
如果我们运行 202，也就是我们的随机数，对 10 取模("202 % 10")

14253
14:23:48,500 --> 14:23:51,200
we're gonna basically do 202 divided by 10. 
基本上我们做的就是 202 除以 10 

14254
14:23:51,200 --> 14:23:53,900
But instead of having the decimals, we're just going to say, 
但我们不再需要小数部分了，而是要这样的考虑

14255
14:23:53,900 --> 14:23:57,050
Okay, how many times is 10 evenly divide into 202. And what's the remainder, 
10 可以被 202 整除多少次，以及余数是多少？

14256
14:23:57,050 --> 14:23:59,990
what doesn't divide evenly into 202? 
什么不能被 202 整除的？
("what's doesn't divide evenly into 202?")

14257
14:24:00,020 --> 14:24:05,000
Well, 20 times 10 equals 200, with two leftover, 
20 乘以 10 等于 200，剩下一个 2 

14258
14:24:05,060 --> 14:24:08,300
so two doesn't evenly divide, or multiply into 200. 
它们的乘积是 200，所以剩下的 2 不能被继续整除

14259
14:24:08,300 --> 14:24:12,860
So that means 202 mod 10 is going to equal to two. So that's how the module function works. 
意思就是 "202 % 10 = 2"，这就是模函数的原理

14260
14:24:12,890 --> 14:24:18,380
And we can use that so we're always going to get a number between. So we're always going to get a number here between zero and nine, 
通过使用它，我们总是能够得到一个介于 0 到 9 之间的数

14261
14:24:18,380 --> 14:24:20,570
which works out perfectly because that which works out perfectly, because those are the indexes of the 10 people in our array. 
这很完美，因为这正好就是我们数组中 10 个人的索引

14262
14:24:20,570 --> 14:24:24,800
So let's use that here. We'll say a un 256 index of winner is going to be equal to random words, 
让我们来实际用一下 `uint256 indexOfWinner = randomWords` 

14263
14:24:24,800 --> 14:24:29,990
at index zero, because we're only getting one random word 
索引是 `[0]`，因为我们只获取了一个随机数

14264
14:24:29,990 --> 14:24:34,550
module, the S underscore players dot length. 
`% s_players.length`

14265
14:24:34,550 --> 14:24:40,460
So this will give us the index of our random winner 
这就会为我们提供一个随机优胜者的索引

14266
14:24:40,460 --> 14:24:43,250
to get that address of the winner will do 
为了获取优胜者的地址，要这样做

14267
14:24:43,250 --> 14:24:46,160
address payable, recent winner equals s players at this index of winner 
`address payable recentWinner = s_players` 位置是这个 "indexOfWinner"

14268
14:24:46,280 --> 14:24:48,530
so awesome. So now we'll have the address of the person that got this random number, the person's that's going to be our verifiably random winner. 
非常好，现在我们就有了这个随机数所对应的这个人的地址，这个人将成为我们可验证的随机优胜者

14269
14:24:48,530 --> 14:24:51,560
Now, it might be kind of cool to brag to people that you're the recent winner. 
向别人炫耀自己是最近的优胜者或许是一件很酷的事

14270
14:24:51,560 --> 14:24:54,800
So let's go ahead to the top and we'll create a new state variable for our most recent winner 
所以让我们来到顶部，为我们最近的优胜者创建一个新的状态变量

14271
14:24:54,800 --> 14:24:58,670
make this state variable in a new section called lottery variables. 
把这个状态变量放到一个新的部分中，称为 "Lottery Variables"

14272
14:24:58,670 --> 14:25:04,670
We'll say address private s underscore recent winner 
接着写 `address private s_recentWinner`

14273
14:25:04,670 --> 14:25:08,150
and it'll start out as nobody but as we get winners update it with s recent winner equals recent winner 
它里面一开始没有人，但随着优胜者被更新 `s_recentWinner = recentWinner`

14274
14:25:08,180 --> 14:25:12,080
and we'll probably want people to know who this is winter is so down below, 
我们希望人们能知道优胜者到底是谁，所以来到下面

14275
14:25:12,080 --> 14:25:14,960
we can do function get recent winner, it's going to be a public view that's going to return that address. 
我们可以创建 `function getRecentWinner() public view returns(address)`

14276
14:25:14,960 --> 14:25:24,200
And then we'll just say return s underscore recent winner, since again, the recent winner is going to be a storage variable. 
接着我们说 `return s_recentWinner`，提醒一下，这个 "recentWinner" 是一个 storage 变量

14277
14:25:24,230 --> 14:25:26,840
So now that we have a recent winner, what else are we gonna do? 
现在我们有了最近的优胜者，下一步该做什么？

14278
14:25:26,840 --> 14:25:29,060
Well, we're probably going to want to send them the money in this contract. 
我们应该在合约里给他们打钱了

14279
14:25:29,060 --> 14:25:34,520
So we're going to do exactly what we did before with sending the money, 
发送资金的操作和我们之前的做法一样

14280
14:25:34,520 --> 14:25:37,400
we're going to do that bull success, comma, blank equals recent winner, call, I'm gonna say value, it's going to be address of this dot balance, 
我们写下 `(bool success, ) = recentWinner.call{value: address(this).balance}

14281
14:25:37,550 --> 14:25:40,370
we're going to send all the money in this contract, and we're going to pass it no data. 
我们要发送这个合约里的全部资金，所以这里不传入任何数据

14282
14:25:40,370 --> 14:25:43,610
And now we could say require, you know, success, whatever, we're going to be a little bit more gas efficient here. 
现在我们可以写 `require(success)` 总之，我们要在这里实现更高的 gas 效率

14283
14:25:43,640 --> 14:25:47,240
And we're just gonna say, if not success, then we're going to revert a new transfer failed error. 
我们只需要说 `if(!success)` 接着我们要 `revert` 一个新的转账失败错误

14284
14:25:48,110 --> 14:25:52,940
So we're gonna go to the top, or say, error name of the contract is raffle, underscore, underscore, transfer failed, like that, 
所以我们来到顶部，`error` 然后是合约的名字 `Raffle__TransferFailed`

14285
14:25:52,940 --> 14:25:56,510
then go back down, and we can now do revert, raffle transfer failed like that. 
再回到底下，执行 `revert Raffle__TransferFailed`，就像这样

14286
14:25:56,540 --> 14:26:01,460
And now that we've picked a winner, right now, we don't have a way to actually keep track of the list of previous winners. 
现在我们已经选出了一个优胜者，但目前我们还没办法追踪之前的优胜者名单

14287
14:26:01,460 --> 14:26:05,720
So we're just going to omit an event. So there's always going to be that easily query double history of event winners. 
我们只需要触发一个事件，这样就可以很容易地查询过去的优胜者记录了

14288
14:26:05,720 --> 14:26:09,320
So we're going to create a new event in the events section called the event winner picked. 
所以我们来 "Event" 部分创建一个新的事件 `event WinnerPicked`

14289
14:26:09,320 --> 14:26:14,210
And this is going to be an address indexed winner. 
里面是 `address indexed winner`

14290
14:26:14,210 --> 14:26:17,270
And we'll scroll down and we'll do MIT winner picked the address of the recent winner. 
我们拉下来，执行 `emit WinnerPicked(recentWinner)`

14291
14:26:17,270 --> 14:26:19,970
This looks pretty good. This looks pretty good here. 
看起来很不错，真的很不错

14292
14:26:19,970 --> 14:26:22,610
Now you'll notice our request ID as this little underscore here and saying, hey, it's an unused function parameter, 
现在你会发现，我们的 "requestId" 有一段下划线，它是在说，这是一个未使用的函数参数

14293
14:26:22,610 --> 14:26:24,860
since we don't use this, but we still need fulfill random words to take a request ID and a random words array. 
尽管我们不使用它，但我们仍然需要让 "fulfillRandomWords" 获取 "requestId" 和 "randomWords" 数组

14294
14:26:24,860 --> 14:26:27,860
But we don't use Request ID, we can just comment out just the request ID part like this, 
但我们用不到 "requestId"，我们可以直接把 "requestId" 部分给注释掉，就像这样

14295
14:26:27,860 --> 14:26:34,850
this tells our function, hey, yes, we know that you need a un 256. 
它告诉我们的函数，是的我知道你需要一个 uint256

14296
14:26:35,150 --> 14:26:40,940
But we're not going to use the request ID. So we'll leave it in here. But we'll leave it blank. 
但我们不打算使用 "requestId" 所以我们这里就保持留白

14297
14:26:41,870 --> 14:26:45,080
Now let's run a little compile here. We'll use yarn, hard hat, compile, 
现在让我们来编译一下，我们使用 `yarn hardhat compile`

14298
14:26:45,080 --> 14:26:48,800
or hh compile, we'll see if we're coding things correctly. 
或者 `hh compile`，我们可以看到代码全部正确

14299
14:26:48,800 --> 14:26:52,160
And indeed, we don't see any errors. So perfect, we can continue. 
并且我们没有看到任何报错，非常完美，我们可以继续了

14300
14:26:52,160 --> 14:26:54,290
So we've added the chain link VRF, where we have a way to verifiably get a random winner. 
我们已经添加了 Chainlink VRF，这样我们就有了一种可验证的获取随机优胜者的方法

14301
14:26:54,290 --> 14:26:59,000
This is fantastic. Now let's update this contract 
这真是太棒了，现在让我们更新这个合约

14302
14:26:59,000 --> 14:27:01,910
so that not only can it pick a verifiable winner, but it can also do this all programmatically 
这样我们不仅可以选出一个可验证的优胜者，还可以通过程序化的方式

14303
14:27:01,940 --> 14:27:05,390
and automatically trigger picking a random winner based off of some time interval without us having to interact with it. 
自动地在一定时间间隔内触发选择随机优胜者，而无需我们的任何操作

14304
14:27:05,750 --> 14:27:10,790
And in a decentralized context. 
而且还是在一个去中心化的环境中

14305
14:27:10,790 --> 14:27:14,750
In order for us to automatically trigger smart contracts based off of some parameter 
为了能自动根据某些参数触发智能合约

14306
14:27:14,780 --> 14:27:17,540
be a time parameter, maybe the price of some asset is some number, 
比如时间参数，也可能是某些资产的价格

14307
14:27:17,540 --> 14:27:20,570
maybe there's a certain amount of money in the liquidity pool or really whatever trigger that you want, 
也可能是某些流动资金池中的金额，或是任何你想要的触发条件

14308
14:27:20,570 --> 14:27:23,120
we can use chain link keepers. To do this. 
我们可以使用 "Chainlink Keepers" 来做到这一点

14309
14:27:23,390 --> 14:27:26,660
Steven fluid has done once again, an amazing introduction to chain the keepers. 
Stephen Fluin 会再次向我们介绍 "Chainlink Keepers" 

14310
14:27:26,660 --> 14:27:30,410
So we're going to follow along with another sub video section of Steven explaining chain link keeper sauce, 
我们将进入 Stephen 的另一个解释 "Chainlink Keepers" 的子视频部分

14311
14:27:30,410 --> 14:27:37,160
he's going to be using the COVID test net, but be sure to use whatever test net is in the documentation. When you play with this and you try this. 
它会使用 Kovan 测试网，但当你尝试和使用时，要确保使用的是这个文档中要求的测试网

14312
14:27:37,160 --> 14:27:43,850
My name is Steven foon. Today, 
大家好，我是 Stephen Fluin 

14313
14:27:43,850 --> 14:27:46,730
I want to show you how to use the chain link keeper network 
我将向你们展示如何使用 "Chainlink Keepers" 网络

14314
14:27:46,820 --> 14:27:49,820
in order to automate your contracts and give them access to off chain computation. 
来自动化你的合约并使它们获得链外计算的能力

14315
14:27:49,820 --> 14:27:53,210
Let's go ahead and dive in. So what we're going to look at today is we're going to start on the chain link documentation webpage. 
让我们开始吧，今天我们要看的内容位于 Chainlink 的文档页面

14316
14:27:53,210 --> 14:27:56,090
And if you just scroll down a little bit, you're going to find using chain link keepers. 
往下拉一点，你就会找到这个 "USING CHAINLINK KEEPERS"

14317
14:27:56,090 --> 14:27:59,810
Now there's really two parts to building a chain link keeper up kept smart contract. 
构建一个 "Chainlink Keepers Upkeep" 智能合约实际上需要两步 

14318
14:27:59,810 --> 14:28:02,600
So the first thing is you need to write a smart contract that's compatible by implementing these two methods. 
首先，你需要编写一个智能合约，通过实现这两个方法使其得到兼容

14319
14:28:02,600 --> 14:28:06,140
And then second, you want to register that smart contract for upkeep with the channeling keeper network. 
其次，你需要将该智能合约注册为 "Chainlink Keeper" 网络的 "Upkeep" (“维护”)任务。

14320
14:28:06,140 --> 14:28:10,490
So let's go ahead and do both of those things. 
让我们继续，来完成这两件事

14321
14:28:10,490 --> 14:28:12,740
So let's start off just by copying and deploying this sample code that we've got. 
首先，让我们从复制并部署我们拥有的这个示例代码开始

14322
14:28:12,740 --> 14:28:16,010
With this one click to remix, 
点击这个按钮跳转到 "Remix"

14323
14:28:16,010 --> 14:28:21,410
what we're gonna see here is a very, very simple contract. That is just a simple counter. 
在这里，我们可以看到一个非常简单的合约，它是一个简单的计数器

14324
14:28:21,410 --> 14:28:24,110
So we can see it's got a counter here. So it's got just a simple number. 
这里我们可以看到一个 "counter"，它是一个简单的数字

14325
14:28:24,140 --> 14:28:30,350
And then you're able to specify when you create the contract and update interval, 
然后在创建这个合约的时候，你可以指定 "updateInterval"

14326
14:28:30,350 --> 14:28:34,100
and then the contract is going to verify Hey, has enough time passed. And if it has, let's update the counter. 
接着合约会进行验证：嘿，是否已经过了足够的时间？如果是的，则更新 "counter"

14327
14:28:34,340 --> 14:28:38,030
And you're going to notice that chinley compatible or timekeeper network compatible contracts use two really important methods that are part of this keeper compatible interface. 
你会注意到兼容 Chainlink Keepers 的合约会使用 "KeeperCompatibleInterface" 的两个重要方法

14328
14:28:38,030 --> 14:28:42,110
The first is check upkeep, 
第一个是 "checkUpkeep"

14329
14:28:42,140 --> 14:28:45,260
and check upkeep is special because this is where the off chain computation happens. 
"checkUpkeep" 是特殊的，因为这里是进行离链计算的地方

14330
14:28:45,260 --> 14:28:49,400
So this is a method that's not actually run on chain. 
所以这实际上是一个不在链上运行的方法

14331
14:28:49,400 --> 14:28:52,880
This is run off chain by a node from the channeling keeper network. 
它是由一个 "Chainlink Keepers" 网络节点离链运行的

14332
14:28:52,880 --> 14:28:55,640
And so what's really nice about this is that the gas used here isn't actually gas, it's on chains. 
并且很好的是，这里用到的 gas 实际上并不是链上的 gas 

14333
14:28:55,670 --> 14:28:59,240
This is just being run by a chain link node. 
而是只用于在 Chainlink 节点上运行

14334
14:28:59,240 --> 14:29:02,210
And then what happens is if your check upkeep method returns, the upkeep is needed. Then it's going to go ahead and perform upkeep. On chain, 
如果你的 "checkUpkeep" 方法返回了 "upkeepNeeded"，它就会在链上运行 "performUpkeep"

14335
14:29:02,210 --> 14:29:05,420
so you can actually generate data off chain, and then pass that in. That's called the check data. 
所以你可以在链外生成数据，然后传进来，称为 "checkData"

14336
14:29:05,420 --> 14:29:08,810
And then that becomes the performed data that's passed into perform upkeep. 
然后这些数据将成为 "performData" 并传递给 "performUpkeep"

14337
14:29:08,810 --> 14:29:11,960
And so the PErforM upkeep method is where you're going to want to verify that things are correct. 
"performUpkeep" 方法是验证正确性的地方

14338
14:29:11,960 --> 14:29:14,390
And that things actually should be modified and run on chain, 
你需要确认这些东西是否真的应该在链上进行修改和运行

14339
14:29:14,390 --> 14:29:16,760
and then actually make the state change. 
然后再进行实际的状态修改

14340
14:29:16,760 --> 14:29:19,430
And so let's go ahead and compile this contract and deploy it to the COVID network. 
我们来编译一下这个合约并把它部署到 Kovan 网络上

14341
14:29:19,430 --> 14:29:22,430
So let's go ahead and within remix, we can do this compilation. 
我们继续在 Remix 中编译它

14342
14:29:22,430 --> 14:29:23,630
And we're going to compile and deploy directly to COVID. 
直接编译并部署到 Kovan 上

14343
14:29:23,659 --> 14:29:26,299
So the zookeeper network is currently as of the filming of this, available on both COVID as well as the theory of main net. 
截止本视频录制时，Chainlink Keepers 网络目前可以在 Kovan 以及主网络上进行使用

14344
14:29:26,299 --> 14:29:29,779
And let's go ahead and play the counter contract. 
让我们继续，来使用一下 "Counter" 合约

14345
14:29:29,929 --> 14:29:32,659
And let's see what's not updating more than every 30 seconds. 
看看它是否能做到每隔 30 秒更新一次

14346
14:29:32,659 --> 14:29:34,789
And so let's go ahead and deploy. So meta masks can ask for a little bit of payment, 
让我们开始部署，MetaMask 可能会要求支付一点费用

14347
14:29:34,789 --> 14:29:37,339
in order for me to deploy this contract to the COVID network. 
以便我可以将合约部署到 Kovan 网络上

14348
14:29:37,339 --> 14:29:39,799
And it looks like that is live. 
看起来已经部署成功了

14349
14:29:39,799 --> 14:29:43,789
So now what I'm going to do is I'm going to be able to take this keeper contract, and copy its address. 
现在我要做的是获取这个 "Keeper" 合约，复制它的地址

14350
14:29:43,849 --> 14:29:46,999
And now we're going to register that contract for upkeep. 
并把这个合约注册到 "Upkeep" 上

14351
14:29:46,999 --> 14:29:49,159
So we're going to jump over to the application that powers the champion keeper network, 
我们跳转到 Chainlink Keepers 网络的应用上

14352
14:29:49,159 --> 14:29:51,589
there's a few different ways you can use, you can interact directly with the registry contract. 
有几种不同的方法可以使用，你可以直接与注册合约进行交互

14353
14:29:51,589 --> 14:29:54,979
But there's a very, very nice interface that lets you do this. 
但这需要非常好用的接口才行

14354
14:29:54,979 --> 14:29:57,259
So let's go ahead and register a new upkeep and it's giving me an error that says you need to connect your wallet. 
让我们注册一个新的 "Upkeep"，但它给了我一个报错，说需要连接到你的钱包

14355
14:29:57,259 --> 14:30:00,409
So let's go ahead and do that. So I'm going to just connect wallet here, and I'm gonna give it access to my account.
让我们继续，连接我的钱包，然后允许它访问我的账户

14356
14:30:00,439 --> 14:30:04,339
And then from there, we should actually be able to register. 
现在我们应该就能进行注册了

14357
14:30:04,339 --> 14:30:07,069
So I'm going to use an email address here. 
在这里填上我的邮箱地址

14358
14:30:07,069 --> 14:30:11,599
I'll give my contract a simple name. 
再给我的合约起一个简单的名字

14359
14:30:11,599 --> 14:30:16,489
I'll paste in that address from the deployed contract, and then I'll give it a gas limit. 
把部署好的合约地址粘贴到这里，然后设置 gas 上限("Gas limit")

14360
14:30:16,489 --> 14:30:19,579
And then check data is this special thing where 
"Check data" 是一个特殊的东西

14361
14:30:19,579 --> 14:30:22,039
you can actually register multiple upkeeps On the same contract in passing data to specify how you want checkup keep to be run 
你可以在同一个合约上注册多个 "Upkeep"，通过传递数据来指定如何检查 "Upkeep" 的运行

14362
14:30:22,039 --> 14:30:24,769
of, we're just going to ignore that that is an optional one. 
这里我们直接忽略这个可选项

14363
14:30:24,769 --> 14:30:27,649
And then we'll give it a starting balance of around 10 link, 
然后我要把 "Starting balance" 设置为 10 Link 

14364
14:30:27,649 --> 14:30:30,919
it's gonna go ahead and use Metamask again to register that transaction on the network. 
它会再次调用 MetaMask 并在网络上注册该交易

14365
14:30:30,919 --> 14:30:33,799
And once it's confirmed, my upkeep should be registered with the network and funded with 10 Link To kick things off. 
一旦完成确认，我的 "Upkeep" 应该就已经在网络上完成注册并通过 10 Link 的资金进行了启动

14366
14:30:33,829 --> 14:30:37,249
Alright, if we go ahead and view the upkeep, we can see it's registered. 
好的，如果我们继续查看这个 "Upkeep"，就可以看到它已经注册好了

14367
14:30:37,249 --> 14:30:39,859
And as soon as the next round of the keeper nodes executes, which should be roughly about every block, 
当下一轮的 "Keeper" 节点启动时，大约就是每个区块产生时

14368
14:30:39,859 --> 14:30:43,819
we should see that the check upkeep method is going to return that 
我们应该就能看到 "checkUpkeep" 方法会返回

14369
14:30:43,849 --> 14:30:47,029
hey, upkeep is actually needed because the timestamp is more than 30 seconds ago. 
嘿，确实需要 "Upkeep"，因为时间戳已经超过了 30 秒

14370
14:30:47,029 --> 14:30:50,779
And then we should go ahead and perform upkeep. 
然后我们应该继续执行 "performUpkeep" 

14371
14:30:50,779 --> 14:30:53,569
So as soon as I take a look at this in remix, I can actually make this bigger here, 
我们可以在 Remix 中进行查看，我来把这里放大一点

14372
14:30:53,569 --> 14:30:57,199
we're going to be able to see from the methods of the contract, 
我们可以使用合约方法进行查看

14373
14:30:57,199 --> 14:31:00,589
if we check the counter, it's going to start at zero. 
如果我们查看 "counter"，它从 0 开始

14374
14:31:00,589 --> 14:31:04,549
And as soon as that 30 seconds has passed, we'll be able to hit the counter again, 
一旦过了 30 秒，我们就可以再次点击 "counter" 

14375
14:31:04,549 --> 14:31:07,219
we'll see that the channeling keeper network has performed upkeep on my contract. 
然后我们就会看到 "Chainlink Keepers" 网络已经对我的合约进行了维护

14376
14:31:07,609 --> 14:31:10,759
Alright, we just refresh and we see the balance of the upkeep has been decreased by about point 01 link. 
好的，我们刷新一下，可以看到 "Upkeep" 费用的余额已经减少了大约 0.01 个 Link 

14377
14:31:10,759 --> 14:31:14,989
And we should also see within our contract that our counter has now updated via proof that perform upkeep method call. 
我们还应该可以在合约中看到，我们的 "counter" 已经通过调用 "performUpkeep" 方法而得到了更新

14378
14:31:14,989 --> 14:31:18,289
And now our counter is at one showing us that our contract is being approved by the chainlink keeper network. 
现在我们的 "counter" 是 1，这表明我们的合约已经得到了 "Chainlink Keepers" 网络的批准

14379
14:31:18,289 --> 14:31:22,099
And everything is working exactly as we expect. 
并且一切都按照着我们预期的那样运行着

14380
14:31:22,099 --> 14:31:25,849
So as you can see, it is very, very easy to create a contract that is compatible with the keeper network. 
如你所见，创建一个与 "Keeper" 网络兼容的合约非常简单

14381
14:31:25,849 --> 14:31:28,609
And it's very easy to register that upkeep and start seeing that your contract automation and option computation are working flawlessly. 
并且注册 "Upkeep" 也很容易，而且你可以看到合约的自动化以及链外运算的运行都很流畅

14382
14:31:28,819 --> 14:31:31,849
Now that we've learned a little bit more about how chainlink keepers work 
现在我们已经对 "Chainlink Keepers" 的工作原理有了一些了解

14383
14:31:31,849 --> 14:31:35,389
if you want to take some time to go through the documentation and open up way down below this open and remix button. 
如果你想的话，可以多花些时间阅读文档并打开下面的 "Open in Remix" 按钮

14384
14:31:35,389 --> 14:31:38,539
So you can actually work with one of these and see these in action for yourself on a test net, feel free to do so 
这样你就可以在测试网上实际操作并观察到这些功能

14385
14:31:38,539 --> 14:31:42,109
we're gonna be using a setup very similar to this keepers counter setup in the chain link documentation. 
我们会采用和这个 "KeepersCounter" 非常相似的设置，就在 Chainlink 的文档中